
/*
	File Generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SqlQuannhanProvider.cs instead.
*/

#region using directives

using System;
using System.Data;
using System.Data.Common;
using System.Text;

using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;

using System.Collections;
using System.Collections.Specialized;

using System.Diagnostics;
using QUANLYQN.Entities;
using QUANLYQN.Data;
using QUANLYQN.Data.Bases;

#endregion

namespace QUANLYQN.Data.SqlClient
{
	///<summary>
	/// This class is the SqlClient Data Access Logic Component implementation for the <see cref="Quannhan"/> entity.
	///</summary>
	public abstract partial class SqlQuannhanProviderBase : QuannhanProviderBase
	{
		#region Declarations
		
		string _connectionString;
	    bool _useStoredProcedure;
	    string _providerInvariantName;
			
		#endregion "Declarations"
			
		#region Constructors
		
		/// <summary>
		/// Creates a new <see cref="SqlQuannhanProviderBase"/> instance.
		/// </summary>
		public SqlQuannhanProviderBase()
		{
		}
	
	/// <summary>
	/// Creates a new <see cref="SqlQuannhanProviderBase"/> instance.
	/// Uses connection string to connect to datasource.
	/// </summary>
	/// <param name="connectionString">The connection string to the database.</param>
	/// <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
	/// <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
	public SqlQuannhanProviderBase(string connectionString, bool useStoredProcedure, string providerInvariantName)
	{
		this._connectionString = connectionString;
		this._useStoredProcedure = useStoredProcedure;
		this._providerInvariantName = providerInvariantName;
	}
		
	#endregion "Constructors"
	
		#region Public properties
	/// <summary>
    /// Gets or sets the connection string.
    /// </summary>
    /// <value>The connection string.</value>
    public string ConnectionString
	{
		get {return this._connectionString;}
		set {this._connectionString = value;}
	}
	
	/// <summary>
    /// Gets or sets a value indicating whether to use stored procedures.
    /// </summary>
    /// <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
	public bool UseStoredProcedure
	{
		get {return this._useStoredProcedure;}
		set {this._useStoredProcedure = value;}
	}
	
	/// <summary>
    /// Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
    /// </summary>
    /// <value>The name of the provider invariant.</value>
    public string ProviderInvariantName
    {
        get { return this._providerInvariantName; }
        set { this._providerInvariantName = value; }
    }
	#endregion
	
		#region Get Many To Many Relationship Functions
		#endregion
	
		#region Delete Functions
		/// <summary>
		/// 	Deletes a row from the DataSource.
		/// </summary>
		/// <param name="idQuannhan">. Primary Key.</param>	
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks>Deletes based on primary key(s).</remarks>
		/// <returns>Returns true if operation suceeded.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Delete(TransactionManager transactionManager, System.Int32 idQuannhan)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.QUANNHAN_Delete", _useStoredProcedure);
			database.AddInParameter(commandWrapper, "@IdQuannhan", DbType.Int32, idQuannhan);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Delete")); 

			int results = 0;
			
			if (transactionManager != null)
			{	
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
			{
				string entityKey = EntityLocator.ConstructKeyFromPkItems(typeof(Quannhan)
					,idQuannhan);
				EntityManager.StopTracking(entityKey);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Delete")); 

			if (results == 0)
			{
				//throw new DataException("The record has been already deleted.");
				return false;
			}
			commandWrapper = null;
			
			return Convert.ToBoolean(results);
		}//end Delete
		#endregion

		#region Find Functions

		#region Parsed Find Methods
		/// <summary>
		/// 	Returns rows meeting the whereclause condition from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks>Operators must be capitalized (OR, AND)</remarks>
		/// <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
		public override QUANLYQN.Entities.TList<Quannhan> Find(TransactionManager transactionManager, string whereClause, int start, int pageLength, out int count)
		{
			count = -1;
			if (whereClause.IndexOf(";") > -1)
				return new QUANLYQN.Entities.TList<Quannhan>();
	
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.QUANNHAN_Find", _useStoredProcedure);

		bool searchUsingOR = false;
		if (whereClause.IndexOf(" OR ") > 0) // did they want to do "a=b OR c=d OR..."?
			searchUsingOR = true;
		
		database.AddInParameter(commandWrapper, "@SearchUsingOR", DbType.Boolean, searchUsingOR);
		
		database.AddInParameter(commandWrapper, "@IdQuannhan", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MaQuannhan", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HotenKhaisinh", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HotenThuongdung", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SotheQuannhan", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CmtQuannhan", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AnhQuannhan", DbType.Binary, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Ngaysinh", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Nguyenquan", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Sinhquan", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Truquan", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DcBaotin", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HotenCha", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HotenMe", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SafeNameHotenVoChong", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SoAnhchiem", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Socon", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@IdCapbac", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@IdChucvu", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Cnqs", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Backythuat", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@TrinhdoVanhoa", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Suckhoe", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Ngoaingu", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HangThuongtat", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@TpGiadinh", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@TpBanthan", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@IdDantoc", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@IdTongiao", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@IdGioitinh", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NgayNhapngu", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NgayXuatngu", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NgayTaingu", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NgayVaodoan", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NgayVaodang", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NgayvaodangChinhthuc", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NgaycaptheQn", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NgaychuyenQncn", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NgaychuyenCnv", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@IdDonvi", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@IdLop", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@IdLoaiquannhan", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Trangthai", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Ghichu", DbType.String, DBNull.Value);
	
			// replace all instances of 'AND' and 'OR' because we already set searchUsingOR
			whereClause = whereClause.Replace(" AND ", "|").Replace(" OR ", "|") ; 
			string[] clauses = whereClause.ToLower().Split('|');
		
			// Here's what's going on below: Find a field, then to get the value we
			// drop the field name from the front, trim spaces, drop the '=' sign,
			// trim more spaces, and drop any outer single quotes.
			// Now handles the case when two fields start off the same way - like "Friendly='Yes' AND Friend='john'"
				
			char[] equalSign = {'='};
			char[] singleQuote = {'\''};
	   		foreach (string clause in clauses)
			{
				if (clause.Trim().StartsWith("id_quannhan ") || clause.Trim().StartsWith("id_quannhan="))
				{
					database.SetParameterValue(commandWrapper, "@IdQuannhan", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ma_quannhan ") || clause.Trim().StartsWith("ma_quannhan="))
				{
					database.SetParameterValue(commandWrapper, "@MaQuannhan", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hoten_khaisinh ") || clause.Trim().StartsWith("hoten_khaisinh="))
				{
					database.SetParameterValue(commandWrapper, "@HotenKhaisinh", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hoten_thuongdung ") || clause.Trim().StartsWith("hoten_thuongdung="))
				{
					database.SetParameterValue(commandWrapper, "@HotenThuongdung", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("sothe_quannhan ") || clause.Trim().StartsWith("sothe_quannhan="))
				{
					database.SetParameterValue(commandWrapper, "@SotheQuannhan", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("cmt_quannhan ") || clause.Trim().StartsWith("cmt_quannhan="))
				{
					database.SetParameterValue(commandWrapper, "@CmtQuannhan", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("anh_quannhan ") || clause.Trim().StartsWith("anh_quannhan="))
				{
					database.SetParameterValue(commandWrapper, "@AnhQuannhan", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ngaysinh ") || clause.Trim().StartsWith("ngaysinh="))
				{
					database.SetParameterValue(commandWrapper, "@Ngaysinh", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("nguyenquan ") || clause.Trim().StartsWith("nguyenquan="))
				{
					database.SetParameterValue(commandWrapper, "@Nguyenquan", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("sinhquan ") || clause.Trim().StartsWith("sinhquan="))
				{
					database.SetParameterValue(commandWrapper, "@Sinhquan", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("truquan ") || clause.Trim().StartsWith("truquan="))
				{
					database.SetParameterValue(commandWrapper, "@Truquan", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("dc_baotin ") || clause.Trim().StartsWith("dc_baotin="))
				{
					database.SetParameterValue(commandWrapper, "@DcBaotin", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hoten_cha ") || clause.Trim().StartsWith("hoten_cha="))
				{
					database.SetParameterValue(commandWrapper, "@HotenCha", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hoten_me ") || clause.Trim().StartsWith("hoten_me="))
				{
					database.SetParameterValue(commandWrapper, "@HotenMe", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hoten_vo(chong) ") || clause.Trim().StartsWith("hoten_vo(chong)="))
				{
					database.SetParameterValue(commandWrapper, "@SafeNameHotenVoChong", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("so_anhchiem ") || clause.Trim().StartsWith("so_anhchiem="))
				{
					database.SetParameterValue(commandWrapper, "@SoAnhchiem", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("socon ") || clause.Trim().StartsWith("socon="))
				{
					database.SetParameterValue(commandWrapper, "@Socon", 
						clause.Trim().Remove(0,5).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("id_capbac ") || clause.Trim().StartsWith("id_capbac="))
				{
					database.SetParameterValue(commandWrapper, "@IdCapbac", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("id_chucvu ") || clause.Trim().StartsWith("id_chucvu="))
				{
					database.SetParameterValue(commandWrapper, "@IdChucvu", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("cnqs ") || clause.Trim().StartsWith("cnqs="))
				{
					database.SetParameterValue(commandWrapper, "@Cnqs", 
						clause.Trim().Remove(0,4).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("backythuat ") || clause.Trim().StartsWith("backythuat="))
				{
					database.SetParameterValue(commandWrapper, "@Backythuat", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("trinhdo_vanhoa ") || clause.Trim().StartsWith("trinhdo_vanhoa="))
				{
					database.SetParameterValue(commandWrapper, "@TrinhdoVanhoa", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("suckhoe ") || clause.Trim().StartsWith("suckhoe="))
				{
					database.SetParameterValue(commandWrapper, "@Suckhoe", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ngoaingu ") || clause.Trim().StartsWith("ngoaingu="))
				{
					database.SetParameterValue(commandWrapper, "@Ngoaingu", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hang_thuongtat ") || clause.Trim().StartsWith("hang_thuongtat="))
				{
					database.SetParameterValue(commandWrapper, "@HangThuongtat", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("tp_giadinh ") || clause.Trim().StartsWith("tp_giadinh="))
				{
					database.SetParameterValue(commandWrapper, "@TpGiadinh", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("tp_banthan ") || clause.Trim().StartsWith("tp_banthan="))
				{
					database.SetParameterValue(commandWrapper, "@TpBanthan", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("id_dantoc ") || clause.Trim().StartsWith("id_dantoc="))
				{
					database.SetParameterValue(commandWrapper, "@IdDantoc", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("id_tongiao ") || clause.Trim().StartsWith("id_tongiao="))
				{
					database.SetParameterValue(commandWrapper, "@IdTongiao", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("id_gioitinh ") || clause.Trim().StartsWith("id_gioitinh="))
				{
					database.SetParameterValue(commandWrapper, "@IdGioitinh", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ngay_nhapngu ") || clause.Trim().StartsWith("ngay_nhapngu="))
				{
					database.SetParameterValue(commandWrapper, "@NgayNhapngu", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ngay_xuatngu ") || clause.Trim().StartsWith("ngay_xuatngu="))
				{
					database.SetParameterValue(commandWrapper, "@NgayXuatngu", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ngay_taingu ") || clause.Trim().StartsWith("ngay_taingu="))
				{
					database.SetParameterValue(commandWrapper, "@NgayTaingu", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ngay_vaodoan ") || clause.Trim().StartsWith("ngay_vaodoan="))
				{
					database.SetParameterValue(commandWrapper, "@NgayVaodoan", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ngay_vaodang ") || clause.Trim().StartsWith("ngay_vaodang="))
				{
					database.SetParameterValue(commandWrapper, "@NgayVaodang", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ngayvaodang_chinhthuc ") || clause.Trim().StartsWith("ngayvaodang_chinhthuc="))
				{
					database.SetParameterValue(commandWrapper, "@NgayvaodangChinhthuc", 
						clause.Trim().Remove(0,21).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ngaycapthe_qn ") || clause.Trim().StartsWith("ngaycapthe_qn="))
				{
					database.SetParameterValue(commandWrapper, "@NgaycaptheQn", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ngaychuyen_qncn ") || clause.Trim().StartsWith("ngaychuyen_qncn="))
				{
					database.SetParameterValue(commandWrapper, "@NgaychuyenQncn", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ngaychuyen_cnv ") || clause.Trim().StartsWith("ngaychuyen_cnv="))
				{
					database.SetParameterValue(commandWrapper, "@NgaychuyenCnv", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("id_donvi ") || clause.Trim().StartsWith("id_donvi="))
				{
					database.SetParameterValue(commandWrapper, "@IdDonvi", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("id_lop ") || clause.Trim().StartsWith("id_lop="))
				{
					database.SetParameterValue(commandWrapper, "@IdLop", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("id_loaiquannhan ") || clause.Trim().StartsWith("id_loaiquannhan="))
				{
					database.SetParameterValue(commandWrapper, "@IdLoaiquannhan", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("trangthai ") || clause.Trim().StartsWith("trangthai="))
				{
					database.SetParameterValue(commandWrapper, "@Trangthai", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ghichu ") || clause.Trim().StartsWith("ghichu="))
				{
					database.SetParameterValue(commandWrapper, "@Ghichu", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
	
				throw new ArgumentException("Unable to use this part of the where clause in this version of Find: " + clause);
			}
					
			IDataReader reader = null;
			//Create Collection
			QUANLYQN.Entities.TList<Quannhan> rows = new QUANLYQN.Entities.TList<Quannhan>();
	
				
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
				
				Fill(reader, rows, start, pageLength);
				
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();	
					
				commandWrapper = null;
			}
			return rows;
		}

		#endregion Parsed Find Methods
		
		#region Parameterized Find Methods
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
		public override QUANLYQN.Entities.TList<Quannhan> Find(TransactionManager transactionManager, IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			SqlFilterParameterCollection filter = null;
			
			if (parameters == null)
				filter = new SqlFilterParameterCollection();
			else 
				filter = parameters.GetParameters();
				
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.QUANNHAN_Find_Dynamic", typeof(QuannhanColumn), filter, orderBy, start, pageLength);
		
			SqlFilterParameter param;

			for ( int i = 0; i < filter.Count; i++ )
			{
				param = filter[i];
				database.AddInParameter(commandWrapper, param.Name, param.DbType, param.GetValue());
			}

			QUANLYQN.Entities.TList<Quannhan> rows = new QUANLYQN.Entities.TList<Quannhan>();
			IDataReader reader = null;
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if ( transactionManager != null )
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;
				
				if ( reader.NextResult() )
				{
					if ( reader.Read() )
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if ( reader != null )
					reader.Close();
					
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion Parameterized Find Methods
		
		#endregion Find Functions
	
		#region GetAll Methods
				
		/// <summary>
		/// 	Gets All rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override QUANLYQN.Entities.TList<Quannhan> GetAll(TransactionManager transactionManager, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.QUANNHAN_Get_List", _useStoredProcedure);
			
			IDataReader reader = null;
		
			//Create Collection
			QUANLYQN.Entities.TList<Quannhan> rows = new QUANLYQN.Entities.TList<Quannhan>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
					
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;	
			}
			return rows;
		}//end getall
		
		#endregion
				
		#region GetPaged Methods
				
		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
		public override QUANLYQN.Entities.TList<Quannhan> GetPaged(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.QUANNHAN_GetPaged", _useStoredProcedure);
		
			
            if (commandWrapper.CommandType == CommandType.Text
                && commandWrapper.CommandText != null)
            {
                commandWrapper.CommandText = commandWrapper.CommandText.Replace(SqlUtil.PAGE_INDEX, string.Concat(SqlUtil.PAGE_INDEX, Guid.NewGuid().ToString("N").Substring(0, 8)));
            }
			
			database.AddInParameter(commandWrapper, "@WhereClause", DbType.String, whereClause);
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.String, orderBy);
			database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32, start);
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32, pageLength);
		
			IDataReader reader = null;
			//Create Collection
			QUANLYQN.Entities.TList<Quannhan> rows = new QUANLYQN.Entities.TList<Quannhan>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;

				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

			}
			catch(Exception)
			{			
				throw;
			}
			finally
			{
				if (reader != null) 
					reader.Close();
				
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion	
		
		#region Get By Foreign Key Functions

		#region GetByIdGioitinh
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_QUANNHAN_DMGIOITINH key.
		///		FK_QUANNHAN_DMGIOITINH Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="idGioitinh"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override QUANLYQN.Entities.TList<Quannhan> GetByIdGioitinh(TransactionManager transactionManager, System.Int32 idGioitinh, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.QUANNHAN_GetByIdGioitinh", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@IdGioitinh", DbType.Int32, idGioitinh);
			
			IDataReader reader = null;
			QUANLYQN.Entities.TList<Quannhan> rows = new QUANLYQN.Entities.TList<Quannhan>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByIdGioitinh", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByIdGioitinh", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByIdLoaiquannhan
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_QUANNHAN_DMLOAIQUANNHAN key.
		///		FK_QUANNHAN_DMLOAIQUANNHAN Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="idLoaiquannhan"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override QUANLYQN.Entities.TList<Quannhan> GetByIdLoaiquannhan(TransactionManager transactionManager, System.Int32 idLoaiquannhan, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.QUANNHAN_GetByIdLoaiquannhan", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@IdLoaiquannhan", DbType.Int32, idLoaiquannhan);
			
			IDataReader reader = null;
			QUANLYQN.Entities.TList<Quannhan> rows = new QUANLYQN.Entities.TList<Quannhan>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByIdLoaiquannhan", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByIdLoaiquannhan", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByIdDantoc
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_QUANNHAN_DMDANTOC key.
		///		FK_QUANNHAN_DMDANTOC Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="idDantoc"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override QUANLYQN.Entities.TList<Quannhan> GetByIdDantoc(TransactionManager transactionManager, System.Int32 idDantoc, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.QUANNHAN_GetByIdDantoc", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@IdDantoc", DbType.Int32, idDantoc);
			
			IDataReader reader = null;
			QUANLYQN.Entities.TList<Quannhan> rows = new QUANLYQN.Entities.TList<Quannhan>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByIdDantoc", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByIdDantoc", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByIdTongiao
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_QUANNHAN_DMTONGIAO key.
		///		FK_QUANNHAN_DMTONGIAO Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="idTongiao"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override QUANLYQN.Entities.TList<Quannhan> GetByIdTongiao(TransactionManager transactionManager, System.Int32 idTongiao, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.QUANNHAN_GetByIdTongiao", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@IdTongiao", DbType.Int32, idTongiao);
			
			IDataReader reader = null;
			QUANLYQN.Entities.TList<Quannhan> rows = new QUANLYQN.Entities.TList<Quannhan>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByIdTongiao", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByIdTongiao", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByIdDonvi
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_QUANNHAN_DMDONVI key.
		///		FK_QUANNHAN_DMDONVI Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="idDonvi"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override QUANLYQN.Entities.TList<Quannhan> GetByIdDonvi(TransactionManager transactionManager, System.Int32 idDonvi, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.QUANNHAN_GetByIdDonvi", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@IdDonvi", DbType.Int32, idDonvi);
			
			IDataReader reader = null;
			QUANLYQN.Entities.TList<Quannhan> rows = new QUANLYQN.Entities.TList<Quannhan>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByIdDonvi", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByIdDonvi", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByIdCapbac
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_QUANNHAN_DMCAPBAC key.
		///		FK_QUANNHAN_DMCAPBAC Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="idCapbac"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override QUANLYQN.Entities.TList<Quannhan> GetByIdCapbac(TransactionManager transactionManager, System.Int32 idCapbac, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.QUANNHAN_GetByIdCapbac", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@IdCapbac", DbType.Int32, idCapbac);
			
			IDataReader reader = null;
			QUANLYQN.Entities.TList<Quannhan> rows = new QUANLYQN.Entities.TList<Quannhan>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByIdCapbac", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByIdCapbac", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByIdChucvu
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_QUANNHAN_DMCHUCVU key.
		///		FK_QUANNHAN_DMCHUCVU Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="idChucvu"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override QUANLYQN.Entities.TList<Quannhan> GetByIdChucvu(TransactionManager transactionManager, System.Int32 idChucvu, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.QUANNHAN_GetByIdChucvu", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@IdChucvu", DbType.Int32, idChucvu);
			
			IDataReader reader = null;
			QUANLYQN.Entities.TList<Quannhan> rows = new QUANLYQN.Entities.TList<Quannhan>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByIdChucvu", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByIdChucvu", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByIdLop
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_QUANNHAN_DMLOP key.
		///		FK_QUANNHAN_DMLOP Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="idLop"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override QUANLYQN.Entities.TList<Quannhan> GetByIdLop(TransactionManager transactionManager, System.Int32 idLop, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.QUANNHAN_GetByIdLop", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@IdLop", DbType.Int32, idLop);
			
			IDataReader reader = null;
			QUANLYQN.Entities.TList<Quannhan> rows = new QUANLYQN.Entities.TList<Quannhan>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByIdLop", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByIdLop", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	
	#endregion
	
		#region Get By Index Functions

		#region GetByIdQuannhan
					
		/// <summary>
		/// 	Gets rows from the datasource based on the PK_QUANNHAN index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="idQuannhan"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <returns>Returns an instance of the <see cref="QUANLYQN.Entities.Quannhan"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override QUANLYQN.Entities.Quannhan GetByIdQuannhan(TransactionManager transactionManager, System.Int32 idQuannhan, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.QUANNHAN_GetByIdQuannhan", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@IdQuannhan", DbType.Int32, idQuannhan);
			
			IDataReader reader = null;
			QUANLYQN.Entities.TList<Quannhan> tmp = new QUANLYQN.Entities.TList<Quannhan>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByIdQuannhan", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByIdQuannhan", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion

	#endregion Get By Index Functions

		#region Insert Methods
		/// <summary>
		/// Lets you efficiently bulk many entity to the database.
		/// </summary>
		/// <param name="transactionManager">The transaction manager.</param>
		/// <param name="entities">The entities.</param>
		/// <remarks>
		///		After inserting into the datasource, the QUANLYQN.Entities.Quannhan object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		public override void BulkInsert(TransactionManager transactionManager, TList<QUANLYQN.Entities.Quannhan> entities)
		{
			//System.Data.SqlClient.SqlBulkCopy bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			
			System.Data.SqlClient.SqlBulkCopy bulkCopy = null;
	
			if (transactionManager != null && transactionManager.IsOpen)
			{			
				System.Data.SqlClient.SqlConnection cnx = transactionManager.TransactionObject.Connection as System.Data.SqlClient.SqlConnection;
				System.Data.SqlClient.SqlTransaction transaction = transactionManager.TransactionObject as System.Data.SqlClient.SqlTransaction;
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(cnx, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints, transaction); //, null);
			}
			else
			{
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			}
			
			bulkCopy.BulkCopyTimeout = 360;
			bulkCopy.DestinationTableName = "QUANNHAN";
			
			DataTable dataTable = new DataTable();
			DataColumn col0 = dataTable.Columns.Add("ID_QUANNHAN", typeof(System.Int32));
			col0.AllowDBNull = false;		
			DataColumn col1 = dataTable.Columns.Add("MA_QUANNHAN", typeof(System.String));
			col1.AllowDBNull = false;		
			DataColumn col2 = dataTable.Columns.Add("HOTEN_KHAISINH", typeof(System.String));
			col2.AllowDBNull = false;		
			DataColumn col3 = dataTable.Columns.Add("HOTEN_THUONGDUNG", typeof(System.String));
			col3.AllowDBNull = false;		
			DataColumn col4 = dataTable.Columns.Add("SOTHE_QUANNHAN", typeof(System.Int32));
			col4.AllowDBNull = false;		
			DataColumn col5 = dataTable.Columns.Add("CMT_QUANNHAN", typeof(System.Int32));
			col5.AllowDBNull = false;		
			DataColumn col6 = dataTable.Columns.Add("ANH_QUANNHAN", typeof(System.Byte[]));
			col6.AllowDBNull = true;		
			DataColumn col7 = dataTable.Columns.Add("NGAYSINH", typeof(System.DateTime));
			col7.AllowDBNull = false;		
			DataColumn col8 = dataTable.Columns.Add("NGUYENQUAN", typeof(System.String));
			col8.AllowDBNull = false;		
			DataColumn col9 = dataTable.Columns.Add("SINHQUAN", typeof(System.String));
			col9.AllowDBNull = false;		
			DataColumn col10 = dataTable.Columns.Add("TRUQUAN", typeof(System.String));
			col10.AllowDBNull = true;		
			DataColumn col11 = dataTable.Columns.Add("DC_BAOTIN", typeof(System.String));
			col11.AllowDBNull = true;		
			DataColumn col12 = dataTable.Columns.Add("HOTEN_CHA", typeof(System.String));
			col12.AllowDBNull = true;		
			DataColumn col13 = dataTable.Columns.Add("HOTEN_ME", typeof(System.String));
			col13.AllowDBNull = true;		
			DataColumn col14 = dataTable.Columns.Add("HOTEN_VO(CHONG)", typeof(System.String));
			col14.AllowDBNull = true;		
			DataColumn col15 = dataTable.Columns.Add("SO_ANHCHIEM", typeof(System.Int32));
			col15.AllowDBNull = false;		
			DataColumn col16 = dataTable.Columns.Add("SOCON", typeof(System.Int32));
			col16.AllowDBNull = false;		
			DataColumn col17 = dataTable.Columns.Add("ID_CAPBAC", typeof(System.Int32));
			col17.AllowDBNull = false;		
			DataColumn col18 = dataTable.Columns.Add("ID_CHUCVU", typeof(System.Int32));
			col18.AllowDBNull = false;		
			DataColumn col19 = dataTable.Columns.Add("CNQS", typeof(System.String));
			col19.AllowDBNull = true;		
			DataColumn col20 = dataTable.Columns.Add("BACKYTHUAT", typeof(System.String));
			col20.AllowDBNull = true;		
			DataColumn col21 = dataTable.Columns.Add("TRINHDO_VANHOA", typeof(System.String));
			col21.AllowDBNull = false;		
			DataColumn col22 = dataTable.Columns.Add("SUCKHOE", typeof(System.String));
			col22.AllowDBNull = true;		
			DataColumn col23 = dataTable.Columns.Add("NGOAINGU", typeof(System.String));
			col23.AllowDBNull = true;		
			DataColumn col24 = dataTable.Columns.Add("HANG_THUONGTAT", typeof(System.String));
			col24.AllowDBNull = true;		
			DataColumn col25 = dataTable.Columns.Add("TP_GIADINH", typeof(System.String));
			col25.AllowDBNull = true;		
			DataColumn col26 = dataTable.Columns.Add("TP_BANTHAN", typeof(System.String));
			col26.AllowDBNull = true;		
			DataColumn col27 = dataTable.Columns.Add("ID_DANTOC", typeof(System.Int32));
			col27.AllowDBNull = false;		
			DataColumn col28 = dataTable.Columns.Add("ID_TONGIAO", typeof(System.Int32));
			col28.AllowDBNull = false;		
			DataColumn col29 = dataTable.Columns.Add("ID_GIOITINH", typeof(System.Int32));
			col29.AllowDBNull = false;		
			DataColumn col30 = dataTable.Columns.Add("NGAY_NHAPNGU", typeof(System.DateTime));
			col30.AllowDBNull = false;		
			DataColumn col31 = dataTable.Columns.Add("NGAY_XUATNGU", typeof(System.DateTime));
			col31.AllowDBNull = true;		
			DataColumn col32 = dataTable.Columns.Add("NGAY_TAINGU", typeof(System.DateTime));
			col32.AllowDBNull = true;		
			DataColumn col33 = dataTable.Columns.Add("NGAY_VAODOAN", typeof(System.DateTime));
			col33.AllowDBNull = true;		
			DataColumn col34 = dataTable.Columns.Add("NGAY_VAODANG", typeof(System.DateTime));
			col34.AllowDBNull = true;		
			DataColumn col35 = dataTable.Columns.Add("NGAYVAODANG_CHINHTHUC", typeof(System.DateTime));
			col35.AllowDBNull = true;		
			DataColumn col36 = dataTable.Columns.Add("NGAYCAPTHE_QN", typeof(System.DateTime));
			col36.AllowDBNull = true;		
			DataColumn col37 = dataTable.Columns.Add("NGAYCHUYEN_QNCN", typeof(System.DateTime));
			col37.AllowDBNull = true;		
			DataColumn col38 = dataTable.Columns.Add("NGAYCHUYEN_CNV", typeof(System.DateTime));
			col38.AllowDBNull = true;		
			DataColumn col39 = dataTable.Columns.Add("ID_DONVI", typeof(System.Int32));
			col39.AllowDBNull = false;		
			DataColumn col40 = dataTable.Columns.Add("ID_LOP", typeof(System.Int32));
			col40.AllowDBNull = false;		
			DataColumn col41 = dataTable.Columns.Add("ID_LOAIQUANNHAN", typeof(System.Int32));
			col41.AllowDBNull = false;		
			DataColumn col42 = dataTable.Columns.Add("TRANGTHAI", typeof(System.String));
			col42.AllowDBNull = false;		
			DataColumn col43 = dataTable.Columns.Add("GHICHU", typeof(System.String));
			col43.AllowDBNull = true;		
			
			bulkCopy.ColumnMappings.Add("ID_QUANNHAN", "ID_QUANNHAN");
			bulkCopy.ColumnMappings.Add("MA_QUANNHAN", "MA_QUANNHAN");
			bulkCopy.ColumnMappings.Add("HOTEN_KHAISINH", "HOTEN_KHAISINH");
			bulkCopy.ColumnMappings.Add("HOTEN_THUONGDUNG", "HOTEN_THUONGDUNG");
			bulkCopy.ColumnMappings.Add("SOTHE_QUANNHAN", "SOTHE_QUANNHAN");
			bulkCopy.ColumnMappings.Add("CMT_QUANNHAN", "CMT_QUANNHAN");
			bulkCopy.ColumnMappings.Add("ANH_QUANNHAN", "ANH_QUANNHAN");
			bulkCopy.ColumnMappings.Add("NGAYSINH", "NGAYSINH");
			bulkCopy.ColumnMappings.Add("NGUYENQUAN", "NGUYENQUAN");
			bulkCopy.ColumnMappings.Add("SINHQUAN", "SINHQUAN");
			bulkCopy.ColumnMappings.Add("TRUQUAN", "TRUQUAN");
			bulkCopy.ColumnMappings.Add("DC_BAOTIN", "DC_BAOTIN");
			bulkCopy.ColumnMappings.Add("HOTEN_CHA", "HOTEN_CHA");
			bulkCopy.ColumnMappings.Add("HOTEN_ME", "HOTEN_ME");
			bulkCopy.ColumnMappings.Add("HOTEN_VO(CHONG)", "HOTEN_VO(CHONG)");
			bulkCopy.ColumnMappings.Add("SO_ANHCHIEM", "SO_ANHCHIEM");
			bulkCopy.ColumnMappings.Add("SOCON", "SOCON");
			bulkCopy.ColumnMappings.Add("ID_CAPBAC", "ID_CAPBAC");
			bulkCopy.ColumnMappings.Add("ID_CHUCVU", "ID_CHUCVU");
			bulkCopy.ColumnMappings.Add("CNQS", "CNQS");
			bulkCopy.ColumnMappings.Add("BACKYTHUAT", "BACKYTHUAT");
			bulkCopy.ColumnMappings.Add("TRINHDO_VANHOA", "TRINHDO_VANHOA");
			bulkCopy.ColumnMappings.Add("SUCKHOE", "SUCKHOE");
			bulkCopy.ColumnMappings.Add("NGOAINGU", "NGOAINGU");
			bulkCopy.ColumnMappings.Add("HANG_THUONGTAT", "HANG_THUONGTAT");
			bulkCopy.ColumnMappings.Add("TP_GIADINH", "TP_GIADINH");
			bulkCopy.ColumnMappings.Add("TP_BANTHAN", "TP_BANTHAN");
			bulkCopy.ColumnMappings.Add("ID_DANTOC", "ID_DANTOC");
			bulkCopy.ColumnMappings.Add("ID_TONGIAO", "ID_TONGIAO");
			bulkCopy.ColumnMappings.Add("ID_GIOITINH", "ID_GIOITINH");
			bulkCopy.ColumnMappings.Add("NGAY_NHAPNGU", "NGAY_NHAPNGU");
			bulkCopy.ColumnMappings.Add("NGAY_XUATNGU", "NGAY_XUATNGU");
			bulkCopy.ColumnMappings.Add("NGAY_TAINGU", "NGAY_TAINGU");
			bulkCopy.ColumnMappings.Add("NGAY_VAODOAN", "NGAY_VAODOAN");
			bulkCopy.ColumnMappings.Add("NGAY_VAODANG", "NGAY_VAODANG");
			bulkCopy.ColumnMappings.Add("NGAYVAODANG_CHINHTHUC", "NGAYVAODANG_CHINHTHUC");
			bulkCopy.ColumnMappings.Add("NGAYCAPTHE_QN", "NGAYCAPTHE_QN");
			bulkCopy.ColumnMappings.Add("NGAYCHUYEN_QNCN", "NGAYCHUYEN_QNCN");
			bulkCopy.ColumnMappings.Add("NGAYCHUYEN_CNV", "NGAYCHUYEN_CNV");
			bulkCopy.ColumnMappings.Add("ID_DONVI", "ID_DONVI");
			bulkCopy.ColumnMappings.Add("ID_LOP", "ID_LOP");
			bulkCopy.ColumnMappings.Add("ID_LOAIQUANNHAN", "ID_LOAIQUANNHAN");
			bulkCopy.ColumnMappings.Add("TRANGTHAI", "TRANGTHAI");
			bulkCopy.ColumnMappings.Add("GHICHU", "GHICHU");
			
			foreach(QUANLYQN.Entities.Quannhan entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
					
				DataRow row = dataTable.NewRow();
				
					row["ID_QUANNHAN"] = entity.IdQuannhan;
							
				
					row["MA_QUANNHAN"] = entity.MaQuannhan;
							
				
					row["HOTEN_KHAISINH"] = entity.HotenKhaisinh;
							
				
					row["HOTEN_THUONGDUNG"] = entity.HotenThuongdung;
							
				
					row["SOTHE_QUANNHAN"] = entity.SotheQuannhan;
							
				
					row["CMT_QUANNHAN"] = entity.CmtQuannhan;
							
				
					row["ANH_QUANNHAN"] = entity.AnhQuannhan;
							
				
					row["NGAYSINH"] = entity.Ngaysinh;
							
				
					row["NGUYENQUAN"] = entity.Nguyenquan;
							
				
					row["SINHQUAN"] = entity.Sinhquan;
							
				
					row["TRUQUAN"] = entity.Truquan;
							
				
					row["DC_BAOTIN"] = entity.DcBaotin;
							
				
					row["HOTEN_CHA"] = entity.HotenCha;
							
				
					row["HOTEN_ME"] = entity.HotenMe;
							
				
					row["HOTEN_VO(CHONG)"] = entity.SafeNameHotenVoChong;
							
				
					row["SO_ANHCHIEM"] = entity.SoAnhchiem;
							
				
					row["SOCON"] = entity.Socon;
							
				
					row["ID_CAPBAC"] = entity.IdCapbac;
							
				
					row["ID_CHUCVU"] = entity.IdChucvu;
							
				
					row["CNQS"] = entity.Cnqs;
							
				
					row["BACKYTHUAT"] = entity.Backythuat;
							
				
					row["TRINHDO_VANHOA"] = entity.TrinhdoVanhoa;
							
				
					row["SUCKHOE"] = entity.Suckhoe;
							
				
					row["NGOAINGU"] = entity.Ngoaingu;
							
				
					row["HANG_THUONGTAT"] = entity.HangThuongtat;
							
				
					row["TP_GIADINH"] = entity.TpGiadinh;
							
				
					row["TP_BANTHAN"] = entity.TpBanthan;
							
				
					row["ID_DANTOC"] = entity.IdDantoc;
							
				
					row["ID_TONGIAO"] = entity.IdTongiao;
							
				
					row["ID_GIOITINH"] = entity.IdGioitinh;
							
				
					row["NGAY_NHAPNGU"] = entity.NgayNhapngu;
							
				
					row["NGAY_XUATNGU"] = entity.NgayXuatngu.HasValue ? (object) entity.NgayXuatngu  : System.DBNull.Value;
							
				
					row["NGAY_TAINGU"] = entity.NgayTaingu.HasValue ? (object) entity.NgayTaingu  : System.DBNull.Value;
							
				
					row["NGAY_VAODOAN"] = entity.NgayVaodoan.HasValue ? (object) entity.NgayVaodoan  : System.DBNull.Value;
							
				
					row["NGAY_VAODANG"] = entity.NgayVaodang.HasValue ? (object) entity.NgayVaodang  : System.DBNull.Value;
							
				
					row["NGAYVAODANG_CHINHTHUC"] = entity.NgayvaodangChinhthuc.HasValue ? (object) entity.NgayvaodangChinhthuc  : System.DBNull.Value;
							
				
					row["NGAYCAPTHE_QN"] = entity.NgaycaptheQn.HasValue ? (object) entity.NgaycaptheQn  : System.DBNull.Value;
							
				
					row["NGAYCHUYEN_QNCN"] = entity.NgaychuyenQncn.HasValue ? (object) entity.NgaychuyenQncn  : System.DBNull.Value;
							
				
					row["NGAYCHUYEN_CNV"] = entity.NgaychuyenCnv.HasValue ? (object) entity.NgaychuyenCnv  : System.DBNull.Value;
							
				
					row["ID_DONVI"] = entity.IdDonvi;
							
				
					row["ID_LOP"] = entity.IdLop;
							
				
					row["ID_LOAIQUANNHAN"] = entity.IdLoaiquannhan;
							
				
					row["TRANGTHAI"] = entity.Trangthai;
							
				
					row["GHICHU"] = entity.Ghichu;
							
				
				dataTable.Rows.Add(row);
			}		
			
			// send the data to the server		
			bulkCopy.WriteToServer(dataTable);		
			
			// update back the state
			foreach(QUANLYQN.Entities.Quannhan entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
			
				entity.AcceptChanges();
			}
		}
				
		/// <summary>
		/// 	Inserts a QUANLYQN.Entities.Quannhan object into the datasource using a transaction.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">QUANLYQN.Entities.Quannhan object to insert.</param>
		/// <remarks>
		///		After inserting into the datasource, the QUANLYQN.Entities.Quannhan object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Insert(TransactionManager transactionManager, QUANLYQN.Entities.Quannhan entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.QUANNHAN_Insert", _useStoredProcedure);
			
			database.AddOutParameter(commandWrapper, "@IdQuannhan", DbType.Int32, 4);
			database.AddInParameter(commandWrapper, "@MaQuannhan", DbType.String, entity.MaQuannhan );
			database.AddInParameter(commandWrapper, "@HotenKhaisinh", DbType.String, entity.HotenKhaisinh );
			database.AddInParameter(commandWrapper, "@HotenThuongdung", DbType.String, entity.HotenThuongdung );
			database.AddInParameter(commandWrapper, "@SotheQuannhan", DbType.Int32, entity.SotheQuannhan );
			database.AddInParameter(commandWrapper, "@CmtQuannhan", DbType.Int32, entity.CmtQuannhan );
			database.AddInParameter(commandWrapper, "@AnhQuannhan", DbType.Binary, entity.AnhQuannhan );
			database.AddInParameter(commandWrapper, "@Ngaysinh", DbType.DateTime, entity.Ngaysinh );
			database.AddInParameter(commandWrapper, "@Nguyenquan", DbType.String, entity.Nguyenquan );
			database.AddInParameter(commandWrapper, "@Sinhquan", DbType.String, entity.Sinhquan );
			database.AddInParameter(commandWrapper, "@Truquan", DbType.String, entity.Truquan );
			database.AddInParameter(commandWrapper, "@DcBaotin", DbType.String, entity.DcBaotin );
			database.AddInParameter(commandWrapper, "@HotenCha", DbType.String, entity.HotenCha );
			database.AddInParameter(commandWrapper, "@HotenMe", DbType.String, entity.HotenMe );
			database.AddInParameter(commandWrapper, "@SafeNameHotenVoChong", DbType.String, entity.SafeNameHotenVoChong );
			database.AddInParameter(commandWrapper, "@SoAnhchiem", DbType.Int32, entity.SoAnhchiem );
			database.AddInParameter(commandWrapper, "@Socon", DbType.Int32, entity.Socon );
			database.AddInParameter(commandWrapper, "@IdCapbac", DbType.Int32, entity.IdCapbac );
			database.AddInParameter(commandWrapper, "@IdChucvu", DbType.Int32, entity.IdChucvu );
			database.AddInParameter(commandWrapper, "@Cnqs", DbType.String, entity.Cnqs );
			database.AddInParameter(commandWrapper, "@Backythuat", DbType.String, entity.Backythuat );
			database.AddInParameter(commandWrapper, "@TrinhdoVanhoa", DbType.String, entity.TrinhdoVanhoa );
			database.AddInParameter(commandWrapper, "@Suckhoe", DbType.String, entity.Suckhoe );
			database.AddInParameter(commandWrapper, "@Ngoaingu", DbType.String, entity.Ngoaingu );
			database.AddInParameter(commandWrapper, "@HangThuongtat", DbType.String, entity.HangThuongtat );
			database.AddInParameter(commandWrapper, "@TpGiadinh", DbType.String, entity.TpGiadinh );
			database.AddInParameter(commandWrapper, "@TpBanthan", DbType.String, entity.TpBanthan );
			database.AddInParameter(commandWrapper, "@IdDantoc", DbType.Int32, entity.IdDantoc );
			database.AddInParameter(commandWrapper, "@IdTongiao", DbType.Int32, entity.IdTongiao );
			database.AddInParameter(commandWrapper, "@IdGioitinh", DbType.Int32, entity.IdGioitinh );
			database.AddInParameter(commandWrapper, "@NgayNhapngu", DbType.DateTime, entity.NgayNhapngu );
			database.AddInParameter(commandWrapper, "@NgayXuatngu", DbType.DateTime, (entity.NgayXuatngu.HasValue ? (object) entity.NgayXuatngu  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@NgayTaingu", DbType.DateTime, (entity.NgayTaingu.HasValue ? (object) entity.NgayTaingu  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@NgayVaodoan", DbType.DateTime, (entity.NgayVaodoan.HasValue ? (object) entity.NgayVaodoan  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@NgayVaodang", DbType.DateTime, (entity.NgayVaodang.HasValue ? (object) entity.NgayVaodang  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@NgayvaodangChinhthuc", DbType.DateTime, (entity.NgayvaodangChinhthuc.HasValue ? (object) entity.NgayvaodangChinhthuc  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@NgaycaptheQn", DbType.DateTime, (entity.NgaycaptheQn.HasValue ? (object) entity.NgaycaptheQn  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@NgaychuyenQncn", DbType.DateTime, (entity.NgaychuyenQncn.HasValue ? (object) entity.NgaychuyenQncn  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@NgaychuyenCnv", DbType.DateTime, (entity.NgaychuyenCnv.HasValue ? (object) entity.NgaychuyenCnv  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@IdDonvi", DbType.Int32, entity.IdDonvi );
			database.AddInParameter(commandWrapper, "@IdLop", DbType.Int32, entity.IdLop );
			database.AddInParameter(commandWrapper, "@IdLoaiquannhan", DbType.Int32, entity.IdLoaiquannhan );
			database.AddInParameter(commandWrapper, "@Trangthai", DbType.String, entity.Trangthai );
			database.AddInParameter(commandWrapper, "@Ghichu", DbType.String, entity.Ghichu );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Insert", entity));
				
			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
					

			entity.IdQuannhan = (System.Int32) database.GetParameterValue(commandWrapper, "@IdQuannhan");						
			
			
			entity.AcceptChanges();
	
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Insert", entity));

			return Convert.ToBoolean(results);
		}	
		#endregion

		#region Update Methods
				
		/// <summary>
		/// 	Update an existing row in the datasource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">QUANLYQN.Entities.Quannhan object to update.</param>
		/// <remarks>
		///		After updating the datasource, the QUANLYQN.Entities.Quannhan object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Update(TransactionManager transactionManager, QUANLYQN.Entities.Quannhan entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.QUANNHAN_Update", _useStoredProcedure);
			
			database.AddInParameter(commandWrapper, "@IdQuannhan", DbType.Int32, entity.IdQuannhan );
			database.AddInParameter(commandWrapper, "@MaQuannhan", DbType.String, entity.MaQuannhan );
			database.AddInParameter(commandWrapper, "@HotenKhaisinh", DbType.String, entity.HotenKhaisinh );
			database.AddInParameter(commandWrapper, "@HotenThuongdung", DbType.String, entity.HotenThuongdung );
			database.AddInParameter(commandWrapper, "@SotheQuannhan", DbType.Int32, entity.SotheQuannhan );
			database.AddInParameter(commandWrapper, "@CmtQuannhan", DbType.Int32, entity.CmtQuannhan );
			database.AddInParameter(commandWrapper, "@AnhQuannhan", DbType.Binary, entity.AnhQuannhan );
			database.AddInParameter(commandWrapper, "@Ngaysinh", DbType.DateTime, entity.Ngaysinh );
			database.AddInParameter(commandWrapper, "@Nguyenquan", DbType.String, entity.Nguyenquan );
			database.AddInParameter(commandWrapper, "@Sinhquan", DbType.String, entity.Sinhquan );
			database.AddInParameter(commandWrapper, "@Truquan", DbType.String, entity.Truquan );
			database.AddInParameter(commandWrapper, "@DcBaotin", DbType.String, entity.DcBaotin );
			database.AddInParameter(commandWrapper, "@HotenCha", DbType.String, entity.HotenCha );
			database.AddInParameter(commandWrapper, "@HotenMe", DbType.String, entity.HotenMe );
			database.AddInParameter(commandWrapper, "@SafeNameHotenVoChong", DbType.String, entity.SafeNameHotenVoChong );
			database.AddInParameter(commandWrapper, "@SoAnhchiem", DbType.Int32, entity.SoAnhchiem );
			database.AddInParameter(commandWrapper, "@Socon", DbType.Int32, entity.Socon );
			database.AddInParameter(commandWrapper, "@IdCapbac", DbType.Int32, entity.IdCapbac );
			database.AddInParameter(commandWrapper, "@IdChucvu", DbType.Int32, entity.IdChucvu );
			database.AddInParameter(commandWrapper, "@Cnqs", DbType.String, entity.Cnqs );
			database.AddInParameter(commandWrapper, "@Backythuat", DbType.String, entity.Backythuat );
			database.AddInParameter(commandWrapper, "@TrinhdoVanhoa", DbType.String, entity.TrinhdoVanhoa );
			database.AddInParameter(commandWrapper, "@Suckhoe", DbType.String, entity.Suckhoe );
			database.AddInParameter(commandWrapper, "@Ngoaingu", DbType.String, entity.Ngoaingu );
			database.AddInParameter(commandWrapper, "@HangThuongtat", DbType.String, entity.HangThuongtat );
			database.AddInParameter(commandWrapper, "@TpGiadinh", DbType.String, entity.TpGiadinh );
			database.AddInParameter(commandWrapper, "@TpBanthan", DbType.String, entity.TpBanthan );
			database.AddInParameter(commandWrapper, "@IdDantoc", DbType.Int32, entity.IdDantoc );
			database.AddInParameter(commandWrapper, "@IdTongiao", DbType.Int32, entity.IdTongiao );
			database.AddInParameter(commandWrapper, "@IdGioitinh", DbType.Int32, entity.IdGioitinh );
			database.AddInParameter(commandWrapper, "@NgayNhapngu", DbType.DateTime, entity.NgayNhapngu );
			database.AddInParameter(commandWrapper, "@NgayXuatngu", DbType.DateTime, (entity.NgayXuatngu.HasValue ? (object) entity.NgayXuatngu : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@NgayTaingu", DbType.DateTime, (entity.NgayTaingu.HasValue ? (object) entity.NgayTaingu : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@NgayVaodoan", DbType.DateTime, (entity.NgayVaodoan.HasValue ? (object) entity.NgayVaodoan : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@NgayVaodang", DbType.DateTime, (entity.NgayVaodang.HasValue ? (object) entity.NgayVaodang : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@NgayvaodangChinhthuc", DbType.DateTime, (entity.NgayvaodangChinhthuc.HasValue ? (object) entity.NgayvaodangChinhthuc : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@NgaycaptheQn", DbType.DateTime, (entity.NgaycaptheQn.HasValue ? (object) entity.NgaycaptheQn : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@NgaychuyenQncn", DbType.DateTime, (entity.NgaychuyenQncn.HasValue ? (object) entity.NgaychuyenQncn : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@NgaychuyenCnv", DbType.DateTime, (entity.NgaychuyenCnv.HasValue ? (object) entity.NgaychuyenCnv : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@IdDonvi", DbType.Int32, entity.IdDonvi );
			database.AddInParameter(commandWrapper, "@IdLop", DbType.Int32, entity.IdLop );
			database.AddInParameter(commandWrapper, "@IdLoaiquannhan", DbType.Int32, entity.IdLoaiquannhan );
			database.AddInParameter(commandWrapper, "@Trangthai", DbType.String, entity.Trangthai );
			database.AddInParameter(commandWrapper, "@Ghichu", DbType.String, entity.Ghichu );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Update", entity));

			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
				EntityManager.StopTracking(entity.EntityTrackingKey);
			
			
			entity.AcceptChanges();
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Update", entity));

			return Convert.ToBoolean(results);
		}
			
		#endregion
		
		#region Custom Methods
	
		#endregion
	}//end class
} // end namespace
