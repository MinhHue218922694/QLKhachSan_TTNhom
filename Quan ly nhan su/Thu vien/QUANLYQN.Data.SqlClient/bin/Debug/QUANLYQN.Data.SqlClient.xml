<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QUANLYQN.Data.SqlClient</name>
    </assembly>
    <members>
        <member name="T:QUANLYQN.Data.SqlClient.SqlDmtongiaoProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:QUANLYQN.Entities.Dmtongiao"/> entity.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmtongiaoProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlDmtongiaoProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmtongiaoProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlDmtongiaoProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmtongiaoProviderBase.Delete(QUANLYQN.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idTongiao">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmtongiaoProviderBase.Find(QUANLYQN.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Dmtongiao objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmtongiaoProviderBase.Find(QUANLYQN.Data.TransactionManager,QUANLYQN.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:QUANLYQN.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Dmtongiao objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmtongiaoProviderBase.GetAll(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Dmtongiao objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmtongiaoProviderBase.GetPaged(QUANLYQN.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Dmtongiao objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmtongiaoProviderBase.GetByIdTongiao(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_DMTONGIAO index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idTongiao"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmtongiao"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmtongiaoProviderBase.BulkInsert(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.TList{QUANLYQN.Entities.Dmtongiao})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the QUANLYQN.Entities.Dmtongiao object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmtongiaoProviderBase.Insert(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Dmtongiao)">
            <summary>
            	Inserts a QUANLYQN.Entities.Dmtongiao object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">QUANLYQN.Entities.Dmtongiao object to insert.</param>
            <remarks>
            	After inserting into the datasource, the QUANLYQN.Entities.Dmtongiao object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmtongiaoProviderBase.Update(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Dmtongiao)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">QUANLYQN.Entities.Dmtongiao object to update.</param>
            <remarks>
            	After updating the datasource, the QUANLYQN.Entities.Dmtongiao object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlDmtongiaoProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlDmtongiaoProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlDmtongiaoProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:QUANLYQN.Data.SqlClient.SqlAdminGroupmenusProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:QUANLYQN.Entities.AdminGroupmenus"/> entity.
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.SqlClient.SqlAdminGroupmenusProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:QUANLYQN.Entities.AdminGroupmenus"/> entity.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminGroupmenusProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlAdminGroupmenusProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminGroupmenusProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlAdminGroupmenusProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminGroupmenusProviderBase.Delete(QUANLYQN.Data.TransactionManager,System.String,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idMenu">. Primary Key.</param>	
            <param name="idGroup">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminGroupmenusProviderBase.Find(QUANLYQN.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.AdminGroupmenus objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminGroupmenusProviderBase.Find(QUANLYQN.Data.TransactionManager,QUANLYQN.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:QUANLYQN.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of QUANLYQN.Entities.AdminGroupmenus objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminGroupmenusProviderBase.GetAll(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.AdminGroupmenus objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminGroupmenusProviderBase.GetPaged(QUANLYQN.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.AdminGroupmenus objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminGroupmenusProviderBase.GetByIdGroup(QUANLYQN.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ADMIN_GROUPMENUS_ADMIN_GROUPS key.
            	FK_ADMIN_GROUPMENUS_ADMIN_GROUPS Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idGroup"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.AdminGroupmenus objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminGroupmenusProviderBase.GetByIdMenu(QUANLYQN.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ADMIN_GROUPMENUS_ADMIN_MENUS key.
            	FK_ADMIN_GROUPMENUS_ADMIN_MENUS Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idMenu"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.AdminGroupmenus objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminGroupmenusProviderBase.GetByIdMenuIdGroup(QUANLYQN.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ADMIN_GROUPMENUS index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idMenu"></param>
            <param name="idGroup"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.AdminGroupmenus"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminGroupmenusProviderBase.BulkInsert(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.TList{QUANLYQN.Entities.AdminGroupmenus})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the QUANLYQN.Entities.AdminGroupmenus object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminGroupmenusProviderBase.Insert(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.AdminGroupmenus)">
            <summary>
            	Inserts a QUANLYQN.Entities.AdminGroupmenus object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">QUANLYQN.Entities.AdminGroupmenus object to insert.</param>
            <remarks>
            	After inserting into the datasource, the QUANLYQN.Entities.AdminGroupmenus object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminGroupmenusProviderBase.Update(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.AdminGroupmenus)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">QUANLYQN.Entities.AdminGroupmenus object to update.</param>
            <remarks>
            	After updating the datasource, the QUANLYQN.Entities.AdminGroupmenus object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlAdminGroupmenusProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlAdminGroupmenusProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlAdminGroupmenusProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminGroupmenusProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlAdminGroupmenusProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:QUANLYQN.Data.SqlClient.SqlLskyluatProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:QUANLYQN.Entities.Lskyluat"/> entity.
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.SqlClient.SqlLskyluatProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:QUANLYQN.Entities.Lskyluat"/> entity.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLskyluatProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlLskyluatProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLskyluatProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlLskyluatProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLskyluatProviderBase.Delete(QUANLYQN.Data.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idLichsukyluat">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLskyluatProviderBase.Find(QUANLYQN.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lskyluat objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLskyluatProviderBase.Find(QUANLYQN.Data.TransactionManager,QUANLYQN.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:QUANLYQN.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lskyluat objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLskyluatProviderBase.GetAll(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lskyluat objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLskyluatProviderBase.GetPaged(QUANLYQN.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lskyluat objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLskyluatProviderBase.GetByIdQuannhan(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_LSKYLUAT_QUANNHAN1 key.
            	FK_LSKYLUAT_QUANNHAN1 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idQuannhan"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lskyluat objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLskyluatProviderBase.GetByIdHinhthucKyluat(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_LSKYLUAT_DMHINHTHUCKYLUAT1 key.
            	FK_LSKYLUAT_DMHINHTHUCKYLUAT1 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idHinhthucKyluat"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lskyluat objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLskyluatProviderBase.GetByIdLichsukyluat(QUANLYQN.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_LSKYLUAT index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idLichsukyluat"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Lskyluat"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLskyluatProviderBase.BulkInsert(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.TList{QUANLYQN.Entities.Lskyluat})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the QUANLYQN.Entities.Lskyluat object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLskyluatProviderBase.Insert(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Lskyluat)">
            <summary>
            	Inserts a QUANLYQN.Entities.Lskyluat object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">QUANLYQN.Entities.Lskyluat object to insert.</param>
            <remarks>
            	After inserting into the datasource, the QUANLYQN.Entities.Lskyluat object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLskyluatProviderBase.Update(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Lskyluat)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">QUANLYQN.Entities.Lskyluat object to update.</param>
            <remarks>
            	After updating the datasource, the QUANLYQN.Entities.Lskyluat object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlLskyluatProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlLskyluatProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlLskyluatProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLskyluatProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlLskyluatProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:QUANLYQN.Data.SqlClient.SqlAdminMenusProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:QUANLYQN.Entities.AdminMenus"/> entity.
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.SqlClient.SqlAdminMenusProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:QUANLYQN.Entities.AdminMenus"/> entity.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminMenusProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlAdminMenusProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminMenusProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlAdminMenusProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminMenusProviderBase.GetByIdGroupFromAdminGroupmenus(QUANLYQN.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets AdminMenus objects from the datasource by ID_GROUP in the
            	ADMIN_GROUPMENUS table. Table ADMIN_MENUS is related to table ADMIN_GROUPS
            	through the (M:N) relationship defined in the ADMIN_GROUPMENUS table.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idGroup"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns a <c>TList</c> of AdminMenus objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminMenusProviderBase.Delete(QUANLYQN.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idMenu">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminMenusProviderBase.Find(QUANLYQN.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.AdminMenus objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminMenusProviderBase.Find(QUANLYQN.Data.TransactionManager,QUANLYQN.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:QUANLYQN.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of QUANLYQN.Entities.AdminMenus objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminMenusProviderBase.GetAll(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.AdminMenus objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminMenusProviderBase.GetPaged(QUANLYQN.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.AdminMenus objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminMenusProviderBase.GetByIdMenu(QUANLYQN.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ADMIN_MENUS index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idMenu"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.AdminMenus"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminMenusProviderBase.BulkInsert(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.TList{QUANLYQN.Entities.AdminMenus})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the QUANLYQN.Entities.AdminMenus object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminMenusProviderBase.Insert(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.AdminMenus)">
            <summary>
            	Inserts a QUANLYQN.Entities.AdminMenus object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">QUANLYQN.Entities.AdminMenus object to insert.</param>
            <remarks>
            	After inserting into the datasource, the QUANLYQN.Entities.AdminMenus object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminMenusProviderBase.Update(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.AdminMenus)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">QUANLYQN.Entities.AdminMenus object to update.</param>
            <remarks>
            	After updating the datasource, the QUANLYQN.Entities.AdminMenus object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlAdminMenusProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlAdminMenusProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlAdminMenusProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminMenusProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlAdminMenusProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:QUANLYQN.Data.SqlClient.SqlLscapbacProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:QUANLYQN.Entities.Lscapbac"/> entity.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLscapbacProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlLscapbacProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLscapbacProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlLscapbacProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLscapbacProviderBase.Delete(QUANLYQN.Data.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idLichsucapbac">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLscapbacProviderBase.Find(QUANLYQN.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lscapbac objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLscapbacProviderBase.Find(QUANLYQN.Data.TransactionManager,QUANLYQN.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:QUANLYQN.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lscapbac objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLscapbacProviderBase.GetAll(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lscapbac objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLscapbacProviderBase.GetPaged(QUANLYQN.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lscapbac objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLscapbacProviderBase.GetByIdQuannhan(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_LSCAPBAC_QUANNHAN1 key.
            	FK_LSCAPBAC_QUANNHAN1 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idQuannhan"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lscapbac objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLscapbacProviderBase.GetByIdCapbac(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_LSCAPBAC_DMCAPBAC1 key.
            	FK_LSCAPBAC_DMCAPBAC1 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idCapbac"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lscapbac objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLscapbacProviderBase.GetByIdLichsucapbac(QUANLYQN.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_LSCAPBAC index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idLichsucapbac"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Lscapbac"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLscapbacProviderBase.BulkInsert(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.TList{QUANLYQN.Entities.Lscapbac})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the QUANLYQN.Entities.Lscapbac object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLscapbacProviderBase.Insert(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Lscapbac)">
            <summary>
            	Inserts a QUANLYQN.Entities.Lscapbac object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">QUANLYQN.Entities.Lscapbac object to insert.</param>
            <remarks>
            	After inserting into the datasource, the QUANLYQN.Entities.Lscapbac object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLscapbacProviderBase.Update(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Lscapbac)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">QUANLYQN.Entities.Lscapbac object to update.</param>
            <remarks>
            	After updating the datasource, the QUANLYQN.Entities.Lscapbac object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlLscapbacProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlLscapbacProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlLscapbacProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:QUANLYQN.Data.SqlClient.SqlDmloaiquannhanProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:QUANLYQN.Entities.Dmloaiquannhan"/> entity.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmloaiquannhanProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlDmloaiquannhanProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmloaiquannhanProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlDmloaiquannhanProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmloaiquannhanProviderBase.Delete(QUANLYQN.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idLoaiqn">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmloaiquannhanProviderBase.Find(QUANLYQN.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Dmloaiquannhan objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmloaiquannhanProviderBase.Find(QUANLYQN.Data.TransactionManager,QUANLYQN.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:QUANLYQN.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Dmloaiquannhan objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmloaiquannhanProviderBase.GetAll(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Dmloaiquannhan objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmloaiquannhanProviderBase.GetPaged(QUANLYQN.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Dmloaiquannhan objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmloaiquannhanProviderBase.GetByIdLoaiqn(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_DMLOAIQUANNHAN index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idLoaiqn"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmloaiquannhan"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmloaiquannhanProviderBase.BulkInsert(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.TList{QUANLYQN.Entities.Dmloaiquannhan})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the QUANLYQN.Entities.Dmloaiquannhan object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmloaiquannhanProviderBase.Insert(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Dmloaiquannhan)">
            <summary>
            	Inserts a QUANLYQN.Entities.Dmloaiquannhan object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">QUANLYQN.Entities.Dmloaiquannhan object to insert.</param>
            <remarks>
            	After inserting into the datasource, the QUANLYQN.Entities.Dmloaiquannhan object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmloaiquannhanProviderBase.Update(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Dmloaiquannhan)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">QUANLYQN.Entities.Dmloaiquannhan object to update.</param>
            <remarks>
            	After updating the datasource, the QUANLYQN.Entities.Dmloaiquannhan object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlDmloaiquannhanProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlDmloaiquannhanProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlDmloaiquannhanProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:QUANLYQN.Data.SqlClient.SqlDmhinhthuckhenthuongProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:QUANLYQN.Entities.Dmhinhthuckhenthuong"/> entity.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmhinhthuckhenthuongProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlDmhinhthuckhenthuongProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmhinhthuckhenthuongProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlDmhinhthuckhenthuongProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmhinhthuckhenthuongProviderBase.Delete(QUANLYQN.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idHinhthucKhenthuong">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmhinhthuckhenthuongProviderBase.Find(QUANLYQN.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Dmhinhthuckhenthuong objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmhinhthuckhenthuongProviderBase.Find(QUANLYQN.Data.TransactionManager,QUANLYQN.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:QUANLYQN.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Dmhinhthuckhenthuong objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmhinhthuckhenthuongProviderBase.GetAll(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Dmhinhthuckhenthuong objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmhinhthuckhenthuongProviderBase.GetPaged(QUANLYQN.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Dmhinhthuckhenthuong objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmhinhthuckhenthuongProviderBase.GetByIdHinhthucKhenthuong(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_DMHINHTHUCKHENTHUONG index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idHinhthucKhenthuong"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmhinhthuckhenthuong"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmhinhthuckhenthuongProviderBase.BulkInsert(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.TList{QUANLYQN.Entities.Dmhinhthuckhenthuong})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the QUANLYQN.Entities.Dmhinhthuckhenthuong object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmhinhthuckhenthuongProviderBase.Insert(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Dmhinhthuckhenthuong)">
            <summary>
            	Inserts a QUANLYQN.Entities.Dmhinhthuckhenthuong object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">QUANLYQN.Entities.Dmhinhthuckhenthuong object to insert.</param>
            <remarks>
            	After inserting into the datasource, the QUANLYQN.Entities.Dmhinhthuckhenthuong object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmhinhthuckhenthuongProviderBase.Update(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Dmhinhthuckhenthuong)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">QUANLYQN.Entities.Dmhinhthuckhenthuong object to update.</param>
            <remarks>
            	After updating the datasource, the QUANLYQN.Entities.Dmhinhthuckhenthuong object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlDmhinhthuckhenthuongProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlDmhinhthuckhenthuongProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlDmhinhthuckhenthuongProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:QUANLYQN.Data.SqlClient.SqlDmdonviProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:QUANLYQN.Entities.Dmdonvi"/> entity.
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.SqlClient.SqlDmdonviProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:QUANLYQN.Entities.Dmdonvi"/> entity.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmdonviProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlDmdonviProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmdonviProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlDmdonviProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmdonviProviderBase.Delete(QUANLYQN.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idDonvi">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmdonviProviderBase.Find(QUANLYQN.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Dmdonvi objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmdonviProviderBase.Find(QUANLYQN.Data.TransactionManager,QUANLYQN.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:QUANLYQN.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Dmdonvi objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmdonviProviderBase.GetAll(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Dmdonvi objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmdonviProviderBase.GetPaged(QUANLYQN.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Dmdonvi objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmdonviProviderBase.GetByIdDonvi(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_DMDONVI index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idDonvi"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmdonvi"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmdonviProviderBase.BulkInsert(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.TList{QUANLYQN.Entities.Dmdonvi})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the QUANLYQN.Entities.Dmdonvi object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmdonviProviderBase.Insert(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Dmdonvi)">
            <summary>
            	Inserts a QUANLYQN.Entities.Dmdonvi object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">QUANLYQN.Entities.Dmdonvi object to insert.</param>
            <remarks>
            	After inserting into the datasource, the QUANLYQN.Entities.Dmdonvi object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmdonviProviderBase.Update(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Dmdonvi)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">QUANLYQN.Entities.Dmdonvi object to update.</param>
            <remarks>
            	After updating the datasource, the QUANLYQN.Entities.Dmdonvi object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlDmdonviProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlDmdonviProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlDmdonviProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmdonviProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlDmdonviProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:QUANLYQN.Data.SqlClient.SqlAdminUsersProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:QUANLYQN.Entities.AdminUsers"/> entity.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminUsersProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlAdminUsersProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminUsersProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlAdminUsersProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminUsersProviderBase.GetByIdGroupFromAdminGroupusers(QUANLYQN.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets AdminUsers objects from the datasource by ID_GROUP in the
            	ADMIN_GROUPUSERS table. Table ADMIN_USERS is related to table ADMIN_GROUPS
            	through the (M:N) relationship defined in the ADMIN_GROUPUSERS table.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idGroup"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns a <c>TList</c> of AdminUsers objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminUsersProviderBase.Delete(QUANLYQN.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idUser">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminUsersProviderBase.Find(QUANLYQN.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.AdminUsers objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminUsersProviderBase.Find(QUANLYQN.Data.TransactionManager,QUANLYQN.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:QUANLYQN.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of QUANLYQN.Entities.AdminUsers objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminUsersProviderBase.GetAll(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.AdminUsers objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminUsersProviderBase.GetPaged(QUANLYQN.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.AdminUsers objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminUsersProviderBase.GetByIdUser(QUANLYQN.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ADMIN_USERS index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idUser"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.AdminUsers"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminUsersProviderBase.BulkInsert(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.TList{QUANLYQN.Entities.AdminUsers})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the QUANLYQN.Entities.AdminUsers object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminUsersProviderBase.Insert(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.AdminUsers)">
            <summary>
            	Inserts a QUANLYQN.Entities.AdminUsers object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">QUANLYQN.Entities.AdminUsers object to insert.</param>
            <remarks>
            	After inserting into the datasource, the QUANLYQN.Entities.AdminUsers object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminUsersProviderBase.Update(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.AdminUsers)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">QUANLYQN.Entities.AdminUsers object to update.</param>
            <remarks>
            	After updating the datasource, the QUANLYQN.Entities.AdminUsers object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlAdminUsersProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlAdminUsersProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlAdminUsersProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:QUANLYQN.Data.SqlClient.SqlAdminGroupsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:QUANLYQN.Entities.AdminGroups"/> entity.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminGroupsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlAdminGroupsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminGroupsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlAdminGroupsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminGroupsProviderBase.GetByIdUserFromAdminGroupusers(QUANLYQN.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets AdminGroups objects from the datasource by ID_USER in the
            	ADMIN_GROUPUSERS table. Table ADMIN_GROUPS is related to table ADMIN_USERS
            	through the (M:N) relationship defined in the ADMIN_GROUPUSERS table.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idUser"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns a <c>TList</c> of AdminGroups objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminGroupsProviderBase.GetByIdMenuFromAdminGroupmenus(QUANLYQN.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets AdminGroups objects from the datasource by ID_MENU in the
            	ADMIN_GROUPMENUS table. Table ADMIN_GROUPS is related to table ADMIN_MENUS
            	through the (M:N) relationship defined in the ADMIN_GROUPMENUS table.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idMenu"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns a <c>TList</c> of AdminGroups objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminGroupsProviderBase.Delete(QUANLYQN.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idGroup">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminGroupsProviderBase.Find(QUANLYQN.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.AdminGroups objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminGroupsProviderBase.Find(QUANLYQN.Data.TransactionManager,QUANLYQN.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:QUANLYQN.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of QUANLYQN.Entities.AdminGroups objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminGroupsProviderBase.GetAll(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.AdminGroups objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminGroupsProviderBase.GetPaged(QUANLYQN.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.AdminGroups objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminGroupsProviderBase.GetByIdGroup(QUANLYQN.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ADMIN_GROUPS index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idGroup"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.AdminGroups"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminGroupsProviderBase.BulkInsert(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.TList{QUANLYQN.Entities.AdminGroups})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the QUANLYQN.Entities.AdminGroups object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminGroupsProviderBase.Insert(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.AdminGroups)">
            <summary>
            	Inserts a QUANLYQN.Entities.AdminGroups object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">QUANLYQN.Entities.AdminGroups object to insert.</param>
            <remarks>
            	After inserting into the datasource, the QUANLYQN.Entities.AdminGroups object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminGroupsProviderBase.Update(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.AdminGroups)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">QUANLYQN.Entities.AdminGroups object to update.</param>
            <remarks>
            	After updating the datasource, the QUANLYQN.Entities.AdminGroups object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlAdminGroupsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlAdminGroupsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlAdminGroupsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:QUANLYQN.Data.SqlClient.SqlDmlopProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:QUANLYQN.Entities.Dmlop"/> entity.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmlopProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlDmlopProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmlopProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlDmlopProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmlopProviderBase.Delete(QUANLYQN.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idLop">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmlopProviderBase.Find(QUANLYQN.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Dmlop objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmlopProviderBase.Find(QUANLYQN.Data.TransactionManager,QUANLYQN.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:QUANLYQN.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Dmlop objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmlopProviderBase.GetAll(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Dmlop objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmlopProviderBase.GetPaged(QUANLYQN.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Dmlop objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmlopProviderBase.GetByIdDaidoi(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_DMLOP_DMDONVI key.
            	FK_DMLOP_DMDONVI Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idDaidoi"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Dmlop objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmlopProviderBase.GetByIdLop(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_DMLOP index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idLop"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmlop"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmlopProviderBase.BulkInsert(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.TList{QUANLYQN.Entities.Dmlop})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the QUANLYQN.Entities.Dmlop object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmlopProviderBase.Insert(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Dmlop)">
            <summary>
            	Inserts a QUANLYQN.Entities.Dmlop object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">QUANLYQN.Entities.Dmlop object to insert.</param>
            <remarks>
            	After inserting into the datasource, the QUANLYQN.Entities.Dmlop object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmlopProviderBase.Update(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Dmlop)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">QUANLYQN.Entities.Dmlop object to update.</param>
            <remarks>
            	After updating the datasource, the QUANLYQN.Entities.Dmlop object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlDmlopProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlDmlopProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlDmlopProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:QUANLYQN.Data.SqlClient.SqlQuannhanProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:QUANLYQN.Entities.Quannhan"/> entity.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlQuannhanProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlQuannhanProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlQuannhanProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlQuannhanProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlQuannhanProviderBase.Delete(QUANLYQN.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idQuannhan">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlQuannhanProviderBase.Find(QUANLYQN.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlQuannhanProviderBase.Find(QUANLYQN.Data.TransactionManager,QUANLYQN.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:QUANLYQN.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlQuannhanProviderBase.GetAll(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlQuannhanProviderBase.GetPaged(QUANLYQN.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlQuannhanProviderBase.GetByIdGioitinh(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_QUANNHAN_DMGIOITINH key.
            	FK_QUANNHAN_DMGIOITINH Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idGioitinh"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlQuannhanProviderBase.GetByIdLoaiquannhan(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_QUANNHAN_DMLOAIQUANNHAN key.
            	FK_QUANNHAN_DMLOAIQUANNHAN Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idLoaiquannhan"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlQuannhanProviderBase.GetByIdDantoc(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_QUANNHAN_DMDANTOC key.
            	FK_QUANNHAN_DMDANTOC Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idDantoc"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlQuannhanProviderBase.GetByIdTongiao(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_QUANNHAN_DMTONGIAO key.
            	FK_QUANNHAN_DMTONGIAO Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idTongiao"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlQuannhanProviderBase.GetByIdDonvi(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_QUANNHAN_DMDONVI key.
            	FK_QUANNHAN_DMDONVI Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idDonvi"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlQuannhanProviderBase.GetByIdCapbac(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_QUANNHAN_DMCAPBAC key.
            	FK_QUANNHAN_DMCAPBAC Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idCapbac"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlQuannhanProviderBase.GetByIdChucvu(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_QUANNHAN_DMCHUCVU key.
            	FK_QUANNHAN_DMCHUCVU Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idChucvu"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlQuannhanProviderBase.GetByIdLop(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_QUANNHAN_DMLOP key.
            	FK_QUANNHAN_DMLOP Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idLop"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlQuannhanProviderBase.GetByIdQuannhan(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_QUANNHAN index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idQuannhan"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Quannhan"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlQuannhanProviderBase.BulkInsert(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.TList{QUANLYQN.Entities.Quannhan})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the QUANLYQN.Entities.Quannhan object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlQuannhanProviderBase.Insert(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Quannhan)">
            <summary>
            	Inserts a QUANLYQN.Entities.Quannhan object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">QUANLYQN.Entities.Quannhan object to insert.</param>
            <remarks>
            	After inserting into the datasource, the QUANLYQN.Entities.Quannhan object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlQuannhanProviderBase.Update(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Quannhan)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">QUANLYQN.Entities.Quannhan object to update.</param>
            <remarks>
            	After updating the datasource, the QUANLYQN.Entities.Quannhan object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlQuannhanProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlQuannhanProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlQuannhanProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:QUANLYQN.Data.SqlClient.SqlDmlopProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:QUANLYQN.Entities.Dmlop"/> entity.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmlopProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlDmlopProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:QUANLYQN.Data.SqlClient.SqlDmcapbacProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:QUANLYQN.Entities.Dmcapbac"/> entity.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmcapbacProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlDmcapbacProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmcapbacProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlDmcapbacProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmcapbacProviderBase.Delete(QUANLYQN.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idCapbac">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmcapbacProviderBase.Find(QUANLYQN.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Dmcapbac objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmcapbacProviderBase.Find(QUANLYQN.Data.TransactionManager,QUANLYQN.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:QUANLYQN.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Dmcapbac objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmcapbacProviderBase.GetAll(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Dmcapbac objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmcapbacProviderBase.GetPaged(QUANLYQN.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Dmcapbac objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmcapbacProviderBase.GetByIdCapbac(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_DMCAPBAC index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idCapbac"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmcapbac"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmcapbacProviderBase.BulkInsert(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.TList{QUANLYQN.Entities.Dmcapbac})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the QUANLYQN.Entities.Dmcapbac object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmcapbacProviderBase.Insert(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Dmcapbac)">
            <summary>
            	Inserts a QUANLYQN.Entities.Dmcapbac object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">QUANLYQN.Entities.Dmcapbac object to insert.</param>
            <remarks>
            	After inserting into the datasource, the QUANLYQN.Entities.Dmcapbac object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmcapbacProviderBase.Update(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Dmcapbac)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">QUANLYQN.Entities.Dmcapbac object to update.</param>
            <remarks>
            	After updating the datasource, the QUANLYQN.Entities.Dmcapbac object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlDmcapbacProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlDmcapbacProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlDmcapbacProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:QUANLYQN.Data.SqlClient.SqlDmhinhthuckhenthuongProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:QUANLYQN.Entities.Dmhinhthuckhenthuong"/> entity.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmhinhthuckhenthuongProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlDmhinhthuckhenthuongProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:QUANLYQN.Data.SqlClient.SqlLschucvuProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:QUANLYQN.Entities.Lschucvu"/> entity.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLschucvuProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlLschucvuProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLschucvuProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlLschucvuProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLschucvuProviderBase.Delete(QUANLYQN.Data.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idLichsuchucvu">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLschucvuProviderBase.Find(QUANLYQN.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lschucvu objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLschucvuProviderBase.Find(QUANLYQN.Data.TransactionManager,QUANLYQN.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:QUANLYQN.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lschucvu objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLschucvuProviderBase.GetAll(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lschucvu objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLschucvuProviderBase.GetPaged(QUANLYQN.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lschucvu objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLschucvuProviderBase.GetByIdChucvu(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_LSCHUCVU_DMCHUCVU1 key.
            	FK_LSCHUCVU_DMCHUCVU1 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idChucvu"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lschucvu objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLschucvuProviderBase.GetByIdQuannhan(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_LSCHUCVU_QUANNHAN1 key.
            	FK_LSCHUCVU_QUANNHAN1 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idQuannhan"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lschucvu objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLschucvuProviderBase.GetByIdLichsuchucvu(QUANLYQN.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_LSCHUCVU_1 index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idLichsuchucvu"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Lschucvu"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLschucvuProviderBase.BulkInsert(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.TList{QUANLYQN.Entities.Lschucvu})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the QUANLYQN.Entities.Lschucvu object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLschucvuProviderBase.Insert(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Lschucvu)">
            <summary>
            	Inserts a QUANLYQN.Entities.Lschucvu object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">QUANLYQN.Entities.Lschucvu object to insert.</param>
            <remarks>
            	After inserting into the datasource, the QUANLYQN.Entities.Lschucvu object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLschucvuProviderBase.Update(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Lschucvu)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">QUANLYQN.Entities.Lschucvu object to update.</param>
            <remarks>
            	After updating the datasource, the QUANLYQN.Entities.Lschucvu object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlLschucvuProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlLschucvuProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlLschucvuProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:QUANLYQN.Data.SqlClient.SqlAdminGroupusersProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:QUANLYQN.Entities.AdminGroupusers"/> entity.
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.SqlClient.SqlAdminGroupusersProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:QUANLYQN.Entities.AdminGroupusers"/> entity.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminGroupusersProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlAdminGroupusersProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminGroupusersProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlAdminGroupusersProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminGroupusersProviderBase.Delete(QUANLYQN.Data.TransactionManager,System.String,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idGroup">. Primary Key.</param>	
            <param name="idUser">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminGroupusersProviderBase.Find(QUANLYQN.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.AdminGroupusers objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminGroupusersProviderBase.Find(QUANLYQN.Data.TransactionManager,QUANLYQN.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:QUANLYQN.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of QUANLYQN.Entities.AdminGroupusers objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminGroupusersProviderBase.GetAll(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.AdminGroupusers objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminGroupusersProviderBase.GetPaged(QUANLYQN.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.AdminGroupusers objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminGroupusersProviderBase.GetByIdGroup(QUANLYQN.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ADMIN_GROUPUSERS_ADMIN_GROUPS key.
            	FK_ADMIN_GROUPUSERS_ADMIN_GROUPS Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idGroup"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.AdminGroupusers objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminGroupusersProviderBase.GetByIdUser(QUANLYQN.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ADMIN_GROUPUSERS_ADMIN_USERS key.
            	FK_ADMIN_GROUPUSERS_ADMIN_USERS Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idUser"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.AdminGroupusers objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminGroupusersProviderBase.GetByIdGroupIdUser(QUANLYQN.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ADMIN_GROUPUSERS index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idGroup"></param>
            <param name="idUser"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.AdminGroupusers"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminGroupusersProviderBase.BulkInsert(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.TList{QUANLYQN.Entities.AdminGroupusers})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the QUANLYQN.Entities.AdminGroupusers object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminGroupusersProviderBase.Insert(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.AdminGroupusers)">
            <summary>
            	Inserts a QUANLYQN.Entities.AdminGroupusers object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">QUANLYQN.Entities.AdminGroupusers object to insert.</param>
            <remarks>
            	After inserting into the datasource, the QUANLYQN.Entities.AdminGroupusers object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminGroupusersProviderBase.Update(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.AdminGroupusers)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">QUANLYQN.Entities.AdminGroupusers object to update.</param>
            <remarks>
            	After updating the datasource, the QUANLYQN.Entities.AdminGroupusers object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlAdminGroupusersProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlAdminGroupusersProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlAdminGroupusersProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminGroupusersProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlAdminGroupusersProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:QUANLYQN.Data.SqlClient.SqlLscapbacProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:QUANLYQN.Entities.Lscapbac"/> entity.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLscapbacProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlLscapbacProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:QUANLYQN.Data.SqlClient.SqlDmtruongProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:QUANLYQN.Entities.Dmtruong"/> entity.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmtruongProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlDmtruongProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmtruongProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlDmtruongProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmtruongProviderBase.Delete(QUANLYQN.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idTruong">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmtruongProviderBase.Find(QUANLYQN.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Dmtruong objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmtruongProviderBase.Find(QUANLYQN.Data.TransactionManager,QUANLYQN.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:QUANLYQN.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Dmtruong objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmtruongProviderBase.GetAll(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Dmtruong objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmtruongProviderBase.GetPaged(QUANLYQN.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Dmtruong objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmtruongProviderBase.GetByIdTruong(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_DMTRUONG index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idTruong"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmtruong"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmtruongProviderBase.BulkInsert(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.TList{QUANLYQN.Entities.Dmtruong})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the QUANLYQN.Entities.Dmtruong object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmtruongProviderBase.Insert(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Dmtruong)">
            <summary>
            	Inserts a QUANLYQN.Entities.Dmtruong object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">QUANLYQN.Entities.Dmtruong object to insert.</param>
            <remarks>
            	After inserting into the datasource, the QUANLYQN.Entities.Dmtruong object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmtruongProviderBase.Update(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Dmtruong)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">QUANLYQN.Entities.Dmtruong object to update.</param>
            <remarks>
            	After updating the datasource, the QUANLYQN.Entities.Dmtruong object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlDmtruongProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlDmtruongProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlDmtruongProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:QUANLYQN.Data.SqlClient.SqlAdminUsersProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:QUANLYQN.Entities.AdminUsers"/> entity.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminUsersProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlAdminUsersProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:QUANLYQN.Data.SqlClient.SqlDmchucvuProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:QUANLYQN.Entities.Dmchucvu"/> entity.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmchucvuProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlDmchucvuProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmchucvuProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlDmchucvuProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmchucvuProviderBase.Delete(QUANLYQN.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idChucvu">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmchucvuProviderBase.Find(QUANLYQN.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Dmchucvu objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmchucvuProviderBase.Find(QUANLYQN.Data.TransactionManager,QUANLYQN.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:QUANLYQN.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Dmchucvu objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmchucvuProviderBase.GetAll(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Dmchucvu objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmchucvuProviderBase.GetPaged(QUANLYQN.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Dmchucvu objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmchucvuProviderBase.GetByIdChucvu(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_DMCHUCVU index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idChucvu"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmchucvu"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmchucvuProviderBase.BulkInsert(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.TList{QUANLYQN.Entities.Dmchucvu})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the QUANLYQN.Entities.Dmchucvu object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmchucvuProviderBase.Insert(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Dmchucvu)">
            <summary>
            	Inserts a QUANLYQN.Entities.Dmchucvu object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">QUANLYQN.Entities.Dmchucvu object to insert.</param>
            <remarks>
            	After inserting into the datasource, the QUANLYQN.Entities.Dmchucvu object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmchucvuProviderBase.Update(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Dmchucvu)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">QUANLYQN.Entities.Dmchucvu object to update.</param>
            <remarks>
            	After updating the datasource, the QUANLYQN.Entities.Dmchucvu object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlDmchucvuProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlDmchucvuProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlDmchucvuProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:QUANLYQN.Data.SqlClient.StoredProcedureProvider">
            <summary>
            Summary description for Procedures.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.StoredProcedureProvider.#ctor">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.StoredProcedureProvider"/> instance.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.StoredProcedureProvider.Serialize(System.String)">
            <summary>
            Serializes the specified filename.
            </summary>
            <param name="filename">Filename.</param>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.StoredProcedureProvider.Deserialize">
            <summary>
            Deserializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.StoredProcedureProvider.GetProcedureBodyFromEmbeddedResource(System.String)">
            <summary>
            Get the query text from the embedded xml file.
            </summary>
            <param name="name">The name of the query.</param>
            <returns>the text of the query</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.StoredProcedureProvider.GetCommandWrapper(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.String,System.Boolean)">
            <summary>
            Get the command wrapper, either from the stored procedures or from the embedded queries.
            </summary>
            <param name="database">The database instance.</param>
            <param name="commandName">the name of the sp.</param>
            <param name="useStoredProcedure">Indicates if we want stored procedure.</param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.StoredProcedureProvider.GetCommandWrapper(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.String,System.Type,QUANLYQN.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the command wrapper for a dynamically generated query and
            optionally includes server-side paging.
            </summary>
            <param name="database"></param>
            <param name="commandName"></param>
            <param name="columnEnum"></param>
            <param name="parameters"></param>
            <param name="orderBy"></param>
            <param name="start"></param>
            <param name="pageLength"></param>
            <returns></returns>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.StoredProcedureProvider.Current">
            <summary>
            Gets the current <see cref="T:QUANLYQN.Data.SqlClient.StoredProcedureProvider"/> singleton instance.
            </summary>
            <value><see cref="T:QUANLYQN.Data.SqlClient.StoredProcedureProvider"/></value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.StoredProcedureProvider.Procedures">
            <summary>
            Gets or sets the procedures.
            </summary>
            <value>An <see cref="T:System.Collections.ArrayList"/> of <see cref="T:QUANLYQN.Data.SqlClient.Procedure"/> objects.</value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.StoredProcedureProvider.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:QUANLYQN.Data.SqlClient.Procedure"/> instance with the specified name.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.StoredProcedureProvider.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:QUANLYQN.Data.SqlClient.Procedure"/> instance at the specified index.
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.SqlClient.Procedure">
            <summary>
            Represents a sql query.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.Procedure.#ctor">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.Procedure"/> instance.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.Procedure.Parameter(System.String)">
            <summary>
            Get the parameter from the specified name of the param.
            </summary>
            <param name="paramName">Name of the param.</param>
            <returns></returns>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.Procedure.Parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
            <value></value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.Procedure.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value></value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.Procedure.Owner">
            <summary>
            Gets or sets the owner.
            </summary>
            <value></value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.Procedure.Comment">
            <summary>
            Gets or sets the comment.
            </summary>
            <value></value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.Procedure.Body">
            <summary>
            Gets or sets the body.
            </summary>
            <value></value>
        </member>
        <member name="T:QUANLYQN.Data.SqlClient.Parameter">
            <summary>
            Respresents a query parameter.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.Parameter.#ctor">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.Parameter"/> instance.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.Parameter.Name">
            <summary>
            Gets or sets the Name.
            </summary>
            <value></value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.Parameter.SqlType">
            <summary>
            Gets or sets the SqlType.
            </summary>
            <value></value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.Parameter.Direction">
            <summary>
            Gets or sets the Direction.
            </summary>
            <value></value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.Parameter.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value></value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.Parameter.Precision">
            <summary>
            Gets or sets the precision.
            </summary>
            <value></value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.Parameter.Scale">
            <summary>
            Gets or sets the scale.
            </summary>
            <value></value>
        </member>
        <member name="T:QUANLYQN.Data.SqlClient.SqlNetTiersProvider">
            <summary>
            This class is the Sql implementation of the NetTiersProvider.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:QUANLYQN.Data.SqlClient.SqlNetTiersProvider"/> class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider.
            </summary>
            <param name="name">The friendly name of the provider.</param>
            <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
            <exception cref="T:System.ArgumentNullException">The name of the provider is null.</exception>
            <exception cref="T:System.InvalidOperationException">An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)"></see> on a provider after the provider has already been initialized.</exception>
            <exception cref="T:System.ArgumentException">The name of the provider has a length of zero.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.CreateTransaction">
            <summary>
            Creates a new <c cref="T:QUANLYQN.Data.TransactionManager"/> instance from the current datasource.
            </summary>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(QUANLYQN.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(QUANLYQN.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(QUANLYQN.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(QUANLYQN.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(QUANLYQN.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(QUANLYQN.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(QUANLYQN.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(QUANLYQN.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(QUANLYQN.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(QUANLYQN.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(QUANLYQN.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(QUANLYQN.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.UseStoredProcedure">
            <summary>
            Gets a value indicating whether to use stored procedure or not.
            </summary>
            <value>
            	<c>true</c> if this repository use stored procedures; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.IsTransactionSupported">
            <summary>
             Indicates if the current <c cref="T:QUANLYQN.Data.Bases.NetTiersProvider"/> implementation supports Transacton.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.DmlopProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:QUANLYQN.Entities.Dmlop"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.SqlDmlopProvider">
            <summary>
            Gets the current <c cref="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.SqlDmlopProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.AdminGroupmenusProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:QUANLYQN.Entities.AdminGroupmenus"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.SqlAdminGroupmenusProvider">
            <summary>
            Gets the current <c cref="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.SqlAdminGroupmenusProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.DmloaiquannhanProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:QUANLYQN.Entities.Dmloaiquannhan"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.SqlDmloaiquannhanProvider">
            <summary>
            Gets the current <c cref="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.SqlDmloaiquannhanProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.DmtongiaoProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:QUANLYQN.Entities.Dmtongiao"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.SqlDmtongiaoProvider">
            <summary>
            Gets the current <c cref="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.SqlDmtongiaoProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.DmhinhthuckyluatProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:QUANLYQN.Entities.Dmhinhthuckyluat"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.SqlDmhinhthuckyluatProvider">
            <summary>
            Gets the current <c cref="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.SqlDmhinhthuckyluatProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.DmtruongProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:QUANLYQN.Entities.Dmtruong"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.SqlDmtruongProvider">
            <summary>
            Gets the current <c cref="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.SqlDmtruongProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.LstruonglopProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:QUANLYQN.Entities.Lstruonglop"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.SqlLstruonglopProvider">
            <summary>
            Gets the current <c cref="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.SqlLstruonglopProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.LscapbacProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:QUANLYQN.Entities.Lscapbac"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.SqlLscapbacProvider">
            <summary>
            Gets the current <c cref="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.SqlLscapbacProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.LskyluatProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:QUANLYQN.Entities.Lskyluat"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.SqlLskyluatProvider">
            <summary>
            Gets the current <c cref="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.SqlLskyluatProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.DmhinhthuckhenthuongProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:QUANLYQN.Entities.Dmhinhthuckhenthuong"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.SqlDmhinhthuckhenthuongProvider">
            <summary>
            Gets the current <c cref="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.SqlDmhinhthuckhenthuongProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.LschucvuProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:QUANLYQN.Entities.Lschucvu"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.SqlLschucvuProvider">
            <summary>
            Gets the current <c cref="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.SqlLschucvuProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.AdminUsersProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:QUANLYQN.Entities.AdminUsers"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.SqlAdminUsersProvider">
            <summary>
            Gets the current <c cref="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.SqlAdminUsersProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.AdminGroupsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:QUANLYQN.Entities.AdminGroups"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.SqlAdminGroupsProvider">
            <summary>
            Gets the current <c cref="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.SqlAdminGroupsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.AdminMenusProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:QUANLYQN.Entities.AdminMenus"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.SqlAdminMenusProvider">
            <summary>
            Gets the current <c cref="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.SqlAdminMenusProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.DmgioitinhProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:QUANLYQN.Entities.Dmgioitinh"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.SqlDmgioitinhProvider">
            <summary>
            Gets the current <c cref="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.SqlDmgioitinhProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.AdminGroupusersProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:QUANLYQN.Entities.AdminGroupusers"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.SqlAdminGroupusersProvider">
            <summary>
            Gets the current <c cref="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.SqlAdminGroupusersProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.DmcaphocProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:QUANLYQN.Entities.Dmcaphoc"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.SqlDmcaphocProvider">
            <summary>
            Gets the current <c cref="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.SqlDmcaphocProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.DmdonviProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:QUANLYQN.Entities.Dmdonvi"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.SqlDmdonviProvider">
            <summary>
            Gets the current <c cref="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.SqlDmdonviProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.DmdantocProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:QUANLYQN.Entities.Dmdantoc"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.SqlDmdantocProvider">
            <summary>
            Gets the current <c cref="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.SqlDmdantocProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.DmchucvuProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:QUANLYQN.Entities.Dmchucvu"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.SqlDmchucvuProvider">
            <summary>
            Gets the current <c cref="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.SqlDmchucvuProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.DmcapbacProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:QUANLYQN.Entities.Dmcapbac"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.SqlDmcapbacProvider">
            <summary>
            Gets the current <c cref="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.SqlDmcapbacProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.QuannhanProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:QUANLYQN.Entities.Quannhan"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.SqlQuannhanProvider">
            <summary>
            Gets the current <c cref="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.SqlQuannhanProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.LskhenthuongProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:QUANLYQN.Entities.Lskhenthuong"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.SqlLskhenthuongProvider">
            <summary>
            Gets the current <c cref="P:QUANLYQN.Data.SqlClient.SqlNetTiersProvider.SqlLskhenthuongProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="T:QUANLYQN.Data.SqlClient.SqlDmtruongProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:QUANLYQN.Entities.Dmtruong"/> entity.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmtruongProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlDmtruongProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:QUANLYQN.Data.SqlClient.SqlDmcaphocProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:QUANLYQN.Entities.Dmcaphoc"/> entity.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmcaphocProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlDmcaphocProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmcaphocProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlDmcaphocProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmcaphocProviderBase.Delete(QUANLYQN.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idCaphoc">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmcaphocProviderBase.Find(QUANLYQN.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Dmcaphoc objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmcaphocProviderBase.Find(QUANLYQN.Data.TransactionManager,QUANLYQN.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:QUANLYQN.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Dmcaphoc objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmcaphocProviderBase.GetAll(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Dmcaphoc objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmcaphocProviderBase.GetPaged(QUANLYQN.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Dmcaphoc objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmcaphocProviderBase.GetByIdCaphoc(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_DMCAPHOC index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idCaphoc"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmcaphoc"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmcaphocProviderBase.BulkInsert(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.TList{QUANLYQN.Entities.Dmcaphoc})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the QUANLYQN.Entities.Dmcaphoc object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmcaphocProviderBase.Insert(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Dmcaphoc)">
            <summary>
            	Inserts a QUANLYQN.Entities.Dmcaphoc object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">QUANLYQN.Entities.Dmcaphoc object to insert.</param>
            <remarks>
            	After inserting into the datasource, the QUANLYQN.Entities.Dmcaphoc object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmcaphocProviderBase.Update(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Dmcaphoc)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">QUANLYQN.Entities.Dmcaphoc object to update.</param>
            <remarks>
            	After updating the datasource, the QUANLYQN.Entities.Dmcaphoc object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlDmcaphocProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlDmcaphocProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlDmcaphocProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:QUANLYQN.Data.SqlClient.SqlAdminGroupsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:QUANLYQN.Entities.AdminGroups"/> entity.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlAdminGroupsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlAdminGroupsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:QUANLYQN.Data.SqlClient.SqlDmcaphocProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:QUANLYQN.Entities.Dmcaphoc"/> entity.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmcaphocProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlDmcaphocProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:QUANLYQN.Data.SqlClient.SqlQuannhanProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:QUANLYQN.Entities.Quannhan"/> entity.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlQuannhanProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlQuannhanProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:QUANLYQN.Data.SqlClient.SqlLschucvuProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:QUANLYQN.Entities.Lschucvu"/> entity.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLschucvuProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlLschucvuProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:QUANLYQN.Data.SqlClient.SqlDmtongiaoProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:QUANLYQN.Entities.Dmtongiao"/> entity.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmtongiaoProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlDmtongiaoProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:QUANLYQN.Data.SqlClient.SqlDmhinhthuckyluatProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:QUANLYQN.Entities.Dmhinhthuckyluat"/> entity.
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.SqlClient.SqlDmhinhthuckyluatProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:QUANLYQN.Entities.Dmhinhthuckyluat"/> entity.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmhinhthuckyluatProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlDmhinhthuckyluatProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmhinhthuckyluatProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlDmhinhthuckyluatProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmhinhthuckyluatProviderBase.Delete(QUANLYQN.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idHinhthucKyluat">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmhinhthuckyluatProviderBase.Find(QUANLYQN.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Dmhinhthuckyluat objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmhinhthuckyluatProviderBase.Find(QUANLYQN.Data.TransactionManager,QUANLYQN.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:QUANLYQN.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Dmhinhthuckyluat objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmhinhthuckyluatProviderBase.GetAll(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Dmhinhthuckyluat objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmhinhthuckyluatProviderBase.GetPaged(QUANLYQN.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Dmhinhthuckyluat objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmhinhthuckyluatProviderBase.GetByIdHinhthucKyluat(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_DMHINHTHUCKYLUAT index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idHinhthucKyluat"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmhinhthuckyluat"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmhinhthuckyluatProviderBase.BulkInsert(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.TList{QUANLYQN.Entities.Dmhinhthuckyluat})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the QUANLYQN.Entities.Dmhinhthuckyluat object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmhinhthuckyluatProviderBase.Insert(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Dmhinhthuckyluat)">
            <summary>
            	Inserts a QUANLYQN.Entities.Dmhinhthuckyluat object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">QUANLYQN.Entities.Dmhinhthuckyluat object to insert.</param>
            <remarks>
            	After inserting into the datasource, the QUANLYQN.Entities.Dmhinhthuckyluat object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmhinhthuckyluatProviderBase.Update(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Dmhinhthuckyluat)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">QUANLYQN.Entities.Dmhinhthuckyluat object to update.</param>
            <remarks>
            	After updating the datasource, the QUANLYQN.Entities.Dmhinhthuckyluat object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlDmhinhthuckyluatProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlDmhinhthuckyluatProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlDmhinhthuckyluatProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmhinhthuckyluatProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlDmhinhthuckyluatProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:QUANLYQN.Data.SqlClient.SqlDmcapbacProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:QUANLYQN.Entities.Dmcapbac"/> entity.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmcapbacProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlDmcapbacProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:QUANLYQN.Data.SqlClient.SqlDmdantocProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:QUANLYQN.Entities.Dmdantoc"/> entity.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmdantocProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlDmdantocProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmdantocProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlDmdantocProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmdantocProviderBase.Delete(QUANLYQN.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idDantoc">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmdantocProviderBase.Find(QUANLYQN.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Dmdantoc objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmdantocProviderBase.Find(QUANLYQN.Data.TransactionManager,QUANLYQN.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:QUANLYQN.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Dmdantoc objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmdantocProviderBase.GetAll(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Dmdantoc objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmdantocProviderBase.GetPaged(QUANLYQN.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Dmdantoc objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmdantocProviderBase.GetByIdDantoc(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_DMDANTOC index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idDantoc"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmdantoc"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmdantocProviderBase.BulkInsert(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.TList{QUANLYQN.Entities.Dmdantoc})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the QUANLYQN.Entities.Dmdantoc object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmdantocProviderBase.Insert(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Dmdantoc)">
            <summary>
            	Inserts a QUANLYQN.Entities.Dmdantoc object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">QUANLYQN.Entities.Dmdantoc object to insert.</param>
            <remarks>
            	After inserting into the datasource, the QUANLYQN.Entities.Dmdantoc object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmdantocProviderBase.Update(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Dmdantoc)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">QUANLYQN.Entities.Dmdantoc object to update.</param>
            <remarks>
            	After updating the datasource, the QUANLYQN.Entities.Dmdantoc object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlDmdantocProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlDmdantocProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlDmdantocProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:QUANLYQN.Data.SqlClient.SqlLstruonglopProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:QUANLYQN.Entities.Lstruonglop"/> entity.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLstruonglopProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlLstruonglopProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLstruonglopProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlLstruonglopProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLstruonglopProviderBase.Delete(QUANLYQN.Data.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idLichsutruonglop">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLstruonglopProviderBase.Find(QUANLYQN.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lstruonglop objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLstruonglopProviderBase.Find(QUANLYQN.Data.TransactionManager,QUANLYQN.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:QUANLYQN.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lstruonglop objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLstruonglopProviderBase.GetAll(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lstruonglop objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLstruonglopProviderBase.GetPaged(QUANLYQN.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lstruonglop objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLstruonglopProviderBase.GetByIdTruong(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_LSTRUONGLOP_DMTRUONG1 key.
            	FK_LSTRUONGLOP_DMTRUONG1 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idTruong"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lstruonglop objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLstruonglopProviderBase.GetByIdCaphoc(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_LSTRUONGLOP_DMCAPHOC1 key.
            	FK_LSTRUONGLOP_DMCAPHOC1 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idCaphoc"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lstruonglop objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLstruonglopProviderBase.GetByIdQuannhan(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_LSTRUONGLOP_QUANNHAN1 key.
            	FK_LSTRUONGLOP_QUANNHAN1 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idQuannhan"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lstruonglop objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLstruonglopProviderBase.GetByIdLichsutruonglop(QUANLYQN.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_LSTRUONGLOP index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idLichsutruonglop"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Lstruonglop"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLstruonglopProviderBase.BulkInsert(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.TList{QUANLYQN.Entities.Lstruonglop})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the QUANLYQN.Entities.Lstruonglop object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLstruonglopProviderBase.Insert(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Lstruonglop)">
            <summary>
            	Inserts a QUANLYQN.Entities.Lstruonglop object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">QUANLYQN.Entities.Lstruonglop object to insert.</param>
            <remarks>
            	After inserting into the datasource, the QUANLYQN.Entities.Lstruonglop object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLstruonglopProviderBase.Update(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Lstruonglop)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">QUANLYQN.Entities.Lstruonglop object to update.</param>
            <remarks>
            	After updating the datasource, the QUANLYQN.Entities.Lstruonglop object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlLstruonglopProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlLstruonglopProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlLstruonglopProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:QUANLYQN.Data.SqlClient.SqlDmdantocProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:QUANLYQN.Entities.Dmdantoc"/> entity.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmdantocProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlDmdantocProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:QUANLYQN.Data.SqlClient.SqlDmgioitinhProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:QUANLYQN.Entities.Dmgioitinh"/> entity.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmgioitinhProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlDmgioitinhProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmgioitinhProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlDmgioitinhProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmgioitinhProviderBase.Delete(QUANLYQN.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idGioitinh">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmgioitinhProviderBase.Find(QUANLYQN.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Dmgioitinh objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmgioitinhProviderBase.Find(QUANLYQN.Data.TransactionManager,QUANLYQN.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:QUANLYQN.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Dmgioitinh objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmgioitinhProviderBase.GetAll(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Dmgioitinh objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmgioitinhProviderBase.GetPaged(QUANLYQN.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Dmgioitinh objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmgioitinhProviderBase.GetByIdGioitinh(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_DMGIOITINH index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idGioitinh"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmgioitinh"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmgioitinhProviderBase.BulkInsert(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.TList{QUANLYQN.Entities.Dmgioitinh})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the QUANLYQN.Entities.Dmgioitinh object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmgioitinhProviderBase.Insert(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Dmgioitinh)">
            <summary>
            	Inserts a QUANLYQN.Entities.Dmgioitinh object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">QUANLYQN.Entities.Dmgioitinh object to insert.</param>
            <remarks>
            	After inserting into the datasource, the QUANLYQN.Entities.Dmgioitinh object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmgioitinhProviderBase.Update(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Dmgioitinh)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">QUANLYQN.Entities.Dmgioitinh object to update.</param>
            <remarks>
            	After updating the datasource, the QUANLYQN.Entities.Dmgioitinh object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlDmgioitinhProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlDmgioitinhProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlDmgioitinhProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:QUANLYQN.Data.SqlClient.SqlDmchucvuProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:QUANLYQN.Entities.Dmchucvu"/> entity.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmchucvuProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlDmchucvuProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:QUANLYQN.Data.SqlClient.SqlLstruonglopProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:QUANLYQN.Entities.Lstruonglop"/> entity.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLstruonglopProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlLstruonglopProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:QUANLYQN.Data.SqlClient.SqlLskhenthuongProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:QUANLYQN.Entities.Lskhenthuong"/> entity.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLskhenthuongProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlLskhenthuongProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLskhenthuongProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlLskhenthuongProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLskhenthuongProviderBase.Delete(QUANLYQN.Data.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idLichsukhenthuong">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLskhenthuongProviderBase.Find(QUANLYQN.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereclause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lskhenthuong objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLskhenthuongProviderBase.Find(QUANLYQN.Data.TransactionManager,QUANLYQN.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:QUANLYQN.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lskhenthuong objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLskhenthuongProviderBase.GetAll(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lskhenthuong objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLskhenthuongProviderBase.GetPaged(QUANLYQN.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lskhenthuong objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLskhenthuongProviderBase.GetByIdQuannhan(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_LSKHENTHUONG_QUANNHAN1 key.
            	FK_LSKHENTHUONG_QUANNHAN1 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idQuannhan"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lskhenthuong objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLskhenthuongProviderBase.GetByIdHinhthucKhenthuong(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_LSKHENTHUONG_DMHINHTHUCKHENTHUONG1 key.
            	FK_LSKHENTHUONG_DMHINHTHUCKHENTHUONG1 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idHinhthucKhenthuong"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lskhenthuong objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLskhenthuongProviderBase.GetByIdLichsukhenthuong(QUANLYQN.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_LSKHENTHUONG index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idLichsukhenthuong"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Lskhenthuong"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLskhenthuongProviderBase.BulkInsert(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.TList{QUANLYQN.Entities.Lskhenthuong})">
            <summary>
            Lets you efficiently bulk many entity to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the QUANLYQN.Entities.Lskhenthuong object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLskhenthuongProviderBase.Insert(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Lskhenthuong)">
            <summary>
            	Inserts a QUANLYQN.Entities.Lskhenthuong object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">QUANLYQN.Entities.Lskhenthuong object to insert.</param>
            <remarks>
            	After inserting into the datasource, the QUANLYQN.Entities.Lskhenthuong object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLskhenthuongProviderBase.Update(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Lskhenthuong)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">QUANLYQN.Entities.Lskhenthuong object to update.</param>
            <remarks>
            	After updating the datasource, the QUANLYQN.Entities.Lskhenthuong object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlLskhenthuongProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlLskhenthuongProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:QUANLYQN.Data.SqlClient.SqlLskhenthuongProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:QUANLYQN.Data.SqlClient.SqlLskhenthuongProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:QUANLYQN.Entities.Lskhenthuong"/> entity.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlLskhenthuongProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlLskhenthuongProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:QUANLYQN.Data.SqlClient.SqlDmloaiquannhanProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:QUANLYQN.Entities.Dmloaiquannhan"/> entity.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmloaiquannhanProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlDmloaiquannhanProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:QUANLYQN.Data.SqlClient.SqlDmgioitinhProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:QUANLYQN.Entities.Dmgioitinh"/> entity.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlClient.SqlDmgioitinhProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:QUANLYQN.Data.SqlClient.SqlDmgioitinhProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
    </members>
</doc>
