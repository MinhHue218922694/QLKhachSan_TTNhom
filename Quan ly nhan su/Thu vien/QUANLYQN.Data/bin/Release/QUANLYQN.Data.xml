<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QUANLYQN.Data</name>
    </assembly>
    <members>
        <member name="T:QUANLYQN.Data.Bases.EntityProviderBaseCore`2">
            <summary>
            Serves as the base class for objects that provide data access functionality.
            Provides a default implementation of the IEntityProvider&lt;Entity, EntityKey&gt; interface.
            </summary>
            <typeparam name="Entity">The class of the business object being accessed.</typeparam>
            <typeparam name="EntityKey">The class of the EntityId
            property of the specified business object class.</typeparam>
        </member>
        <member name="T:QUANLYQN.Data.IEntityProvider`2">
            <summary>
            Defines the common data access methods that can be used by the
            ProviderDataSource control to interact with the underlying data store.
            </summary>
            <typeparam name="Entity">The class of the business object being accessed.</typeparam>
            <typeparam name="EntityKey">The class of the EntityId
            property of the specified business object class.</typeparam>
        </member>
        <member name="M:QUANLYQN.Data.IEntityProvider`2.Get(QUANLYQN.Data.TransactionManager,`1)">
            <summary>
            Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="mgr">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.IEntityProvider`2.GetAll(QUANLYQN.Data.TransactionManager)">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.IEntityProvider`2.GetPaged(QUANLYQN.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.IEntityProvider`2.Insert(QUANLYQN.Data.TransactionManager,`0)">
            <summary>
            Inserts a row into the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to insert.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:QUANLYQN.Data.IEntityProvider`2.Update(QUANLYQN.Data.TransactionManager,`0)">
            <summary>
            Updates an existing row in the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to update.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:QUANLYQN.Data.IEntityProvider`2.Delete(QUANLYQN.Data.TransactionManager,`0)">
            <summary>
            Deletes a row from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to delete.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:QUANLYQN.Data.IEntityProvider`2.Save(QUANLYQN.Data.TransactionManager,`0)">
            <summary>
            Saves row changes in the DataSource (insert, update ,delete).
            </summary>
            <param name="mgr">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to save.</param>
        </member>
        <member name="M:QUANLYQN.Data.IEntityProvider`2.DeepSave(QUANLYQN.Data.TransactionManager,`0)">
            <summary>
            Deep Save the Entity object with all of the child property collections only 1 level deep.
            </summary>
            <param name="mgr">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to save.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.Get(`1)">
            <summary>
            Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.Get(QUANLYQN.Data.TransactionManager,`1)">
            <summary>
            Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="mgr">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.Get(`1,System.Int32,System.Int32)">
            <summary>
            Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.Get(QUANLYQN.Data.TransactionManager,`1,System.Int32,System.Int32)">
            <summary>
            Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="mgr">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.GetAll">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.GetAll(QUANLYQN.Data.TransactionManager)">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.GetAll(System.Int32,System.Int32)">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.GetAll(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.GetAll(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.GetPaged(System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.GetPaged(QUANLYQN.Data.TransactionManager,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.GetPaged(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.GetPaged(QUANLYQN.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.GetTotalItems(QUANLYQN.Data.TransactionManager,System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            </summary>
            <param name="mgr">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.Find(System.String)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.Find(QUANLYQN.Data.TransactionManager,System.String)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.Find(System.String,System.Int32,System.Int32)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.Find(QUANLYQN.Data.TransactionManager,System.String,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.Find(QUANLYQN.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.Find(QUANLYQN.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:QUANLYQN.Data.SqlFilterParameter"/> or <see cref="T:QUANLYQN.Data.ParameterizedSqlFilterBuilder`1"/> objects.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.Find(QUANLYQN.Data.TransactionManager,QUANLYQN.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:QUANLYQN.Data.SqlFilterParameter"/> or <see cref="T:QUANLYQN.Data.ParameterizedSqlFilterBuilder`1"/> objects.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.Find(QUANLYQN.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:QUANLYQN.Data.SqlFilterParameter"/> or <see cref="T:QUANLYQN.Data.ParameterizedSqlFilterBuilder`1"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.Find(QUANLYQN.Data.TransactionManager,QUANLYQN.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:QUANLYQN.Data.SqlFilterParameter"/> or <see cref="T:QUANLYQN.Data.ParameterizedSqlFilterBuilder`1"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.Find(QUANLYQN.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:QUANLYQN.Data.SqlFilterParameter"/> or <see cref="T:QUANLYQN.Data.ParameterizedSqlFilterBuilder`1"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.Find(QUANLYQN.Data.TransactionManager,QUANLYQN.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:QUANLYQN.Data.SqlFilterParameter"/> or <see cref="T:QUANLYQN.Data.ParameterizedSqlFilterBuilder`1"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.Insert(`0)">
            <summary>
            Inserts a row into the DataSource.
            </summary>
            <param name="entity">The Entity object to insert.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.Insert(QUANLYQN.Data.TransactionManager,`0)">
            <summary>
            Inserts a row into the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to insert.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.Insert(QUANLYQN.Entities.TList{`0})">
            <summary>
            Inserts rows into the DataSource.
            </summary>
            <param name="entities">TList of Entity objects to insert.</param>
            <returns>Returns the number of rows successfully inserted.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.Insert(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.TList{`0})">
            <summary>
            Inserts rows into the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="entities">TList of Entity objects to insert.</param>
            <returns>Returns the number of rows successfully inserted.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.BulkInsert(QUANLYQN.Entities.TList{`0})">
            <summary>
            Efficiently inserts multiple rows into the DataSource.
            </summary>
            <param name="entities">TList of Entity objects to insert.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.BulkInsert(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.TList{`0})">
            <summary>
            Efficiently inserts multiple rows into the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="entities">TList of Entity objects to insert.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.Update(`0)">
            <summary>
            Updates an existing row in the DataSource.
            </summary>
            <param name="entity">The Entity object to update.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.Update(QUANLYQN.Data.TransactionManager,`0)">
            <summary>
            Updates an existing row in the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to update.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.Update(QUANLYQN.Entities.TList{`0})">
            <summary>
            Updates existing rows in the DataSource.
            </summary>
            <param name="entities">TList of Entity objects to update.</param>
            <returns>Returns the number of rows successfully updated.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.Update(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.TList{`0})">
            <summary>
            Updates existing rows in the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="entities">TList of Entity objects to update.</param>
            <returns>Returns the number of rows successfully updated.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.Save(`0)">
            <summary>
            Saves row changes in the DataSource (insert, update ,delete).
            </summary>
            <param name="entity">The Entity object to save.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.Save(QUANLYQN.Data.TransactionManager,`0)">
            <summary>
            Saves row changes in the DataSource (insert, update ,delete).
            </summary>
            <param name="mgr">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to save.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.Save(QUANLYQN.Entities.TList{`0})">
            <summary>
            Saves row changes in the DataSource (insert, update ,delete).
            </summary>
            <param name="entities">TList of Entity objects to save.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.Save(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.TList{`0})">
            <summary>
            Saves row changes in the DataSource (insert, update ,delete).
            </summary>
            <param name="mgr">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="entities">TList of Entity objects to save.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.Delete(`0)">
            <summary>
            Deletes a row from the DataSource.
            </summary>
            <param name="entity">The Entity object to delete.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.Delete(QUANLYQN.Data.TransactionManager,`0)">
            <summary>
            Deletes a row from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to delete.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.Delete(`1)">
            <summary>
            Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.Delete(QUANLYQN.Data.TransactionManager,`1)">
            <summary>
            Deletes a row from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.Delete(QUANLYQN.Entities.TList{`0})">
            <summary>
            Deletes rows from the DataSource.
            </summary>
            <param name="entities">TList of Entity objects to delete.</param>
            <returns>Returns the number of rows successfully deleted.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.Delete(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.TList{`0})">
            <summary>
            Deletes rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="entities">TList of Entity objects to delete.</param>
            <returns>Returns the number of rows successfully deleted.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.DeepLoad(`0)">
            <summary>
            Deep Load the Entity object with all of the child property collections only 1 level deep.
            </summary>
            <param name="entity">The Entity object to load.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.DeepLoad(QUANLYQN.Data.TransactionManager,`0)">
            <summary>
            Deep Load the Entity object with all of the child property collections only 1 level deep.
            </summary>
            <param name="mgr">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to load.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.DeepLoad(`0,System.Boolean)">
            <summary>
            Deep Load the Entity object with all of the child property collections N levels deep.
            </summary>
            <param name="entity">The Entity object to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.DeepLoad(QUANLYQN.Data.TransactionManager,`0,System.Boolean)">
            <summary>
            Deep Load the Entity object with all of the child property collections N levels deep.
            </summary>
            <param name="mgr">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.DeepLoad(`0,System.Boolean,QUANLYQN.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Load the entire Entity object with criteria based on the child types array and the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entity">The Entity object to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.DeepLoad(QUANLYQN.Data.TransactionManager,`0,System.Boolean,QUANLYQN.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Load the entire Entity object with criteria based on the child types array and the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="mgr">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.DeepLoad(QUANLYQN.Data.TransactionManager,`0,System.Boolean,QUANLYQN.Data.DeepLoadType,System.Type[],QUANLYQN.Data.Bases.DeepSession)">
            <summary>
            Deep Load the entire Entity object with criteria based on the child types array and the DeepLoadType.
            </summary>
            <remarks>
            This method should be implemented by sub-classes to provide specific deep load functionality.
            </remarks>
            <param name="mgr">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
            <param name="innerList">A collection of child types for easy access.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.DeepLoad(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.TList{`0},System.Boolean,QUANLYQN.Data.DeepLoadType,System.Type[],QUANLYQN.Data.Bases.DeepSession)">
            <summary>
            Deep Load the entire Entity object with criteria based on the child types array and the DeepLoadType.
            </summary>
            <remarks>
            This method should be implemented by sub-classes to provide specific deep load functionality.
            </remarks>
            <param name="mgr">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="entities">The Entity List object to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
            <param name="innerList">A collection of child types for easy access.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.DeepLoad(QUANLYQN.Entities.TList{`0})">
            <summary>
            Deep Load the Entity objects with all of the child property collections only 1 level deep.
            </summary>
            <param name="entities">TList of Entity objects to load.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.DeepLoad(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.TList{`0})">
            <summary>
            Deep Load the Entity objects with all of the child property collections only 1 level deep.
            </summary>
            <param name="mgr">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="entities">TList of Entity objects to load.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.DeepLoad(QUANLYQN.Entities.TList{`0},System.Boolean)">
            <summary>
            Deep Load the Entity objects with all of the child property collections N levels deep.
            </summary>
            <param name="entities">TList of Entity objects to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.DeepLoad(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.TList{`0},System.Boolean)">
            <summary>
            Deep Load the Entity objects with all of the child property collections N levels deep.
            </summary>
            <param name="mgr">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="entities">TList of Entity objects to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.DeepLoad(QUANLYQN.Entities.TList{`0},System.Boolean,QUANLYQN.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Load the Entity objects with criteria based on the child types array and the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entities">TList of Entity objects to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.DeepLoad(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.TList{`0},System.Boolean,QUANLYQN.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Load the Entity objects with criteria based on the child types array and the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="mgr">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="entities">TList of Entity objects to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.DeepSave(`0)">
            <summary>
            Deep Save the Entity object with all of the child property collections only 1 level deep.
            </summary>
            <param name="entity">The Entity object to save.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.DeepSave(QUANLYQN.Data.TransactionManager,`0)">
            <summary>
            Deep Save the Entity object with all of the child property collections only 1 level deep.
            </summary>
            <param name="mgr">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to save.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.DeepSave(`0,QUANLYQN.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire Entity object with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="entity">The Entity object to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.DeepSave(QUANLYQN.Data.TransactionManager,`0,QUANLYQN.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire Entity object with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="mgr">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.DeepSave(QUANLYQN.Data.TransactionManager,`0,QUANLYQN.Data.DeepSaveType,System.Type[],QUANLYQN.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire Entity object with criteria based on the child types array and the DeepSaveType.
            </summary>
            <remarks>
            This method should be implemented by sub-classes to provide specific deep save functionality.
            </remarks>
            <param name="mgr">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
            <param name="innerList">A <c>DeepSession</c> of child types for easy access.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.DeepSave(QUANLYQN.Entities.TList{`0})">
            <summary>
            Deep Save the Entity objects with all of the child property collections only 1 level deep.
            </summary>
            <param name="entities">TList of Entity objects to save.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.DeepSave(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.TList{`0})">
            <summary>
            Deep Save the Entity objects with all of the child property collections only 1 level deep.
            </summary>
            <param name="mgr">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="entities">TList of Entity objects to save.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.DeepSave(QUANLYQN.Entities.TList{`0},QUANLYQN.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the Entity objects with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="entities">TList of Entity objects to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.DeepSave(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.TList{`0},QUANLYQN.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the Entity objects with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="mgr">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="entities">TList of Entity objects to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.DeepSave(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.TList{`0},QUANLYQN.Data.DeepSaveType,System.Type[],QUANLYQN.Data.Bases.DeepSession)">
            <summary>
            Deep Save the Entity objects with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="mgr">The transaction manager.</param>
            <param name="entities">TList of Entity objects to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.CanDeepLoad(QUANLYQN.Entities.IEntity,System.String,QUANLYQN.Data.DeepLoadType,QUANLYQN.Data.Bases.DeepSession)">
            <summary>
             Enforces the rules set in order to load this property for a given type.
            </summary>
             <param name="entity">The entity.</param>
             <param name="key">The key.</param>
             <param name="deepLoadType">Type of the deep load.</param>
             <param name="innerList">The inner list.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.CanDeepSave(System.Object,System.String,QUANLYQN.Data.DeepSaveType,QUANLYQN.Data.Bases.DeepSession)">
            <summary>
            Enforces the rules set in order to save this property for a given type.
            </summary>
            <param name="entity">The entity.</param>
            <param name="key">The key.</param>
            <param name="deepSaveType">Type of the deep save.</param>
            <param name="innerList">The inner list.</param>
            <returns>
            	<c>true</c> if this instance [can deep save] the specified entity; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.GetDeepSessionArgs(QUANLYQN.Data.Bases.DeepSession,System.Enum,System.Object,System.String)">
            <summary>
            Gets the DeepSession Arguments for an event.
            </summary>
            <param name="deepSession">the current DeepSession.</param>
            <param name="deepTypeValue"> The Deep Type Value</param>
            <param name="obj">The current entity or list.</param>
            <param name="key">The key.</param>
            <returns>
            	<c>DeepSessionEventArgs</c> if the item being run is a valid entity or list.
            </returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.OnDataRequesting(QUANLYQN.Data.Bases.CommandEventArgs)">
            <summary>
                This is the method that is responsible for notifying
                receivers that the event occurred just before accessing the 
                data provider.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.OnDataRequested(QUANLYQN.Data.Bases.CommandEventArgs)">
            <summary>
                This is the method that is responsible for notifying
                receivers that the event occurred just after accessing the 
                data provider.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.OnDeepLoading(QUANLYQN.Data.Bases.DeepSessionEventArgs)">
            <summary>
                This is the method that is responsible for notifying
                receivers that the event occurred just after accessing the 
                data provider.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.OnDeepSaving(QUANLYQN.Data.Bases.DeepSessionEventArgs)">
            <summary>
                This is the method that is responsible for notifying
                receivers that the event occurred just after accessing the 
                data provider.
            </summary>
        </member>
        <member name="E:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.DataRequesting">
            <summary>
                An event which occurs just before a data 
                request is made in the data provider.
            </summary>
        </member>
        <member name="E:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.DataRequested">
            <summary>
                An event which occurs just before a data 
                request is made in the data provider.
            </summary>
        </member>
        <member name="E:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.DeepLoading">
            <summary>
                An event which occurs just before a data 
                request is made in the data provider.
            </summary>
        </member>
        <member name="E:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.DeepSaving">
            <summary>
                An event which occurs just before a data 
                request is made in the data provider.
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.DataRequestingEventHandler">
            <summary>
                This represents the delegate method prototype that
                event receivers must implement
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.DataRequestedEventHandler">
            <summary>
                This represents the delegate method prototype that
                event receivers must implement 
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.DeepLoadingEventHandler">
            <summary>
                This represents the delegate method prototype that
                event receivers must implement 
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.Bases.EntityProviderBaseCore`2.DeepSavingEventHandler">
            <summary>
                This represents the delegate method prototype that
                event receivers must implement 
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.Bases.DeepSessionEventArgs">
            <summary>
            Event Args used to transfer crucial information just before 
            and after a command is used in the data provider.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DeepSessionEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DeepSessionEventArgs"/> class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DeepSessionEventArgs.#ctor(QUANLYQN.Data.Bases.DeepSession,System.String,System.Enum,QUANLYQN.Entities.IEntity,System.Collections.IList)">
            <summary>
            Initializes a new instance of the <see cref="T:DeepSessionEventArgs"/> class.
            </summary>
            <param name="deepSession">The Current Deep Session.</param>
            <param name="currentTypePropertyKey">The Current Key"</param>
            <param name="deepTypeValue">The current Deep Type Value, DeepSaveType/DeepLoadType </param>
            <param name="entity">The entity.</param>
            <param name="list">The list.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DeepSessionEventArgs.#ctor(QUANLYQN.Data.Bases.DeepSession,System.String,System.Enum,System.Collections.IList)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandEventArgs"/> class.
            </summary>
            <param name="deepSession">The deepSession.</param>
            <param name="currentTypePropertyKey">The Current Key"</param>
            <param name="deepTypeValue">The current Deep Type Value, DeepSaveType/DeepLoadType </param>
            <param name="list">The list.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DeepSessionEventArgs.#ctor(QUANLYQN.Data.Bases.DeepSession,System.String,System.Enum,QUANLYQN.Entities.IEntity)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandEventArgs"/> class.
            </summary>
            <param name="deepSession">The deepSession.</param>
            <param name="currentTypePropertyKey">The Current Key.</param>
            <param name="deepTypeValue">The current Deep Type Value, DeepSaveType/DeepLoadType </param>
            <param name="entity">The current entity.</param>
        </member>
        <member name="P:QUANLYQN.Data.Bases.DeepSessionEventArgs.DeepSession">
            <summary>
            Gets or sets the current DeepSession.
            </summary>
            <value>The DeepSession.</value>
        </member>
        <member name="P:QUANLYQN.Data.Bases.DeepSessionEventArgs.CurrentEntity">
            <summary>
            Gets or sets the current entity which the action is 
            being acted on.  If there is no entity, this 
            value will be null.
            </summary>
            <value>The entity.</value>
        </member>
        <member name="P:QUANLYQN.Data.Bases.DeepSessionEventArgs.CurrentEntityList">
            <summary>
            Gets or sets the current .
            </summary>
            <value>The return value.</value>
        </member>
        <member name="P:QUANLYQN.Data.Bases.DeepSessionEventArgs.CurrentTypePropertyKey">
            <summary>
            Gets or Sets the name of the current type property key that 
            will be used to determine if the property will be run in the deep session.
            </summary>
            <value>A string value of the type property key.</value>
        </member>
        <member name="P:QUANLYQN.Data.Bases.DeepSessionEventArgs.DeepTypeValue">
            <summary>
             The current DeepType Value, Either <c>DeepLoadType</c>, or <c>DeepSaveType</c>.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.Bases.DeepSessionEventArgs.Cancel">
            <summary>
            Gets or sets the Cancel property of the event.
            </summary>
            <value>Current Cancel Value.</value>
        </member>
        <member name="P:QUANLYQN.Data.Bases.DeepSessionEventArgs.Skip">
            <summary>
            Gets or sets the current Skip value.  
            Setting this property will skip the current Deep Property.
            </summary>
            <value>The name of the method.</value>
        </member>
        <member name="T:QUANLYQN.Data.Bases.CommandEventArgs">
            <summary>
            Event Args used to transfer crucial information just before 
            and after a command is used in the data provider.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.CommandEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommandEventArgs"/> class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.CommandEventArgs.#ctor(System.Data.Common.DbCommand,System.String,QUANLYQN.Entities.IEntity,System.Collections.IList)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandEventArgs"/> class.
            </summary>
            <param name="command">The command.</param>
            <param name="methodName">Name of the method.</param>
            <param name="entity">The entity.</param>
            <param name="list">The list.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.CommandEventArgs.#ctor(System.Data.Common.DbCommand,System.String,System.Collections.IList)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandEventArgs"/> class.
            </summary>
            <param name="command">The command.</param>
            <param name="methodName">Name of the method.</param>
            <param name="list">The list.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.CommandEventArgs.#ctor(System.Data.Common.DbCommand,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandEventArgs"/> class.
            </summary>
            <param name="command">The command.</param>
            <param name="methodName">Name of the method.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.CommandEventArgs.#ctor(System.Data.Common.DbCommand,System.String,QUANLYQN.Entities.IEntity)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandEventArgs"/> class.
            </summary>
            <param name="command">The command.</param>
            <param name="methodName">Name of the method.</param>
            <param name="entity">The current entity.</param>
        </member>
        <member name="P:QUANLYQN.Data.Bases.CommandEventArgs.Command">
            <summary>
            Gets or sets the current command.
            </summary>
            <value>The command.</value>
        </member>
        <member name="P:QUANLYQN.Data.Bases.CommandEventArgs.MethodName">
            <summary>
            Gets or sets the name of the method.
            </summary>
            <value>The name of the method.</value>
        </member>
        <member name="P:QUANLYQN.Data.Bases.CommandEventArgs.CurrentEntity">
            <summary>
            Gets or sets the current entity which the action is 
            being acted on.  If there is no entity, this 
            value will be null.
            </summary>
            <value>The entity.</value>
        </member>
        <member name="P:QUANLYQN.Data.Bases.CommandEventArgs.CurrentEntityList">
            <summary>
            Gets or sets the current .
            </summary>
            <value>The return value.</value>
        </member>
        <member name="T:QUANLYQN.Data.Bases.DeepSession">
            <summary>
            Keeps a weak reference of the entire deep transaction for tracking purposes.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DeepSession.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DeepSession"/> class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DeepSession.GetSessionObjects">
            <summary>
            Gets the set of current loaded objects.
            </summary>
            <returns>a list of already run objects</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DeepSession.AddRun(System.Object,System.String)">
            <summary>
            Adds the specified entity property to the collection of properties.
            </summary>
            <param name="entity"></param>
            <param name="key"></param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DeepSession.ContainsType(System.String)">
            <summary>
            Determines whether the specified obj has run for a specified property type.
            </summary>
            <param name="key">The key.</param>
            <returns>
            	<c>true</c> if the specified obj has run; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DeepSession.ContainsTypeExcluded(System.String)">
            <summary>
            Determines whether the specified obj has run for a specified property type.
            </summary>
            <param name="key">The key.</param>
            <returns>
            	<c>true</c> if the specified obj has run; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DeepSession.HasRun(System.Object,System.String)">
            <summary>
            Determines whether the specified obj has run.
            </summary>
            <param name="entity">The entity.</param>
            <param name="key">The key.</param>
            <returns>
            	<c>true</c> if the specified obj has run; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DeepSession.GetReference(System.Object,System.String)">
            <summary>
            Get's the reference of the object that has run
            </summary>
            <param name="entity">The entity.</param>
            <param name="key">The key.</param>
            <returns>
            	object of the run reference
            </returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DeepSession.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:QUANLYQN.Data.Bases.DeepSession.DeepSessionInnerList">
            <summary>
            Gets the Deep Session nner list.
            </summary>
            <value>The inner list.</value>
        </member>
        <member name="P:QUANLYQN.Data.Bases.DeepSession.CancelSession">
            <summary>
            If set to true, any further requests for this deep session will be canceled.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.Bases.DeepSession.SkipChildren">
            <summary>
            If set to true, any further requests for this deep session requesting to Load a child collection will be skipped.
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.Bases.ChildEntityTypeAttribute">
            <summary>
             Attribute used to decorate enumerations with underlying system type.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.ChildEntityTypeAttribute.#ctor(System.Type)">
            <summary>
             Marks the underlying type of a child entity property.
             </summary>
             <param name="entityType">Type of the property to load.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.ChildEntityTypeAttribute.GetType(System.Enum)">
            <summary>
            Gets the underlying system type for the specified enumeration value.
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="P:QUANLYQN.Data.Bases.ChildEntityTypeAttribute.EntityType">
            <summary>
            The underlying type for the ChildEntityTypes enumerations.
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.Bases.IChildEntityProperty">
            <summary>
            Provides a common property used to access the child entity type enumeration value.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.Bases.IChildEntityProperty.ChildEntityType">
            <summary>
            Gets the value of the ChildEntityType property.
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.Bases.ChildEntityProperty`1">
            <summary>
            A generic wrapper for the generated ChildEntityTypes enumerations.
            </summary>
            <typeparam name="ChildEntityTypesEnum"></typeparam>
        </member>
        <member name="F:QUANLYQN.Data.Bases.ChildEntityProperty`1.name">
            <summary>
            The Name member variable.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.Bases.ChildEntityProperty`1.Name">
            <summary>
            Gets or sets the Name property.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.Bases.ChildEntityProperty`1.ChildEntityType">
            <summary>
            Gets the value of the ChildEntityType property.
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.Bases.DmtongiaoProviderBase">
            <summary>
             This class is the base class for any <see cref="T:QUANLYQN.Data.Bases.DmtongiaoProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.Bases.DmtongiaoProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:QUANLYQN.Data.Bases.DmtongiaoProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.Bases.EntityProviderBase`2">
            <summary>
            Serves as the base class for objects that provide data access functionality.
            Provides a default implementation of the IEntityProvider&lt;Entity, EntityKey&gt; interface.
            </summary>
            <typeparam name="Entity">The class of the business object being accessed.</typeparam>
            <typeparam name="EntityKey">The class of the EntityId
            property of the specified business object class.</typeparam>
            <remarks>
            This file is generated once and will never be overwritten.
            </remarks>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmtongiaoProviderBaseCore.Delete(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.DmtongiaoKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmtongiaoProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idTongiao">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmtongiaoProviderBaseCore.Delete(QUANLYQN.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idTongiao">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmtongiaoProviderBaseCore.Get(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.DmtongiaoKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmtongiaoProviderBaseCore.GetByIdTongiao(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_DMTONGIAO index.
            </summary>
            <param name="idTongiao"></param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmtongiao"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmtongiaoProviderBaseCore.GetByIdTongiao(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_DMTONGIAO index.
            </summary>
            <param name="idTongiao"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmtongiao"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmtongiaoProviderBaseCore.GetByIdTongiao(QUANLYQN.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_DMTONGIAO index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idTongiao"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmtongiao"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmtongiaoProviderBaseCore.GetByIdTongiao(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_DMTONGIAO index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idTongiao"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmtongiao"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmtongiaoProviderBaseCore.GetByIdTongiao(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_DMTONGIAO index.
            </summary>
            <param name="idTongiao"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmtongiao"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmtongiaoProviderBaseCore.GetByIdTongiao(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_DMTONGIAO index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idTongiao"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmtongiao"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmtongiaoProviderBaseCore.Fill(System.Data.IDataReader,QUANLYQN.Entities.TList{QUANLYQN.Entities.Dmtongiao},System.Int32,System.Int32)">
            <summary>
            Fill a QUANLYQN.Entities.TList&lt;Dmtongiao&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:QUANLYQN.Entities.TList`1"/></returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmtongiaoProviderBaseCore.RefreshEntity(System.Data.IDataReader,QUANLYQN.Entities.Dmtongiao)">
            <summary>
            Refreshes the <see cref="T:QUANLYQN.Entities.Dmtongiao"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.Dmtongiao"/> object to refresh.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmtongiaoProviderBaseCore.RefreshEntity(System.Data.DataSet,QUANLYQN.Entities.Dmtongiao)">
            <summary>
            Refreshes the <see cref="T:QUANLYQN.Entities.Dmtongiao"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.Dmtongiao"/> object.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmtongiaoProviderBaseCore.DeepLoad(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Dmtongiao,System.Boolean,QUANLYQN.Data.DeepLoadType,System.Type[],QUANLYQN.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:QUANLYQN.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:QUANLYQN.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.Dmtongiao"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">QUANLYQN.Entities.Dmtongiao Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmtongiaoProviderBaseCore.DeepSave(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Dmtongiao,QUANLYQN.Data.DeepSaveType,System.Type[],QUANLYQN.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the QUANLYQN.Entities.Dmtongiao object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">QUANLYQN.Entities.Dmtongiao instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">QUANLYQN.Entities.Dmtongiao Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:QUANLYQN.Data.Bases.DmdantocProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:QUANLYQN.Data.Bases.DmdantocProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmdantocProviderBaseCore.Delete(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.DmdantocKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmdantocProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idDantoc">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmdantocProviderBaseCore.Delete(QUANLYQN.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idDantoc">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmdantocProviderBaseCore.Get(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.DmdantocKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmdantocProviderBaseCore.GetByIdDantoc(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_DMDANTOC index.
            </summary>
            <param name="idDantoc"></param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmdantoc"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmdantocProviderBaseCore.GetByIdDantoc(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_DMDANTOC index.
            </summary>
            <param name="idDantoc"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmdantoc"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmdantocProviderBaseCore.GetByIdDantoc(QUANLYQN.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_DMDANTOC index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idDantoc"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmdantoc"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmdantocProviderBaseCore.GetByIdDantoc(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_DMDANTOC index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idDantoc"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmdantoc"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmdantocProviderBaseCore.GetByIdDantoc(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_DMDANTOC index.
            </summary>
            <param name="idDantoc"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmdantoc"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmdantocProviderBaseCore.GetByIdDantoc(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_DMDANTOC index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idDantoc"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmdantoc"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmdantocProviderBaseCore.Fill(System.Data.IDataReader,QUANLYQN.Entities.TList{QUANLYQN.Entities.Dmdantoc},System.Int32,System.Int32)">
            <summary>
            Fill a QUANLYQN.Entities.TList&lt;Dmdantoc&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:QUANLYQN.Entities.TList`1"/></returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmdantocProviderBaseCore.RefreshEntity(System.Data.IDataReader,QUANLYQN.Entities.Dmdantoc)">
            <summary>
            Refreshes the <see cref="T:QUANLYQN.Entities.Dmdantoc"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.Dmdantoc"/> object to refresh.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmdantocProviderBaseCore.RefreshEntity(System.Data.DataSet,QUANLYQN.Entities.Dmdantoc)">
            <summary>
            Refreshes the <see cref="T:QUANLYQN.Entities.Dmdantoc"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.Dmdantoc"/> object.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmdantocProviderBaseCore.DeepLoad(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Dmdantoc,System.Boolean,QUANLYQN.Data.DeepLoadType,System.Type[],QUANLYQN.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:QUANLYQN.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:QUANLYQN.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.Dmdantoc"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">QUANLYQN.Entities.Dmdantoc Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmdantocProviderBaseCore.DeepSave(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Dmdantoc,QUANLYQN.Data.DeepSaveType,System.Type[],QUANLYQN.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the QUANLYQN.Entities.Dmdantoc object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">QUANLYQN.Entities.Dmdantoc instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">QUANLYQN.Entities.Dmdantoc Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:QUANLYQN.Data.Bases.DmdantocChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>QUANLYQN.Entities.Dmdantoc</c>
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.Bases.DmdantocChildEntityTypes.QuannhanCollection">
            <summary>
             Collection of <c>Dmdantoc</c> as OneToMany for QuannhanCollection
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.Bases.DmdantocFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Dmdantoc"/> object.
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.SqlFilterBuilder`1">
            <summary>
            Allows for building SQL filter expressions using strongly-typed
            column enumeration values.
            </summary>
            <typeparam name="EntityColumn">An enumeration of entity column names.</typeparam>
        </member>
        <member name="T:QUANLYQN.Data.SqlStringBuilder">
            <summary>
            Represents a SQL filter expression.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlStringBuilder.#ctor">
            <summary>
            Initializes a new instance of the SqlStringBuilder class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlStringBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SqlStringBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.SqlStringBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SqlStringBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:QUANLYQN.Data.SqlStringBuilder.Append(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="searchText"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlStringBuilder.Append(System.String,System.String,System.Boolean)">
            <summary>
            Appends the specified column and search text to the current filter.
            </summary>
            <param name="column"></param>
            <param name="searchText"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlStringBuilder.Append(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Appends the specified column and search text to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="searchText"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlStringBuilder.AppendEquals(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlStringBuilder.AppendEquals(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlStringBuilder.AppendNotEquals(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            as a NOT EQUALS expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlStringBuilder.AppendNotEquals(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter
            as a NOT EQUALS expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlStringBuilder.AppendIn(System.String,System.String)">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="column"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlStringBuilder.AppendIn(System.String,System.String,System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlStringBuilder.AppendIn(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlStringBuilder.AppendIn(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlStringBuilder.AppendNotIn(System.String,System.String)">
            <summary>
            Appends the specified column and list of values to the current filter.
            as a NOT IN expression.
            </summary>
            <param name="column"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlStringBuilder.AppendNotIn(System.String,System.String,System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            as a NOT IN expression.
            </summary>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlStringBuilder.AppendNotIn(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and list of values to the current filter.
            as a NOT IN expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlStringBuilder.AppendNotIn(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter
            as a NOT IN expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlStringBuilder.AppendInQuery(System.String,System.String)">
            <summary>
            Appends the specified sub-query to the current filter.
            </summary>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlStringBuilder.AppendInQuery(System.String,System.String,System.String)">
            <summary>
            Appends the specified sub-query to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlStringBuilder.AppendNotInQuery(System.String,System.String)">
            <summary>
            Appends the specified sub-query to the current filter
            as a NOT IN expression.
            </summary>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlStringBuilder.AppendNotInQuery(System.String,System.String,System.String)">
            <summary>
            Appends the specified sub-query to the current filter
            as a NOT IN expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlStringBuilder.AppendRange(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value range to the current filter.
            </summary>
            <param name="column"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlStringBuilder.AppendRange(System.String,System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value range to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlStringBuilder.AppendIsNull(System.String)">
            <summary>
            Appends an IS NULL expression to the current filter.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlStringBuilder.AppendIsNull(System.String,System.String)">
            <summary>
            Appends an IS NULL expression to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlStringBuilder.AppendIsNotNull(System.String)">
            <summary>
            Appends an IS NOT NULL expression to the current filter.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlStringBuilder.AppendIsNotNull(System.String,System.String)">
            <summary>
            Appends an IS NOT NULL expression to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlStringBuilder.AppendGreaterThan(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlStringBuilder.AppendGreaterThan(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlStringBuilder.AppendGreaterThanOrEqual(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlStringBuilder.AppendGreaterThanOrEqual(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlStringBuilder.AppendLessThan(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlStringBuilder.AppendLessThan(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlStringBuilder.AppendLessThanOrEqual(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlStringBuilder.AppendLessThanOrEqual(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlStringBuilder.AppendInternal(System.String,System.String,System.String,System.String)">
            <summary>
            Appends the SQL expression to the internal <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="junction">The junction.</param>
            <param name="column">The column.</param>
            <param name="compare">The compare.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:QUANLYQN.Data.SqlStringBuilder.AppendInternal(System.String,System.String)">
            <summary>
            Appends the SQL expression to the internal <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="junction">The junction.</param>
            <param name="query">The query.</param>
        </member>
        <member name="M:QUANLYQN.Data.SqlStringBuilder.Clear">
            <summary>
            Clears the internal string buffer.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlStringBuilder.ToString">
            <summary>
            Converts the value of this instance to a System.String.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlStringBuilder.ToString(System.String)">
            <summary>
            Converts the value of this instance to a System.String and
            prepends the specified junction if the expression is not empty.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlStringBuilder.Parse(System.String,System.String,System.Boolean)">
            <summary>
            Parses the specified searchText to create a SQL filter expression.
            </summary>
            <param name="column"></param>
            <param name="searchText"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlStringBuilder.GetInQueryValues(System.String,System.Boolean)">
            <summary>
            Gets an encoded list of values for use with an IN clause.
            </summary>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlStringBuilder.BeginGroup">
            <summary>
            Begins a new group of parameters by adding an open parenthesis "("
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlStringBuilder.BeginGroup(System.String)">
            <summary>
            Begins a new groups of parameters using the specified junction operator
            </summary>
            <param name="junction">The junction operator to be used</param>
        </member>
        <member name="M:QUANLYQN.Data.SqlStringBuilder.EndGroup">
            <summary>
            Ends a group of parameters by add a closing parenthesis ")"
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlStringBuilder.EnsureGroups">
            <summary>
            Makes sure that all groups have been ended (each call to BeginGroup has a corresponding EndGroup)
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.SqlStringBuilder.junction">
            <summary>
            The Junction member variable.
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.SqlStringBuilder.ignoreCase">
            <summary>
            The IgnoreCase member variable.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.SqlStringBuilder.Junction">
            <summary>
            Gets or sets the Junction property.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.SqlStringBuilder.IgnoreCase">
            <summary>
            Gets or sets the IgnoreCase property.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.SqlStringBuilder.Length">
            <summary>
            Gets or sets the length of the internal StringBuilder object.
            </summary>
            <value>The length.</value>
        </member>
        <member name="M:QUANLYQN.Data.SqlFilterBuilder`1.#ctor">
            <summary>
            Initializes a new instance of the SqlFilterBuilder class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlFilterBuilder`1.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SqlFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.SqlFilterBuilder`1.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SqlFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:QUANLYQN.Data.SqlFilterBuilder`1.Append(`0,System.String)">
            <summary>
            Appends the specified column and search text to the current filter.
            </summary>
            <param name="column"></param>
            <param name="searchText"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlFilterBuilder`1.Append(`0,System.String,System.Boolean)">
            <summary>
            Appends the specified column and search text to the current filter.
            </summary>
            <param name="column"></param>
            <param name="searchText"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlFilterBuilder`1.Append(System.String,`0,System.String,System.Boolean)">
            <summary>
            Appends the specified column and search text to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="searchText"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlFilterBuilder`1.AppendEquals(`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlFilterBuilder`1.AppendEquals(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlFilterBuilder`1.AppendNotEquals(`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter
            as a NOT EQUALS expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlFilterBuilder`1.AppendNotEquals(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            as a NOT EQUALS expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlFilterBuilder`1.AppendIn(`0,System.String)">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="column"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlFilterBuilder`1.AppendIn(`0,System.String,System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlFilterBuilder`1.AppendIn(System.String,`0,System.String)">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlFilterBuilder`1.AppendIn(System.String,`0,System.String,System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlFilterBuilder`1.AppendNotIn(`0,System.String)">
            <summary>
            Appends the specified column and list of values to the current filter
            as a NOT IN expression.
            </summary>
            <param name="column"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlFilterBuilder`1.AppendNotIn(`0,System.String,System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            as a NOT IN expression.
            </summary>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlFilterBuilder`1.AppendNotIn(System.String,`0,System.String)">
            <summary>
            Appends the specified column and list of values to the current filter.
            as a NOT IN expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlFilterBuilder`1.AppendNotIn(System.String,`0,System.String,System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            as a NOT IN expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlFilterBuilder`1.AppendInQuery(`0,System.String)">
            <summary>
            Appends the specified sub-query to the current filter.
            </summary>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlFilterBuilder`1.AppendInQuery(System.String,`0,System.String)">
            <summary>
            Appends the specified sub-query to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlFilterBuilder`1.AppendNotInQuery(`0,System.String)">
            <summary>
            Appends the specified sub-query to the current filter.
            as a NOT IN expression.
            </summary>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlFilterBuilder`1.AppendNotInQuery(System.String,`0,System.String)">
            <summary>
            Appends the specified sub-query to the current filter
            as a NOT IN expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlFilterBuilder`1.AppendIsNull(`0)">
            <summary>
            Appends an IS NULL expression to the current filter.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlFilterBuilder`1.AppendIsNull(System.String,`0)">
            <summary>
            Appends an IS NULL expression to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlFilterBuilder`1.AppendIsNotNull(`0)">
            <summary>
            Appends an IS NOT NULL expression to the current filter.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlFilterBuilder`1.AppendIsNotNull(System.String,`0)">
            <summary>
            Appends an IS NOT NULL expression to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlFilterBuilder`1.AppendRange(`0,System.String,System.String)">
            <summary>
            Appends the specified column and value range to the current filter.
            </summary>
            <param name="column"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlFilterBuilder`1.AppendRange(System.String,`0,System.String,System.String)">
            <summary>
            Appends the specified column and value range to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlFilterBuilder`1.AppendGreaterThan(`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlFilterBuilder`1.AppendGreaterThan(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlFilterBuilder`1.AppendGreaterThanOrEqual(`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlFilterBuilder`1.AppendGreaterThanOrEqual(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlFilterBuilder`1.AppendLessThan(`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlFilterBuilder`1.AppendLessThan(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlFilterBuilder`1.AppendLessThanOrEqual(`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlFilterBuilder`1.AppendLessThanOrEqual(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlFilterBuilder`1.GetColumnName(`0)">
            <summary>
            Gets the column name from the specified column enumeration value.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmdantocFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the DmdantocFilterBuilder class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmdantocFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmdantocFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmdantocFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmdantocFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.Bases.DmdantocParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Dmdantoc"/> object.
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.ParameterizedSqlFilterBuilder`1">
            <summary>
            Allows for building parameterized SQL filter expressions using strongly-typed
            column enumeration values.
            </summary>
            <typeparam name="EntityColumn">An enumeration of entity column names.</typeparam>
        </member>
        <member name="T:QUANLYQN.Data.IFilterParameterCollection">
            <summary>
              Represents a type which will contain a method to 
              retrieve the A collection of <see cref="T:QUANLYQN.Data.SqlFilterParameterCollection"/> 
              objects to use dynamic and parameterized filters.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.IFilterParameterCollection.GetParameters">
            <summary>
            Gets a collection of <see cref="T:QUANLYQN.Data.SqlFilterParameter"/> objects
            </summary>
            <returns><see cref="T:QUANLYQN.Data.SqlFilterParameterCollection"/> object</returns>
        </member>
        <member name="M:QUANLYQN.Data.ParameterizedSqlFilterBuilder`1.#ctor">
            <summary>
            Initializes a new instance of the ParameterizedSqlFilterBuilder&lt;EntityColumn&gt; class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.ParameterizedSqlFilterBuilder`1.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ParameterizedSqlFilterBuilder&lt;EntityColumn&gt; class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.ParameterizedSqlFilterBuilder`1.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ParameterizedSqlFilterBuilder&lt;EntityColumn&gt; class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:QUANLYQN.Data.ParameterizedSqlFilterBuilder`1.Append(System.String,`0,System.String,System.Boolean)">
            <summary>
            Appends the specified column and search text to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="searchText"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.ParameterizedSqlFilterBuilder`1.AppendEquals(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.ParameterizedSqlFilterBuilder`1.AppendEquals(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.ParameterizedSqlFilterBuilder`1.AppendNotEquals(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            as a NOT EQUALS expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.ParameterizedSqlFilterBuilder`1.AppendNotEquals(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter
            as a NOT EQUALS expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.ParameterizedSqlFilterBuilder`1.AppendIn(System.String,`0,System.String,System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.ParameterizedSqlFilterBuilder`1.AppendIn(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.ParameterizedSqlFilterBuilder`1.AppendNotIn(System.String,`0,System.String,System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            as a NOT IN expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.ParameterizedSqlFilterBuilder`1.AppendNotIn(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter
            as a NOT IN expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.ParameterizedSqlFilterBuilder`1.AppendInQuery(System.String,`0,System.String)">
            <summary>
            Appends the specified sub-query to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.ParameterizedSqlFilterBuilder`1.AppendNotInQuery(System.String,`0,System.String)">
            <summary>
            Appends the specified sub-query to the current filter
            as a NOT IN expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.ParameterizedSqlFilterBuilder`1.AppendRange(System.String,`0,System.String,System.String)">
            <summary>
            Appends the specified column and value range to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.ParameterizedSqlFilterBuilder`1.AppendRange(System.String,System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value range to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.ParameterizedSqlFilterBuilder`1.AppendGreaterThan(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.ParameterizedSqlFilterBuilder`1.AppendGreaterThan(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.ParameterizedSqlFilterBuilder`1.AppendGreaterThanOrEqual(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.ParameterizedSqlFilterBuilder`1.AppendGreaterThanOrEqual(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.ParameterizedSqlFilterBuilder`1.AppendLessThan(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.ParameterizedSqlFilterBuilder`1.AppendLessThan(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.ParameterizedSqlFilterBuilder`1.AppendLessThanOrEqual(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.ParameterizedSqlFilterBuilder`1.AppendLessThanOrEqual(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.ParameterizedSqlFilterBuilder`1.Parse(System.String,System.String,System.Boolean)">
            <summary>
            Parses the specified searchText to create a SQL filter expression.
            </summary>
            <param name="column"></param>
            <param name="searchText"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.ParameterizedSqlFilterBuilder`1.GetInQueryValues(System.String,System.Boolean)">
            <summary>
            Gets an encoded list of values for use with an IN clause.
            </summary>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.ParameterizedSqlFilterBuilder`1.GetParameters">
            <summary>
            Gets the current collection of <see cref="T:QUANLYQN.Data.SqlFilterParameter"/> objects and
            also sets the collection's FilterExpression property.
            </summary>
            <returns></returns>
        </member>
        <member name="F:QUANLYQN.Data.ParameterizedSqlFilterBuilder`1.parameters">
            <summary>
            The Parameters member variable.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.ParameterizedSqlFilterBuilder`1.QUANLYQN#Data#IFilterParameterCollection#GetParameters">
            <summary>
            Gets a collection of <see cref="T:QUANLYQN.Data.SqlFilterParameter"/> objects 
            </summary>
            <returns></returns>
        </member>
        <member name="P:QUANLYQN.Data.ParameterizedSqlFilterBuilder`1.Parameters">
            <summary>
            Gets or sets the Parameters property.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmdantocParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the DmdantocParameterBuilder class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmdantocParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmdantocParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmdantocParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmdantocParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.Bases.DmcapbacProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:QUANLYQN.Data.Bases.DmcapbacProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmcapbacProviderBaseCore.Delete(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.DmcapbacKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmcapbacProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idCapbac">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmcapbacProviderBaseCore.Delete(QUANLYQN.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idCapbac">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmcapbacProviderBaseCore.Get(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.DmcapbacKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmcapbacProviderBaseCore.GetByIdCapbac(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_DMCAPBAC index.
            </summary>
            <param name="idCapbac"></param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmcapbac"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmcapbacProviderBaseCore.GetByIdCapbac(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_DMCAPBAC index.
            </summary>
            <param name="idCapbac"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmcapbac"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmcapbacProviderBaseCore.GetByIdCapbac(QUANLYQN.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_DMCAPBAC index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idCapbac"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmcapbac"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmcapbacProviderBaseCore.GetByIdCapbac(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_DMCAPBAC index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idCapbac"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmcapbac"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmcapbacProviderBaseCore.GetByIdCapbac(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_DMCAPBAC index.
            </summary>
            <param name="idCapbac"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmcapbac"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmcapbacProviderBaseCore.GetByIdCapbac(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_DMCAPBAC index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idCapbac"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmcapbac"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmcapbacProviderBaseCore.Fill(System.Data.IDataReader,QUANLYQN.Entities.TList{QUANLYQN.Entities.Dmcapbac},System.Int32,System.Int32)">
            <summary>
            Fill a QUANLYQN.Entities.TList&lt;Dmcapbac&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:QUANLYQN.Entities.TList`1"/></returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmcapbacProviderBaseCore.RefreshEntity(System.Data.IDataReader,QUANLYQN.Entities.Dmcapbac)">
            <summary>
            Refreshes the <see cref="T:QUANLYQN.Entities.Dmcapbac"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.Dmcapbac"/> object to refresh.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmcapbacProviderBaseCore.RefreshEntity(System.Data.DataSet,QUANLYQN.Entities.Dmcapbac)">
            <summary>
            Refreshes the <see cref="T:QUANLYQN.Entities.Dmcapbac"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.Dmcapbac"/> object.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmcapbacProviderBaseCore.DeepLoad(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Dmcapbac,System.Boolean,QUANLYQN.Data.DeepLoadType,System.Type[],QUANLYQN.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:QUANLYQN.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:QUANLYQN.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.Dmcapbac"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">QUANLYQN.Entities.Dmcapbac Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmcapbacProviderBaseCore.DeepSave(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Dmcapbac,QUANLYQN.Data.DeepSaveType,System.Type[],QUANLYQN.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the QUANLYQN.Entities.Dmcapbac object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">QUANLYQN.Entities.Dmcapbac instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">QUANLYQN.Entities.Dmcapbac Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:QUANLYQN.Data.Bases.DmcapbacChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>QUANLYQN.Entities.Dmcapbac</c>
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.Bases.DmcapbacChildEntityTypes.LscapbacCollection">
            <summary>
             Collection of <c>Dmcapbac</c> as OneToMany for LscapbacCollection
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.Bases.DmcapbacChildEntityTypes.QuannhanCollection">
            <summary>
             Collection of <c>Dmcapbac</c> as OneToMany for QuannhanCollection
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.Bases.DmcapbacFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Dmcapbac"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmcapbacFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the DmcapbacFilterBuilder class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmcapbacFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmcapbacFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmcapbacFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmcapbacFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.Bases.DmcapbacParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Dmcapbac"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmcapbacParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the DmcapbacParameterBuilder class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmcapbacParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmcapbacParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmcapbacParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmcapbacParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.Bases.AdminGroupusersProviderBase">
            <summary>
             This class is the base class for any <see cref="T:QUANLYQN.Data.Bases.AdminGroupusersProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.Bases.AdminGroupusersProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:QUANLYQN.Data.Bases.AdminGroupusersProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupusersProviderBaseCore.Delete(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.AdminGroupusersKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupusersProviderBaseCore.Delete(System.String,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idGroup">. Primary Key.</param>
            <param name="idUser">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupusersProviderBaseCore.Delete(QUANLYQN.Data.TransactionManager,System.String,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idGroup">. Primary Key.</param>
            <param name="idUser">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupusersProviderBaseCore.GetByIdGroup(System.String)">
            <summary>
            	Gets rows from the datasource based on the FK_ADMIN_GROUPUSERS_ADMIN_GROUPS key.
            	FK_ADMIN_GROUPUSERS_ADMIN_GROUPS Description: 
            </summary>
            <param name="idGroup"></param>
            <returns>Returns a typed collection of QUANLYQN.Entities.AdminGroupusers objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupusersProviderBaseCore.GetByIdGroup(QUANLYQN.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the FK_ADMIN_GROUPUSERS_ADMIN_GROUPS key.
            	FK_ADMIN_GROUPUSERS_ADMIN_GROUPS Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idGroup"></param>
            <returns>Returns a typed collection of QUANLYQN.Entities.AdminGroupusers objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupusersProviderBaseCore.GetByIdGroup(QUANLYQN.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ADMIN_GROUPUSERS_ADMIN_GROUPS key.
            	FK_ADMIN_GROUPUSERS_ADMIN_GROUPS Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idGroup"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.AdminGroupusers objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupusersProviderBaseCore.GetByIdGroup(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ADMIN_GROUPUSERS_ADMIN_GROUPS key.
            	fkAdminGroupusersAdminGroups Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="idGroup"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.AdminGroupusers objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupusersProviderBaseCore.GetByIdGroup(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ADMIN_GROUPUSERS_ADMIN_GROUPS key.
            	fkAdminGroupusersAdminGroups Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="idGroup"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.AdminGroupusers objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupusersProviderBaseCore.GetByIdGroup(QUANLYQN.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ADMIN_GROUPUSERS_ADMIN_GROUPS key.
            	FK_ADMIN_GROUPUSERS_ADMIN_GROUPS Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idGroup"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of QUANLYQN.Entities.AdminGroupusers objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupusersProviderBaseCore.GetByIdUser(System.String)">
            <summary>
            	Gets rows from the datasource based on the FK_ADMIN_GROUPUSERS_ADMIN_USERS key.
            	FK_ADMIN_GROUPUSERS_ADMIN_USERS Description: 
            </summary>
            <param name="idUser"></param>
            <returns>Returns a typed collection of QUANLYQN.Entities.AdminGroupusers objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupusersProviderBaseCore.GetByIdUser(QUANLYQN.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the FK_ADMIN_GROUPUSERS_ADMIN_USERS key.
            	FK_ADMIN_GROUPUSERS_ADMIN_USERS Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idUser"></param>
            <returns>Returns a typed collection of QUANLYQN.Entities.AdminGroupusers objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupusersProviderBaseCore.GetByIdUser(QUANLYQN.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ADMIN_GROUPUSERS_ADMIN_USERS key.
            	FK_ADMIN_GROUPUSERS_ADMIN_USERS Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idUser"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.AdminGroupusers objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupusersProviderBaseCore.GetByIdUser(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ADMIN_GROUPUSERS_ADMIN_USERS key.
            	fkAdminGroupusersAdminUsers Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="idUser"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.AdminGroupusers objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupusersProviderBaseCore.GetByIdUser(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ADMIN_GROUPUSERS_ADMIN_USERS key.
            	fkAdminGroupusersAdminUsers Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="idUser"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.AdminGroupusers objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupusersProviderBaseCore.GetByIdUser(QUANLYQN.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ADMIN_GROUPUSERS_ADMIN_USERS key.
            	FK_ADMIN_GROUPUSERS_ADMIN_USERS Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idUser"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of QUANLYQN.Entities.AdminGroupusers objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupusersProviderBaseCore.Get(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.AdminGroupusersKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupusersProviderBaseCore.GetByIdGroupIdUser(System.String,System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_ADMIN_GROUPUSERS index.
            </summary>
            <param name="idGroup"></param>
            <param name="idUser"></param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.AdminGroupusers"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupusersProviderBaseCore.GetByIdGroupIdUser(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ADMIN_GROUPUSERS index.
            </summary>
            <param name="idGroup"></param>
            <param name="idUser"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.AdminGroupusers"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupusersProviderBaseCore.GetByIdGroupIdUser(QUANLYQN.Data.TransactionManager,System.String,System.String)">
            <summary>
            	Gets rows from the datasource based on the PK_ADMIN_GROUPUSERS index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idGroup"></param>
            <param name="idUser"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.AdminGroupusers"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupusersProviderBaseCore.GetByIdGroupIdUser(QUANLYQN.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ADMIN_GROUPUSERS index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idGroup"></param>
            <param name="idUser"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.AdminGroupusers"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupusersProviderBaseCore.GetByIdGroupIdUser(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ADMIN_GROUPUSERS index.
            </summary>
            <param name="idGroup"></param>
            <param name="idUser"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.AdminGroupusers"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupusersProviderBaseCore.GetByIdGroupIdUser(QUANLYQN.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ADMIN_GROUPUSERS index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idGroup"></param>
            <param name="idUser"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.AdminGroupusers"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupusersProviderBaseCore.Fill(System.Data.IDataReader,QUANLYQN.Entities.TList{QUANLYQN.Entities.AdminGroupusers},System.Int32,System.Int32)">
            <summary>
            Fill a QUANLYQN.Entities.TList&lt;AdminGroupusers&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:QUANLYQN.Entities.TList`1"/></returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupusersProviderBaseCore.RefreshEntity(System.Data.IDataReader,QUANLYQN.Entities.AdminGroupusers)">
            <summary>
            Refreshes the <see cref="T:QUANLYQN.Entities.AdminGroupusers"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.AdminGroupusers"/> object to refresh.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupusersProviderBaseCore.RefreshEntity(System.Data.DataSet,QUANLYQN.Entities.AdminGroupusers)">
            <summary>
            Refreshes the <see cref="T:QUANLYQN.Entities.AdminGroupusers"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.AdminGroupusers"/> object.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupusersProviderBaseCore.DeepLoad(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.AdminGroupusers,System.Boolean,QUANLYQN.Data.DeepLoadType,System.Type[],QUANLYQN.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:QUANLYQN.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:QUANLYQN.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.AdminGroupusers"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">QUANLYQN.Entities.AdminGroupusers Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupusersProviderBaseCore.DeepSave(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.AdminGroupusers,QUANLYQN.Data.DeepSaveType,System.Type[],QUANLYQN.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the QUANLYQN.Entities.AdminGroupusers object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">QUANLYQN.Entities.AdminGroupusers instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">QUANLYQN.Entities.AdminGroupusers Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:QUANLYQN.Data.Bases.LstruonglopProviderBase">
            <summary>
             This class is the base class for any <see cref="T:QUANLYQN.Data.Bases.LstruonglopProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.Bases.LstruonglopProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:QUANLYQN.Data.Bases.LstruonglopProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LstruonglopProviderBaseCore.Delete(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.LstruonglopKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LstruonglopProviderBaseCore.Delete(System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idLichsutruonglop">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LstruonglopProviderBaseCore.Delete(QUANLYQN.Data.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idLichsutruonglop">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LstruonglopProviderBaseCore.GetByIdTruong(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_LSTRUONGLOP_DMTRUONG1 key.
            	FK_LSTRUONGLOP_DMTRUONG1 Description: 
            </summary>
            <param name="idTruong"></param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lstruonglop objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LstruonglopProviderBaseCore.GetByIdTruong(QUANLYQN.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_LSTRUONGLOP_DMTRUONG1 key.
            	FK_LSTRUONGLOP_DMTRUONG1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idTruong"></param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lstruonglop objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LstruonglopProviderBaseCore.GetByIdTruong(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_LSTRUONGLOP_DMTRUONG1 key.
            	FK_LSTRUONGLOP_DMTRUONG1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idTruong"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lstruonglop objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LstruonglopProviderBaseCore.GetByIdTruong(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_LSTRUONGLOP_DMTRUONG1 key.
            	fkLstruonglopDmtruong1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="idTruong"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lstruonglop objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LstruonglopProviderBaseCore.GetByIdTruong(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_LSTRUONGLOP_DMTRUONG1 key.
            	fkLstruonglopDmtruong1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="idTruong"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lstruonglop objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LstruonglopProviderBaseCore.GetByIdTruong(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_LSTRUONGLOP_DMTRUONG1 key.
            	FK_LSTRUONGLOP_DMTRUONG1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idTruong"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lstruonglop objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LstruonglopProviderBaseCore.GetByIdCaphoc(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_LSTRUONGLOP_DMCAPHOC1 key.
            	FK_LSTRUONGLOP_DMCAPHOC1 Description: 
            </summary>
            <param name="idCaphoc"></param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lstruonglop objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LstruonglopProviderBaseCore.GetByIdCaphoc(QUANLYQN.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_LSTRUONGLOP_DMCAPHOC1 key.
            	FK_LSTRUONGLOP_DMCAPHOC1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idCaphoc"></param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lstruonglop objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LstruonglopProviderBaseCore.GetByIdCaphoc(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_LSTRUONGLOP_DMCAPHOC1 key.
            	FK_LSTRUONGLOP_DMCAPHOC1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idCaphoc"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lstruonglop objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LstruonglopProviderBaseCore.GetByIdCaphoc(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_LSTRUONGLOP_DMCAPHOC1 key.
            	fkLstruonglopDmcaphoc1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="idCaphoc"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lstruonglop objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LstruonglopProviderBaseCore.GetByIdCaphoc(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_LSTRUONGLOP_DMCAPHOC1 key.
            	fkLstruonglopDmcaphoc1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="idCaphoc"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lstruonglop objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LstruonglopProviderBaseCore.GetByIdCaphoc(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_LSTRUONGLOP_DMCAPHOC1 key.
            	FK_LSTRUONGLOP_DMCAPHOC1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idCaphoc"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lstruonglop objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LstruonglopProviderBaseCore.GetByIdQuannhan(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_LSTRUONGLOP_QUANNHAN1 key.
            	FK_LSTRUONGLOP_QUANNHAN1 Description: 
            </summary>
            <param name="idQuannhan"></param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lstruonglop objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LstruonglopProviderBaseCore.GetByIdQuannhan(QUANLYQN.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_LSTRUONGLOP_QUANNHAN1 key.
            	FK_LSTRUONGLOP_QUANNHAN1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idQuannhan"></param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lstruonglop objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LstruonglopProviderBaseCore.GetByIdQuannhan(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_LSTRUONGLOP_QUANNHAN1 key.
            	FK_LSTRUONGLOP_QUANNHAN1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idQuannhan"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lstruonglop objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LstruonglopProviderBaseCore.GetByIdQuannhan(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_LSTRUONGLOP_QUANNHAN1 key.
            	fkLstruonglopQuannhan1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="idQuannhan"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lstruonglop objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LstruonglopProviderBaseCore.GetByIdQuannhan(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_LSTRUONGLOP_QUANNHAN1 key.
            	fkLstruonglopQuannhan1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="idQuannhan"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lstruonglop objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LstruonglopProviderBaseCore.GetByIdQuannhan(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_LSTRUONGLOP_QUANNHAN1 key.
            	FK_LSTRUONGLOP_QUANNHAN1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idQuannhan"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lstruonglop objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LstruonglopProviderBaseCore.Get(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.LstruonglopKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LstruonglopProviderBaseCore.GetByIdLichsutruonglop(System.Int64)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_LSTRUONGLOP index.
            </summary>
            <param name="idLichsutruonglop"></param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Lstruonglop"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LstruonglopProviderBaseCore.GetByIdLichsutruonglop(System.Int64,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_LSTRUONGLOP index.
            </summary>
            <param name="idLichsutruonglop"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Lstruonglop"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LstruonglopProviderBaseCore.GetByIdLichsutruonglop(QUANLYQN.Data.TransactionManager,System.Int64)">
            <summary>
            	Gets rows from the datasource based on the PK_LSTRUONGLOP index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idLichsutruonglop"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Lstruonglop"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LstruonglopProviderBaseCore.GetByIdLichsutruonglop(QUANLYQN.Data.TransactionManager,System.Int64,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_LSTRUONGLOP index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idLichsutruonglop"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Lstruonglop"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LstruonglopProviderBaseCore.GetByIdLichsutruonglop(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_LSTRUONGLOP index.
            </summary>
            <param name="idLichsutruonglop"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Lstruonglop"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LstruonglopProviderBaseCore.GetByIdLichsutruonglop(QUANLYQN.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_LSTRUONGLOP index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idLichsutruonglop"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Lstruonglop"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LstruonglopProviderBaseCore.Fill(System.Data.IDataReader,QUANLYQN.Entities.TList{QUANLYQN.Entities.Lstruonglop},System.Int32,System.Int32)">
            <summary>
            Fill a QUANLYQN.Entities.TList&lt;Lstruonglop&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:QUANLYQN.Entities.TList`1"/></returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LstruonglopProviderBaseCore.RefreshEntity(System.Data.IDataReader,QUANLYQN.Entities.Lstruonglop)">
            <summary>
            Refreshes the <see cref="T:QUANLYQN.Entities.Lstruonglop"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.Lstruonglop"/> object to refresh.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LstruonglopProviderBaseCore.RefreshEntity(System.Data.DataSet,QUANLYQN.Entities.Lstruonglop)">
            <summary>
            Refreshes the <see cref="T:QUANLYQN.Entities.Lstruonglop"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.Lstruonglop"/> object.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LstruonglopProviderBaseCore.DeepLoad(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Lstruonglop,System.Boolean,QUANLYQN.Data.DeepLoadType,System.Type[],QUANLYQN.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:QUANLYQN.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:QUANLYQN.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.Lstruonglop"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">QUANLYQN.Entities.Lstruonglop Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LstruonglopProviderBaseCore.DeepSave(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Lstruonglop,QUANLYQN.Data.DeepSaveType,System.Type[],QUANLYQN.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the QUANLYQN.Entities.Lstruonglop object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">QUANLYQN.Entities.Lstruonglop instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">QUANLYQN.Entities.Lstruonglop Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:QUANLYQN.Data.Bases.LschucvuProviderBase">
            <summary>
             This class is the base class for any <see cref="T:QUANLYQN.Data.Bases.LschucvuProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.Bases.LschucvuProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:QUANLYQN.Data.Bases.LschucvuProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LschucvuProviderBaseCore.Delete(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.LschucvuKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LschucvuProviderBaseCore.Delete(System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idLichsuchucvu">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LschucvuProviderBaseCore.Delete(QUANLYQN.Data.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idLichsuchucvu">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LschucvuProviderBaseCore.GetByIdChucvu(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_LSCHUCVU_DMCHUCVU1 key.
            	FK_LSCHUCVU_DMCHUCVU1 Description: 
            </summary>
            <param name="idChucvu"></param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lschucvu objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LschucvuProviderBaseCore.GetByIdChucvu(QUANLYQN.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_LSCHUCVU_DMCHUCVU1 key.
            	FK_LSCHUCVU_DMCHUCVU1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idChucvu"></param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lschucvu objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LschucvuProviderBaseCore.GetByIdChucvu(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_LSCHUCVU_DMCHUCVU1 key.
            	FK_LSCHUCVU_DMCHUCVU1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idChucvu"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lschucvu objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LschucvuProviderBaseCore.GetByIdChucvu(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_LSCHUCVU_DMCHUCVU1 key.
            	fkLschucvuDmchucvu1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="idChucvu"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lschucvu objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LschucvuProviderBaseCore.GetByIdChucvu(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_LSCHUCVU_DMCHUCVU1 key.
            	fkLschucvuDmchucvu1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="idChucvu"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lschucvu objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LschucvuProviderBaseCore.GetByIdChucvu(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_LSCHUCVU_DMCHUCVU1 key.
            	FK_LSCHUCVU_DMCHUCVU1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idChucvu"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lschucvu objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LschucvuProviderBaseCore.GetByIdQuannhan(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_LSCHUCVU_QUANNHAN1 key.
            	FK_LSCHUCVU_QUANNHAN1 Description: 
            </summary>
            <param name="idQuannhan"></param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lschucvu objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LschucvuProviderBaseCore.GetByIdQuannhan(QUANLYQN.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_LSCHUCVU_QUANNHAN1 key.
            	FK_LSCHUCVU_QUANNHAN1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idQuannhan"></param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lschucvu objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LschucvuProviderBaseCore.GetByIdQuannhan(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_LSCHUCVU_QUANNHAN1 key.
            	FK_LSCHUCVU_QUANNHAN1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idQuannhan"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lschucvu objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LschucvuProviderBaseCore.GetByIdQuannhan(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_LSCHUCVU_QUANNHAN1 key.
            	fkLschucvuQuannhan1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="idQuannhan"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lschucvu objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LschucvuProviderBaseCore.GetByIdQuannhan(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_LSCHUCVU_QUANNHAN1 key.
            	fkLschucvuQuannhan1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="idQuannhan"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lschucvu objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LschucvuProviderBaseCore.GetByIdQuannhan(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_LSCHUCVU_QUANNHAN1 key.
            	FK_LSCHUCVU_QUANNHAN1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idQuannhan"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lschucvu objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LschucvuProviderBaseCore.Get(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.LschucvuKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LschucvuProviderBaseCore.GetByIdLichsuchucvu(System.Int64)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_LSCHUCVU_1 index.
            </summary>
            <param name="idLichsuchucvu"></param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Lschucvu"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LschucvuProviderBaseCore.GetByIdLichsuchucvu(System.Int64,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_LSCHUCVU_1 index.
            </summary>
            <param name="idLichsuchucvu"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Lschucvu"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LschucvuProviderBaseCore.GetByIdLichsuchucvu(QUANLYQN.Data.TransactionManager,System.Int64)">
            <summary>
            	Gets rows from the datasource based on the PK_LSCHUCVU_1 index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idLichsuchucvu"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Lschucvu"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LschucvuProviderBaseCore.GetByIdLichsuchucvu(QUANLYQN.Data.TransactionManager,System.Int64,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_LSCHUCVU_1 index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idLichsuchucvu"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Lschucvu"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LschucvuProviderBaseCore.GetByIdLichsuchucvu(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_LSCHUCVU_1 index.
            </summary>
            <param name="idLichsuchucvu"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Lschucvu"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LschucvuProviderBaseCore.GetByIdLichsuchucvu(QUANLYQN.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_LSCHUCVU_1 index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idLichsuchucvu"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Lschucvu"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LschucvuProviderBaseCore.Fill(System.Data.IDataReader,QUANLYQN.Entities.TList{QUANLYQN.Entities.Lschucvu},System.Int32,System.Int32)">
            <summary>
            Fill a QUANLYQN.Entities.TList&lt;Lschucvu&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:QUANLYQN.Entities.TList`1"/></returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LschucvuProviderBaseCore.RefreshEntity(System.Data.IDataReader,QUANLYQN.Entities.Lschucvu)">
            <summary>
            Refreshes the <see cref="T:QUANLYQN.Entities.Lschucvu"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.Lschucvu"/> object to refresh.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LschucvuProviderBaseCore.RefreshEntity(System.Data.DataSet,QUANLYQN.Entities.Lschucvu)">
            <summary>
            Refreshes the <see cref="T:QUANLYQN.Entities.Lschucvu"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.Lschucvu"/> object.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LschucvuProviderBaseCore.DeepLoad(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Lschucvu,System.Boolean,QUANLYQN.Data.DeepLoadType,System.Type[],QUANLYQN.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:QUANLYQN.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:QUANLYQN.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.Lschucvu"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">QUANLYQN.Entities.Lschucvu Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LschucvuProviderBaseCore.DeepSave(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Lschucvu,QUANLYQN.Data.DeepSaveType,System.Type[],QUANLYQN.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the QUANLYQN.Entities.Lschucvu object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">QUANLYQN.Entities.Lschucvu instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">QUANLYQN.Entities.Lschucvu Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:QUANLYQN.Data.Bases.DmdantocProviderBase">
            <summary>
             This class is the base class for any <see cref="T:QUANLYQN.Data.Bases.DmdantocProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.Bases.DmcaphocProviderBase">
            <summary>
             This class is the base class for any <see cref="T:QUANLYQN.Data.Bases.DmcaphocProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.Bases.DmcaphocProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:QUANLYQN.Data.Bases.DmcaphocProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmcaphocProviderBaseCore.Delete(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.DmcaphocKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmcaphocProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idCaphoc">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmcaphocProviderBaseCore.Delete(QUANLYQN.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idCaphoc">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmcaphocProviderBaseCore.Get(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.DmcaphocKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmcaphocProviderBaseCore.GetByIdCaphoc(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_DMCAPHOC index.
            </summary>
            <param name="idCaphoc"></param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmcaphoc"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmcaphocProviderBaseCore.GetByIdCaphoc(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_DMCAPHOC index.
            </summary>
            <param name="idCaphoc"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmcaphoc"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmcaphocProviderBaseCore.GetByIdCaphoc(QUANLYQN.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_DMCAPHOC index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idCaphoc"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmcaphoc"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmcaphocProviderBaseCore.GetByIdCaphoc(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_DMCAPHOC index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idCaphoc"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmcaphoc"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmcaphocProviderBaseCore.GetByIdCaphoc(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_DMCAPHOC index.
            </summary>
            <param name="idCaphoc"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmcaphoc"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmcaphocProviderBaseCore.GetByIdCaphoc(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_DMCAPHOC index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idCaphoc"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmcaphoc"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmcaphocProviderBaseCore.Fill(System.Data.IDataReader,QUANLYQN.Entities.TList{QUANLYQN.Entities.Dmcaphoc},System.Int32,System.Int32)">
            <summary>
            Fill a QUANLYQN.Entities.TList&lt;Dmcaphoc&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:QUANLYQN.Entities.TList`1"/></returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmcaphocProviderBaseCore.RefreshEntity(System.Data.IDataReader,QUANLYQN.Entities.Dmcaphoc)">
            <summary>
            Refreshes the <see cref="T:QUANLYQN.Entities.Dmcaphoc"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.Dmcaphoc"/> object to refresh.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmcaphocProviderBaseCore.RefreshEntity(System.Data.DataSet,QUANLYQN.Entities.Dmcaphoc)">
            <summary>
            Refreshes the <see cref="T:QUANLYQN.Entities.Dmcaphoc"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.Dmcaphoc"/> object.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmcaphocProviderBaseCore.DeepLoad(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Dmcaphoc,System.Boolean,QUANLYQN.Data.DeepLoadType,System.Type[],QUANLYQN.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:QUANLYQN.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:QUANLYQN.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.Dmcaphoc"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">QUANLYQN.Entities.Dmcaphoc Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmcaphocProviderBaseCore.DeepSave(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Dmcaphoc,QUANLYQN.Data.DeepSaveType,System.Type[],QUANLYQN.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the QUANLYQN.Entities.Dmcaphoc object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">QUANLYQN.Entities.Dmcaphoc instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">QUANLYQN.Entities.Dmcaphoc Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:QUANLYQN.Data.Bases.AdminGroupsProviderBase">
            <summary>
             This class is the base class for any <see cref="T:QUANLYQN.Data.Bases.AdminGroupsProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.Bases.AdminGroupsProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:QUANLYQN.Data.Bases.AdminGroupsProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupsProviderBaseCore.GetByIdUserFromAdminGroupusers(System.String)">
            <summary>
            	Gets ADMIN_GROUPS objects from the datasource by ID_USER in the
            	ADMIN_GROUPUSERS table. Table ADMIN_GROUPS is related to table ADMIN_USERS
            	through the (M:N) relationship defined in the ADMIN_GROUPUSERS table.
            </summary>
            <param name="idUser"></param>
            <returns>Returns a typed collection of AdminGroups objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupsProviderBaseCore.GetByIdUserFromAdminGroupusers(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets QUANLYQN.Entities.AdminGroups objects from the datasource by ID_USER in the
            	ADMIN_GROUPUSERS table. Table ADMIN_GROUPS is related to table ADMIN_USERS
            	through the (M:N) relationship defined in the ADMIN_GROUPUSERS table.
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="idUser"></param>
            <remarks></remarks>
            <returns>Returns a TList of AdminGroups objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupsProviderBaseCore.GetByIdUserFromAdminGroupusers(QUANLYQN.Data.TransactionManager,System.String)">
            <summary>
            	Gets AdminGroups objects from the datasource by ID_USER in the
            	ADMIN_GROUPUSERS table. Table ADMIN_GROUPS is related to table ADMIN_USERS
            	through the (M:N) relationship defined in the ADMIN_GROUPUSERS table.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idUser"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ADMIN_GROUPS objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupsProviderBaseCore.GetByIdUserFromAdminGroupusers(QUANLYQN.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets AdminGroups objects from the datasource by ID_USER in the
            	ADMIN_GROUPUSERS table. Table ADMIN_GROUPS is related to table ADMIN_USERS
            	through the (M:N) relationship defined in the ADMIN_GROUPUSERS table.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idUser"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ADMIN_GROUPS objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupsProviderBaseCore.GetByIdUserFromAdminGroupusers(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets AdminGroups objects from the datasource by ID_USER in the
            	ADMIN_GROUPUSERS table. Table ADMIN_GROUPS is related to table ADMIN_USERS
            	through the (M:N) relationship defined in the ADMIN_GROUPUSERS table.
            </summary>
            <param name="idUser"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ADMIN_GROUPS objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupsProviderBaseCore.GetByIdUserFromAdminGroupusers(QUANLYQN.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets ADMIN_GROUPS objects from the datasource by ID_USER in the
            	ADMIN_GROUPUSERS table. Table ADMIN_GROUPS is related to table ADMIN_USERS
            	through the (M:N) relationship defined in the ADMIN_GROUPUSERS table.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <param name="idUser"></param>
            <remarks></remarks>
            <returns>Returns a TList of AdminGroups objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupsProviderBaseCore.GetByIdMenuFromAdminGroupmenus(System.String)">
            <summary>
            	Gets ADMIN_GROUPS objects from the datasource by ID_MENU in the
            	ADMIN_GROUPMENUS table. Table ADMIN_GROUPS is related to table ADMIN_MENUS
            	through the (M:N) relationship defined in the ADMIN_GROUPMENUS table.
            </summary>
            <param name="idMenu"></param>
            <returns>Returns a typed collection of AdminGroups objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupsProviderBaseCore.GetByIdMenuFromAdminGroupmenus(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets QUANLYQN.Entities.AdminGroups objects from the datasource by ID_MENU in the
            	ADMIN_GROUPMENUS table. Table ADMIN_GROUPS is related to table ADMIN_MENUS
            	through the (M:N) relationship defined in the ADMIN_GROUPMENUS table.
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="idMenu"></param>
            <remarks></remarks>
            <returns>Returns a TList of AdminGroups objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupsProviderBaseCore.GetByIdMenuFromAdminGroupmenus(QUANLYQN.Data.TransactionManager,System.String)">
            <summary>
            	Gets AdminGroups objects from the datasource by ID_MENU in the
            	ADMIN_GROUPMENUS table. Table ADMIN_GROUPS is related to table ADMIN_MENUS
            	through the (M:N) relationship defined in the ADMIN_GROUPMENUS table.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idMenu"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ADMIN_GROUPS objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupsProviderBaseCore.GetByIdMenuFromAdminGroupmenus(QUANLYQN.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets AdminGroups objects from the datasource by ID_MENU in the
            	ADMIN_GROUPMENUS table. Table ADMIN_GROUPS is related to table ADMIN_MENUS
            	through the (M:N) relationship defined in the ADMIN_GROUPMENUS table.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idMenu"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ADMIN_GROUPS objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupsProviderBaseCore.GetByIdMenuFromAdminGroupmenus(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets AdminGroups objects from the datasource by ID_MENU in the
            	ADMIN_GROUPMENUS table. Table ADMIN_GROUPS is related to table ADMIN_MENUS
            	through the (M:N) relationship defined in the ADMIN_GROUPMENUS table.
            </summary>
            <param name="idMenu"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ADMIN_GROUPS objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupsProviderBaseCore.GetByIdMenuFromAdminGroupmenus(QUANLYQN.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets ADMIN_GROUPS objects from the datasource by ID_MENU in the
            	ADMIN_GROUPMENUS table. Table ADMIN_GROUPS is related to table ADMIN_MENUS
            	through the (M:N) relationship defined in the ADMIN_GROUPMENUS table.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <param name="idMenu"></param>
            <remarks></remarks>
            <returns>Returns a TList of AdminGroups objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupsProviderBaseCore.Delete(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.AdminGroupsKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupsProviderBaseCore.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idGroup">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupsProviderBaseCore.Delete(QUANLYQN.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idGroup">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupsProviderBaseCore.Get(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.AdminGroupsKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupsProviderBaseCore.GetByIdGroup(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_ADMIN_GROUPS index.
            </summary>
            <param name="idGroup"></param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.AdminGroups"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupsProviderBaseCore.GetByIdGroup(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ADMIN_GROUPS index.
            </summary>
            <param name="idGroup"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.AdminGroups"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupsProviderBaseCore.GetByIdGroup(QUANLYQN.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the PK_ADMIN_GROUPS index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idGroup"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.AdminGroups"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupsProviderBaseCore.GetByIdGroup(QUANLYQN.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ADMIN_GROUPS index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idGroup"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.AdminGroups"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupsProviderBaseCore.GetByIdGroup(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ADMIN_GROUPS index.
            </summary>
            <param name="idGroup"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.AdminGroups"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupsProviderBaseCore.GetByIdGroup(QUANLYQN.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ADMIN_GROUPS index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idGroup"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.AdminGroups"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupsProviderBaseCore.Fill(System.Data.IDataReader,QUANLYQN.Entities.TList{QUANLYQN.Entities.AdminGroups},System.Int32,System.Int32)">
            <summary>
            Fill a QUANLYQN.Entities.TList&lt;AdminGroups&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:QUANLYQN.Entities.TList`1"/></returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupsProviderBaseCore.RefreshEntity(System.Data.IDataReader,QUANLYQN.Entities.AdminGroups)">
            <summary>
            Refreshes the <see cref="T:QUANLYQN.Entities.AdminGroups"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.AdminGroups"/> object to refresh.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupsProviderBaseCore.RefreshEntity(System.Data.DataSet,QUANLYQN.Entities.AdminGroups)">
            <summary>
            Refreshes the <see cref="T:QUANLYQN.Entities.AdminGroups"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.AdminGroups"/> object.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupsProviderBaseCore.DeepLoad(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.AdminGroups,System.Boolean,QUANLYQN.Data.DeepLoadType,System.Type[],QUANLYQN.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:QUANLYQN.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:QUANLYQN.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.AdminGroups"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">QUANLYQN.Entities.AdminGroups Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupsProviderBaseCore.DeepSave(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.AdminGroups,QUANLYQN.Data.DeepSaveType,System.Type[],QUANLYQN.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the QUANLYQN.Entities.AdminGroups object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">QUANLYQN.Entities.AdminGroups instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">QUANLYQN.Entities.AdminGroups Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:QUANLYQN.Data.Bases.NetTiersProvider">
            <summary>
             The base class to implements to create a .NetTiers provider.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.NetTiersProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider.
            </summary>
            <param name="name">The friendly name of the provider.</param>
            <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
            <exception cref="T:System.ArgumentNullException">The name of the provider is null.</exception>
            <exception cref="T:System.InvalidOperationException">An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)"></see> on a provider after the provider has already been initialized.</exception>
            <exception cref="T:System.ArgumentException">The name of the provider has a length of zero.</exception>
        </member>
        <member name="M:QUANLYQN.Data.Bases.NetTiersProvider.CreateTransaction">
            <summary>
            Creates a new <c cref="T:QUANLYQN.Data.TransactionManager"/> instance from the current datasource.
            </summary>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.NetTiersProvider.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.NetTiersProvider.ExecuteNonQuery(QUANLYQN.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.NetTiersProvider.ExecuteNonQuery(System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.NetTiersProvider.ExecuteNonQuery(QUANLYQN.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.NetTiersProvider.ExecuteNonQuery(System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.NetTiersProvider.ExecuteNonQuery(QUANLYQN.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.NetTiersProvider.ExecuteReader(System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.NetTiersProvider.ExecuteReader(QUANLYQN.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.NetTiersProvider.ExecuteReader(System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.NetTiersProvider.ExecuteReader(QUANLYQN.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.NetTiersProvider.ExecuteReader(System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.NetTiersProvider.ExecuteReader(QUANLYQN.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.NetTiersProvider.ExecuteDataSet(System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.NetTiersProvider.ExecuteDataSet(QUANLYQN.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.NetTiersProvider.ExecuteDataSet(System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.NetTiersProvider.ExecuteDataSet(QUANLYQN.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.NetTiersProvider.ExecuteDataSet(System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.NetTiersProvider.ExecuteDataSet(QUANLYQN.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.NetTiersProvider.ExecuteScalar(System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.NetTiersProvider.ExecuteScalar(QUANLYQN.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.NetTiersProvider.ExecuteScalar(System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.NetTiersProvider.ExecuteScalar(QUANLYQN.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.NetTiersProvider.ExecuteScalar(System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.NetTiersProvider.ExecuteScalar(QUANLYQN.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="P:QUANLYQN.Data.Bases.NetTiersProvider.EntityCreationalFactoryType">
            <summary>
            Gets or sets the Creational Entity Factory Type.
            </summary>
            <value>The entity factory type.</value>
        </member>
        <member name="P:QUANLYQN.Data.Bases.NetTiersProvider.EnableEntityTracking">
            <summary>
            Gets or sets the ability to track entities.
            </summary>
            <value>true/false.</value>
        </member>
        <member name="P:QUANLYQN.Data.Bases.NetTiersProvider.EnableListTracking">
            <summary>
            Gets or sets the Entity Factory Type.
            </summary>
            <value>The entity factory type.</value>
        </member>
        <member name="P:QUANLYQN.Data.Bases.NetTiersProvider.UseEntityFactory">
            <summary>
            Gets or sets the use entity factory property to enable the usage of the EntityFactory and it's type cache.
            </summary>
            <value>bool value</value>
        </member>
        <member name="P:QUANLYQN.Data.Bases.NetTiersProvider.EnableMethodAuthorization">
            <summary>
            Gets or sets the use Enable Method Authorization to enable the usage of the Microsoft Patterns and Practices 
            IAuthorizationRuleProvider for code level authorization.
            </summary>
            <value>A bool value.</value>
        </member>
        <member name="P:QUANLYQN.Data.Bases.NetTiersProvider.DefaultCommandTimeout">
            <summary>
            Gets or sets the default timeout for every command
            </summary>
            <value>integer value in seconds.</value>
        </member>
        <member name="P:QUANLYQN.Data.Bases.NetTiersProvider.CurrentLoadPolicy">
            <summary>
            Get or set the current LoadPolicy in effect
            </summary>
            <value>A <c cref="T:QUANLYQN.Data.Bases.LoadPolicy"/> enumeration member.</value>
        </member>
        <member name="P:QUANLYQN.Data.Bases.NetTiersProvider.IsTransactionSupported">
            <summary>
             Indicates if the current <c cref="T:QUANLYQN.Data.Bases.NetTiersProvider"/> implementation is supporting Transactions.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.Bases.NetTiersProvider.DmlopProvider">
            <summary>
             Current DmlopProviderBase instance.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.Bases.NetTiersProvider.AdminGroupmenusProvider">
            <summary>
             Current AdminGroupmenusProviderBase instance.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.Bases.NetTiersProvider.DmloaiquannhanProvider">
            <summary>
             Current DmloaiquannhanProviderBase instance.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.Bases.NetTiersProvider.DmtongiaoProvider">
            <summary>
             Current DmtongiaoProviderBase instance.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.Bases.NetTiersProvider.DmhinhthuckyluatProvider">
            <summary>
             Current DmhinhthuckyluatProviderBase instance.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.Bases.NetTiersProvider.DmtruongProvider">
            <summary>
             Current DmtruongProviderBase instance.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.Bases.NetTiersProvider.LstruonglopProvider">
            <summary>
             Current LstruonglopProviderBase instance.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.Bases.NetTiersProvider.LscapbacProvider">
            <summary>
             Current LscapbacProviderBase instance.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.Bases.NetTiersProvider.LskyluatProvider">
            <summary>
             Current LskyluatProviderBase instance.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.Bases.NetTiersProvider.DmhinhthuckhenthuongProvider">
            <summary>
             Current DmhinhthuckhenthuongProviderBase instance.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.Bases.NetTiersProvider.LschucvuProvider">
            <summary>
             Current LschucvuProviderBase instance.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.Bases.NetTiersProvider.AdminUsersProvider">
            <summary>
             Current AdminUsersProviderBase instance.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.Bases.NetTiersProvider.AdminGroupsProvider">
            <summary>
             Current AdminGroupsProviderBase instance.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.Bases.NetTiersProvider.AdminMenusProvider">
            <summary>
             Current AdminMenusProviderBase instance.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.Bases.NetTiersProvider.DmgioitinhProvider">
            <summary>
             Current DmgioitinhProviderBase instance.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.Bases.NetTiersProvider.AdminGroupusersProvider">
            <summary>
             Current AdminGroupusersProviderBase instance.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.Bases.NetTiersProvider.DmcaphocProvider">
            <summary>
             Current DmcaphocProviderBase instance.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.Bases.NetTiersProvider.DmdonviProvider">
            <summary>
             Current DmdonviProviderBase instance.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.Bases.NetTiersProvider.DmdantocProvider">
            <summary>
             Current DmdantocProviderBase instance.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.Bases.NetTiersProvider.DmchucvuProvider">
            <summary>
             Current DmchucvuProviderBase instance.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.Bases.NetTiersProvider.DmcapbacProvider">
            <summary>
             Current DmcapbacProviderBase instance.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.Bases.NetTiersProvider.QuannhanProvider">
            <summary>
             Current QuannhanProviderBase instance.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.Bases.NetTiersProvider.LskhenthuongProvider">
            <summary>
             Current LskhenthuongProviderBase instance.
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.Bases.LoadPolicy">
            <summary>
            Possibel load policies that can be applied when a provider Load method is called. Determines 
            how entities with EntityState.Unchanged and EntityState.Changed are treated during a Load
            when entity tracking is enabled.
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.Bases.LoadPolicy.PreserveChanges">
            <summary>
            Refresh entities with EntityState.Unchanged if entity tracking is enabled. Entities with 
            EntityState.Changed will not be refreshed with information from the database.
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.Bases.LoadPolicy.DiscardChanges">
            <summary>
            Refresh entities with EntityState.Changed as well as EntityState.Unchanged i.e. discard any
            unsaved changes.
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.Bases.DmlopProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:QUANLYQN.Data.Bases.DmlopProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmlopProviderBaseCore.Delete(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.DmlopKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmlopProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idLop">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmlopProviderBaseCore.Delete(QUANLYQN.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idLop">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmlopProviderBaseCore.GetByIdDaidoi(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_DMLOP_DMDONVI key.
            	FK_DMLOP_DMDONVI Description: 
            </summary>
            <param name="idDaidoi"></param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Dmlop objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmlopProviderBaseCore.GetByIdDaidoi(QUANLYQN.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_DMLOP_DMDONVI key.
            	FK_DMLOP_DMDONVI Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idDaidoi"></param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Dmlop objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmlopProviderBaseCore.GetByIdDaidoi(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_DMLOP_DMDONVI key.
            	FK_DMLOP_DMDONVI Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idDaidoi"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Dmlop objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmlopProviderBaseCore.GetByIdDaidoi(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_DMLOP_DMDONVI key.
            	fkDmlopDmdonvi Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="idDaidoi"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Dmlop objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmlopProviderBaseCore.GetByIdDaidoi(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_DMLOP_DMDONVI key.
            	fkDmlopDmdonvi Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="idDaidoi"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Dmlop objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmlopProviderBaseCore.GetByIdDaidoi(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_DMLOP_DMDONVI key.
            	FK_DMLOP_DMDONVI Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idDaidoi"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Dmlop objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmlopProviderBaseCore.Get(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.DmlopKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmlopProviderBaseCore.GetByIdLop(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_DMLOP index.
            </summary>
            <param name="idLop"></param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmlop"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmlopProviderBaseCore.GetByIdLop(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_DMLOP index.
            </summary>
            <param name="idLop"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmlop"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmlopProviderBaseCore.GetByIdLop(QUANLYQN.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_DMLOP index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idLop"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmlop"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmlopProviderBaseCore.GetByIdLop(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_DMLOP index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idLop"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmlop"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmlopProviderBaseCore.GetByIdLop(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_DMLOP index.
            </summary>
            <param name="idLop"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmlop"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmlopProviderBaseCore.GetByIdLop(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_DMLOP index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idLop"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmlop"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmlopProviderBaseCore.Fill(System.Data.IDataReader,QUANLYQN.Entities.TList{QUANLYQN.Entities.Dmlop},System.Int32,System.Int32)">
            <summary>
            Fill a QUANLYQN.Entities.TList&lt;Dmlop&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:QUANLYQN.Entities.TList`1"/></returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmlopProviderBaseCore.RefreshEntity(System.Data.IDataReader,QUANLYQN.Entities.Dmlop)">
            <summary>
            Refreshes the <see cref="T:QUANLYQN.Entities.Dmlop"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.Dmlop"/> object to refresh.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmlopProviderBaseCore.RefreshEntity(System.Data.DataSet,QUANLYQN.Entities.Dmlop)">
            <summary>
            Refreshes the <see cref="T:QUANLYQN.Entities.Dmlop"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.Dmlop"/> object.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmlopProviderBaseCore.DeepLoad(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Dmlop,System.Boolean,QUANLYQN.Data.DeepLoadType,System.Type[],QUANLYQN.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:QUANLYQN.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:QUANLYQN.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.Dmlop"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">QUANLYQN.Entities.Dmlop Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmlopProviderBaseCore.DeepSave(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Dmlop,QUANLYQN.Data.DeepSaveType,System.Type[],QUANLYQN.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the QUANLYQN.Entities.Dmlop object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">QUANLYQN.Entities.Dmlop instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">QUANLYQN.Entities.Dmlop Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:QUANLYQN.Data.Bases.DmlopChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>QUANLYQN.Entities.Dmlop</c>
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.Bases.DmlopChildEntityTypes.Dmdonvi">
            <summary>
             Composite Property for <c>Dmdonvi</c> at IdDaidoiSource
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.Bases.DmlopChildEntityTypes.QuannhanCollection">
            <summary>
             Collection of <c>Dmlop</c> as OneToMany for QuannhanCollection
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.Bases.DmlopFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Dmlop"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmlopFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the DmlopFilterBuilder class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmlopFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmlopFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmlopFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmlopFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.Bases.DmlopParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Dmlop"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmlopParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the DmlopParameterBuilder class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmlopParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmlopParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmlopParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmlopParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.Bases.LscapbacProviderBase">
            <summary>
             This class is the base class for any <see cref="T:QUANLYQN.Data.Bases.LscapbacProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.Bases.LscapbacProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:QUANLYQN.Data.Bases.LscapbacProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LscapbacProviderBaseCore.Delete(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.LscapbacKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LscapbacProviderBaseCore.Delete(System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idLichsucapbac">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LscapbacProviderBaseCore.Delete(QUANLYQN.Data.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idLichsucapbac">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LscapbacProviderBaseCore.GetByIdQuannhan(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_LSCAPBAC_QUANNHAN1 key.
            	FK_LSCAPBAC_QUANNHAN1 Description: 
            </summary>
            <param name="idQuannhan"></param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lscapbac objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LscapbacProviderBaseCore.GetByIdQuannhan(QUANLYQN.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_LSCAPBAC_QUANNHAN1 key.
            	FK_LSCAPBAC_QUANNHAN1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idQuannhan"></param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lscapbac objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LscapbacProviderBaseCore.GetByIdQuannhan(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_LSCAPBAC_QUANNHAN1 key.
            	FK_LSCAPBAC_QUANNHAN1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idQuannhan"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lscapbac objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LscapbacProviderBaseCore.GetByIdQuannhan(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_LSCAPBAC_QUANNHAN1 key.
            	fkLscapbacQuannhan1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="idQuannhan"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lscapbac objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LscapbacProviderBaseCore.GetByIdQuannhan(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_LSCAPBAC_QUANNHAN1 key.
            	fkLscapbacQuannhan1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="idQuannhan"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lscapbac objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LscapbacProviderBaseCore.GetByIdQuannhan(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_LSCAPBAC_QUANNHAN1 key.
            	FK_LSCAPBAC_QUANNHAN1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idQuannhan"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lscapbac objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LscapbacProviderBaseCore.GetByIdCapbac(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_LSCAPBAC_DMCAPBAC1 key.
            	FK_LSCAPBAC_DMCAPBAC1 Description: 
            </summary>
            <param name="idCapbac"></param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lscapbac objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LscapbacProviderBaseCore.GetByIdCapbac(QUANLYQN.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_LSCAPBAC_DMCAPBAC1 key.
            	FK_LSCAPBAC_DMCAPBAC1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idCapbac"></param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lscapbac objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LscapbacProviderBaseCore.GetByIdCapbac(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_LSCAPBAC_DMCAPBAC1 key.
            	FK_LSCAPBAC_DMCAPBAC1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idCapbac"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lscapbac objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LscapbacProviderBaseCore.GetByIdCapbac(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_LSCAPBAC_DMCAPBAC1 key.
            	fkLscapbacDmcapbac1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="idCapbac"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lscapbac objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LscapbacProviderBaseCore.GetByIdCapbac(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_LSCAPBAC_DMCAPBAC1 key.
            	fkLscapbacDmcapbac1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="idCapbac"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lscapbac objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LscapbacProviderBaseCore.GetByIdCapbac(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_LSCAPBAC_DMCAPBAC1 key.
            	FK_LSCAPBAC_DMCAPBAC1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idCapbac"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lscapbac objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LscapbacProviderBaseCore.Get(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.LscapbacKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LscapbacProviderBaseCore.GetByIdLichsucapbac(System.Int64)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_LSCAPBAC index.
            </summary>
            <param name="idLichsucapbac"></param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Lscapbac"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LscapbacProviderBaseCore.GetByIdLichsucapbac(System.Int64,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_LSCAPBAC index.
            </summary>
            <param name="idLichsucapbac"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Lscapbac"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LscapbacProviderBaseCore.GetByIdLichsucapbac(QUANLYQN.Data.TransactionManager,System.Int64)">
            <summary>
            	Gets rows from the datasource based on the PK_LSCAPBAC index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idLichsucapbac"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Lscapbac"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LscapbacProviderBaseCore.GetByIdLichsucapbac(QUANLYQN.Data.TransactionManager,System.Int64,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_LSCAPBAC index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idLichsucapbac"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Lscapbac"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LscapbacProviderBaseCore.GetByIdLichsucapbac(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_LSCAPBAC index.
            </summary>
            <param name="idLichsucapbac"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Lscapbac"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LscapbacProviderBaseCore.GetByIdLichsucapbac(QUANLYQN.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_LSCAPBAC index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idLichsucapbac"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Lscapbac"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LscapbacProviderBaseCore.Fill(System.Data.IDataReader,QUANLYQN.Entities.TList{QUANLYQN.Entities.Lscapbac},System.Int32,System.Int32)">
            <summary>
            Fill a QUANLYQN.Entities.TList&lt;Lscapbac&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:QUANLYQN.Entities.TList`1"/></returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LscapbacProviderBaseCore.RefreshEntity(System.Data.IDataReader,QUANLYQN.Entities.Lscapbac)">
            <summary>
            Refreshes the <see cref="T:QUANLYQN.Entities.Lscapbac"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.Lscapbac"/> object to refresh.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LscapbacProviderBaseCore.RefreshEntity(System.Data.DataSet,QUANLYQN.Entities.Lscapbac)">
            <summary>
            Refreshes the <see cref="T:QUANLYQN.Entities.Lscapbac"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.Lscapbac"/> object.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LscapbacProviderBaseCore.DeepLoad(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Lscapbac,System.Boolean,QUANLYQN.Data.DeepLoadType,System.Type[],QUANLYQN.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:QUANLYQN.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:QUANLYQN.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.Lscapbac"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">QUANLYQN.Entities.Lscapbac Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LscapbacProviderBaseCore.DeepSave(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Lscapbac,QUANLYQN.Data.DeepSaveType,System.Type[],QUANLYQN.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the QUANLYQN.Entities.Lscapbac object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">QUANLYQN.Entities.Lscapbac instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">QUANLYQN.Entities.Lscapbac Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:QUANLYQN.Data.Bases.DmdonviProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:QUANLYQN.Data.Bases.DmdonviProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmdonviProviderBaseCore.Delete(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.DmdonviKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmdonviProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idDonvi">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmdonviProviderBaseCore.Delete(QUANLYQN.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idDonvi">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmdonviProviderBaseCore.Get(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.DmdonviKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmdonviProviderBaseCore.GetByIdDonvi(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_DMDONVI index.
            </summary>
            <param name="idDonvi"></param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmdonvi"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmdonviProviderBaseCore.GetByIdDonvi(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_DMDONVI index.
            </summary>
            <param name="idDonvi"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmdonvi"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmdonviProviderBaseCore.GetByIdDonvi(QUANLYQN.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_DMDONVI index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idDonvi"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmdonvi"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmdonviProviderBaseCore.GetByIdDonvi(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_DMDONVI index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idDonvi"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmdonvi"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmdonviProviderBaseCore.GetByIdDonvi(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_DMDONVI index.
            </summary>
            <param name="idDonvi"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmdonvi"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmdonviProviderBaseCore.GetByIdDonvi(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_DMDONVI index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idDonvi"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmdonvi"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmdonviProviderBaseCore.Fill(System.Data.IDataReader,QUANLYQN.Entities.TList{QUANLYQN.Entities.Dmdonvi},System.Int32,System.Int32)">
            <summary>
            Fill a QUANLYQN.Entities.TList&lt;Dmdonvi&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:QUANLYQN.Entities.TList`1"/></returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmdonviProviderBaseCore.RefreshEntity(System.Data.IDataReader,QUANLYQN.Entities.Dmdonvi)">
            <summary>
            Refreshes the <see cref="T:QUANLYQN.Entities.Dmdonvi"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.Dmdonvi"/> object to refresh.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmdonviProviderBaseCore.RefreshEntity(System.Data.DataSet,QUANLYQN.Entities.Dmdonvi)">
            <summary>
            Refreshes the <see cref="T:QUANLYQN.Entities.Dmdonvi"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.Dmdonvi"/> object.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmdonviProviderBaseCore.DeepLoad(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Dmdonvi,System.Boolean,QUANLYQN.Data.DeepLoadType,System.Type[],QUANLYQN.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:QUANLYQN.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:QUANLYQN.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.Dmdonvi"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">QUANLYQN.Entities.Dmdonvi Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmdonviProviderBaseCore.DeepSave(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Dmdonvi,QUANLYQN.Data.DeepSaveType,System.Type[],QUANLYQN.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the QUANLYQN.Entities.Dmdonvi object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">QUANLYQN.Entities.Dmdonvi instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">QUANLYQN.Entities.Dmdonvi Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:QUANLYQN.Data.Bases.DmdonviChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>QUANLYQN.Entities.Dmdonvi</c>
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.Bases.DmdonviChildEntityTypes.QuannhanCollection">
            <summary>
             Collection of <c>Dmdonvi</c> as OneToMany for QuannhanCollection
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.Bases.DmdonviChildEntityTypes.DmlopCollection">
            <summary>
             Collection of <c>Dmdonvi</c> as OneToMany for DmlopCollection
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.Bases.DmdonviFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Dmdonvi"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmdonviFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the DmdonviFilterBuilder class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmdonviFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmdonviFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmdonviFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmdonviFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.Bases.DmdonviParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Dmdonvi"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmdonviParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the DmdonviParameterBuilder class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmdonviParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmdonviParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmdonviParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmdonviParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.IEntityViewProvider`1">
            <summary>
            Defines the common data access methods that can be used by the
            ReadOnlyDataSource control to interact with the underlying data store.
            </summary>
            <typeparam name="Entity">The class of the business object being accessed.</typeparam>
        </member>
        <member name="M:QUANLYQN.Data.IEntityViewProvider`1.Get(QUANLYQN.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.IEntityViewProvider`1.GetPaged(QUANLYQN.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.IEntityViewProvider`1.GetAll(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.IEntityViewProvider`1.Find(QUANLYQN.Data.TransactionManager,QUANLYQN.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="mgr">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="parameters">A collection of <see cref="T:QUANLYQN.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="T:QUANLYQN.Data.Bases.DmhinhthuckyluatProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:QUANLYQN.Data.Bases.DmhinhthuckyluatProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmhinhthuckyluatProviderBaseCore.Delete(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.DmhinhthuckyluatKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmhinhthuckyluatProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idHinhthucKyluat">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmhinhthuckyluatProviderBaseCore.Delete(QUANLYQN.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idHinhthucKyluat">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmhinhthuckyluatProviderBaseCore.Get(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.DmhinhthuckyluatKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmhinhthuckyluatProviderBaseCore.GetByIdHinhthucKyluat(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_DMHINHTHUCKYLUAT index.
            </summary>
            <param name="idHinhthucKyluat"></param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmhinhthuckyluat"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmhinhthuckyluatProviderBaseCore.GetByIdHinhthucKyluat(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_DMHINHTHUCKYLUAT index.
            </summary>
            <param name="idHinhthucKyluat"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmhinhthuckyluat"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmhinhthuckyluatProviderBaseCore.GetByIdHinhthucKyluat(QUANLYQN.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_DMHINHTHUCKYLUAT index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idHinhthucKyluat"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmhinhthuckyluat"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmhinhthuckyluatProviderBaseCore.GetByIdHinhthucKyluat(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_DMHINHTHUCKYLUAT index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idHinhthucKyluat"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmhinhthuckyluat"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmhinhthuckyluatProviderBaseCore.GetByIdHinhthucKyluat(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_DMHINHTHUCKYLUAT index.
            </summary>
            <param name="idHinhthucKyluat"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmhinhthuckyluat"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmhinhthuckyluatProviderBaseCore.GetByIdHinhthucKyluat(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_DMHINHTHUCKYLUAT index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idHinhthucKyluat"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmhinhthuckyluat"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmhinhthuckyluatProviderBaseCore.Fill(System.Data.IDataReader,QUANLYQN.Entities.TList{QUANLYQN.Entities.Dmhinhthuckyluat},System.Int32,System.Int32)">
            <summary>
            Fill a QUANLYQN.Entities.TList&lt;Dmhinhthuckyluat&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:QUANLYQN.Entities.TList`1"/></returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmhinhthuckyluatProviderBaseCore.RefreshEntity(System.Data.IDataReader,QUANLYQN.Entities.Dmhinhthuckyluat)">
            <summary>
            Refreshes the <see cref="T:QUANLYQN.Entities.Dmhinhthuckyluat"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.Dmhinhthuckyluat"/> object to refresh.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmhinhthuckyluatProviderBaseCore.RefreshEntity(System.Data.DataSet,QUANLYQN.Entities.Dmhinhthuckyluat)">
            <summary>
            Refreshes the <see cref="T:QUANLYQN.Entities.Dmhinhthuckyluat"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.Dmhinhthuckyluat"/> object.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmhinhthuckyluatProviderBaseCore.DeepLoad(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Dmhinhthuckyluat,System.Boolean,QUANLYQN.Data.DeepLoadType,System.Type[],QUANLYQN.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:QUANLYQN.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:QUANLYQN.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.Dmhinhthuckyluat"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">QUANLYQN.Entities.Dmhinhthuckyluat Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmhinhthuckyluatProviderBaseCore.DeepSave(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Dmhinhthuckyluat,QUANLYQN.Data.DeepSaveType,System.Type[],QUANLYQN.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the QUANLYQN.Entities.Dmhinhthuckyluat object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">QUANLYQN.Entities.Dmhinhthuckyluat instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">QUANLYQN.Entities.Dmhinhthuckyluat Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:QUANLYQN.Data.Bases.DmhinhthuckyluatChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>QUANLYQN.Entities.Dmhinhthuckyluat</c>
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.Bases.DmhinhthuckyluatChildEntityTypes.LskyluatCollection">
            <summary>
             Collection of <c>Dmhinhthuckyluat</c> as OneToMany for LskyluatCollection
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.Bases.DmhinhthuckyluatFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Dmhinhthuckyluat"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmhinhthuckyluatFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the DmhinhthuckyluatFilterBuilder class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmhinhthuckyluatFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmhinhthuckyluatFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmhinhthuckyluatFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmhinhthuckyluatFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.Bases.DmhinhthuckyluatParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Dmhinhthuckyluat"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmhinhthuckyluatParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the DmhinhthuckyluatParameterBuilder class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmhinhthuckyluatParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmhinhthuckyluatParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmhinhthuckyluatParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmhinhthuckyluatParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.Bases.DmchucvuProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:QUANLYQN.Data.Bases.DmchucvuProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmchucvuProviderBaseCore.Delete(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.DmchucvuKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmchucvuProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idChucvu">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmchucvuProviderBaseCore.Delete(QUANLYQN.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idChucvu">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmchucvuProviderBaseCore.Get(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.DmchucvuKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmchucvuProviderBaseCore.GetByIdChucvu(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_DMCHUCVU index.
            </summary>
            <param name="idChucvu"></param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmchucvu"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmchucvuProviderBaseCore.GetByIdChucvu(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_DMCHUCVU index.
            </summary>
            <param name="idChucvu"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmchucvu"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmchucvuProviderBaseCore.GetByIdChucvu(QUANLYQN.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_DMCHUCVU index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idChucvu"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmchucvu"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmchucvuProviderBaseCore.GetByIdChucvu(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_DMCHUCVU index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idChucvu"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmchucvu"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmchucvuProviderBaseCore.GetByIdChucvu(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_DMCHUCVU index.
            </summary>
            <param name="idChucvu"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmchucvu"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmchucvuProviderBaseCore.GetByIdChucvu(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_DMCHUCVU index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idChucvu"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmchucvu"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmchucvuProviderBaseCore.Fill(System.Data.IDataReader,QUANLYQN.Entities.TList{QUANLYQN.Entities.Dmchucvu},System.Int32,System.Int32)">
            <summary>
            Fill a QUANLYQN.Entities.TList&lt;Dmchucvu&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:QUANLYQN.Entities.TList`1"/></returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmchucvuProviderBaseCore.RefreshEntity(System.Data.IDataReader,QUANLYQN.Entities.Dmchucvu)">
            <summary>
            Refreshes the <see cref="T:QUANLYQN.Entities.Dmchucvu"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.Dmchucvu"/> object to refresh.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmchucvuProviderBaseCore.RefreshEntity(System.Data.DataSet,QUANLYQN.Entities.Dmchucvu)">
            <summary>
            Refreshes the <see cref="T:QUANLYQN.Entities.Dmchucvu"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.Dmchucvu"/> object.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmchucvuProviderBaseCore.DeepLoad(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Dmchucvu,System.Boolean,QUANLYQN.Data.DeepLoadType,System.Type[],QUANLYQN.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:QUANLYQN.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:QUANLYQN.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.Dmchucvu"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">QUANLYQN.Entities.Dmchucvu Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmchucvuProviderBaseCore.DeepSave(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Dmchucvu,QUANLYQN.Data.DeepSaveType,System.Type[],QUANLYQN.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the QUANLYQN.Entities.Dmchucvu object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">QUANLYQN.Entities.Dmchucvu instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">QUANLYQN.Entities.Dmchucvu Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:QUANLYQN.Data.Bases.DmchucvuChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>QUANLYQN.Entities.Dmchucvu</c>
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.Bases.DmchucvuChildEntityTypes.LschucvuCollection">
            <summary>
             Collection of <c>Dmchucvu</c> as OneToMany for LschucvuCollection
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.Bases.DmchucvuChildEntityTypes.QuannhanCollection">
            <summary>
             Collection of <c>Dmchucvu</c> as OneToMany for QuannhanCollection
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.Bases.DmchucvuFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Dmchucvu"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmchucvuFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the DmchucvuFilterBuilder class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmchucvuFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmchucvuFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmchucvuFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmchucvuFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.Bases.DmchucvuParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Dmchucvu"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmchucvuParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the DmchucvuParameterBuilder class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmchucvuParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmchucvuParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmchucvuParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmchucvuParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.Bases.AdminGroupsChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>QUANLYQN.Entities.AdminGroups</c>
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.Bases.AdminGroupsChildEntityTypes.AdminUsersCollection_From_AdminGroupusers">
            <summary>
             Collection of <c>AdminGroups</c> as ManyToMany for AdminUsersCollection_From_AdminGroupusers
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.Bases.AdminGroupsChildEntityTypes.AdminMenusCollection_From_AdminGroupmenus">
            <summary>
             Collection of <c>AdminGroups</c> as ManyToMany for AdminMenusCollection_From_AdminGroupmenus
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.Bases.AdminGroupsChildEntityTypes.AdminGroupmenusCollection">
            <summary>
             Collection of <c>AdminGroups</c> as OneToMany for AdminGroupmenusCollection
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.Bases.AdminGroupsChildEntityTypes.AdminGroupusersCollection">
            <summary>
             Collection of <c>AdminGroups</c> as OneToMany for AdminGroupusersCollection
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.Bases.AdminGroupsFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.AdminGroups"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupsFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the AdminGroupsFilterBuilder class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupsFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AdminGroupsFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupsFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AdminGroupsFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.Bases.AdminGroupsParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.AdminGroups"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupsParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the AdminGroupsParameterBuilder class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupsParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AdminGroupsParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupsParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AdminGroupsParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.TransactionManager">
            <summary>
            TransactionManager is utility class that decorates a <see cref="T:System.Data.IDbTransaction"/> instance.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.TransactionManager.#ctor">
            <summary>
            	Initializes a new instance of the <see cref="T:QUANLYQN.Data.TransactionManager"/> class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.TransactionManager.#ctor(System.String)">
            <summary>
            	Initializes a new instance of the <see cref="T:QUANLYQN.Data.TransactionManager"/> class.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
        </member>
        <member name="M:QUANLYQN.Data.TransactionManager.#ctor(System.String,System.String)">
            <summary>
            	Initializes a new instance of the <see cref="T:QUANLYQN.Data.TransactionManager"/> class.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="providerInvariantName">Name of the provider invariant.</param>
        </member>
        <member name="M:QUANLYQN.Data.TransactionManager.BeginTransaction">
            <summary>
            	Begins a transaction.
            </summary>
            <remarks>The default <see cref="T:System.Data.IsolationLevel"/> mode is ReadCommitted</remarks>
            <exception cref="T:System.InvalidOperationException">If a transaction is already open.</exception>
        </member>
        <member name="M:QUANLYQN.Data.TransactionManager.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            	Begins a transaction.
            </summary>
            <param name="isolationLevel">The <see cref="T:System.Data.IsolationLevel"/> level of the transaction</param>
            <exception cref="T:System.InvalidOperationException">If a transaction is already open.</exception>
            <exception cref="T:System.Data.DataException"></exception>
            <exception cref="T:System.Data.Common.DbException"></exception>
        </member>
        <member name="M:QUANLYQN.Data.TransactionManager.Commit">
            <summary>
            	Commit the transaction to the datasource.
            </summary>
            <exception cref="T:System.InvalidOperationException">If a transaction is not open.</exception>
        </member>
        <member name="M:QUANLYQN.Data.TransactionManager.Rollback">
            <summary>
            Rollback the transaction.
            </summary>
            <exception cref="T:System.InvalidOperationException">If a transaction is not open.</exception>
        </member>
        <member name="M:QUANLYQN.Data.TransactionManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.TransactionManager.ConnectionString">
            <summary>
            	Gets or sets the configuration key for database service.
            </summary>
            <remark>Do not change during a transaction.</remark>
            <exception cref="T:System.InvalidOperationException">
            If an attempt to set when the connection is currently open.
            </exception>
        </member>
        <member name="P:QUANLYQN.Data.TransactionManager.InvariantProviderName">
            <summary>
            Gets or sets the name of the invariant provider.
            </summary>
            <value>The name of the invariant provider.</value>
        </member>
        <member name="P:QUANLYQN.Data.TransactionManager.Database">
            <summary>
            Gets the <see cref="P:QUANLYQN.Data.TransactionManager.Database"/> instance.
            </summary>
            <value></value>
        </member>
        <member name="P:QUANLYQN.Data.TransactionManager.TransactionObject">
            <summary>
            Gets the underlying <see cref="T:System.Data.Common.DbTransaction"/> object.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.TransactionManager.IsOpen">
            <summary>
            Gets a value that indicates if a transaction is currently open and operating. 
            </summary>
            <value>Return true if a transaction session is currently open and operating; otherwise false.</value>
        </member>
        <member name="T:QUANLYQN.Data.StringTokenizer">
            <summary>
            Implements a StringTokenizer class for splitting a string
            into substrings using a set of delimiters.
            </summary>
            <remarks>
            C# version of the java.util.StringTokenizer class.
            Basicly it's a wrapper class around the <c>String.Split</c> method.<pare/>
            It implements all of it's Java equivalent methods apart from those only needed by the Enumeration interface.
            All implemented Java-compilant methods have their C# equivalents in properties. They however differ in names
            since Java uses the (Hungarian-like) notation <c>runMe()</c> while C# uses Camel-cased <c>RunMe()</c> and thus
            Java's <c>nextToken()</c> method is just an alias of the <c>NextToken</c> property.
            </remarks>
        </member>
        <member name="F:QUANLYQN.Data.StringTokenizer.DefaultDelimiters">
            <summary>
            String conatining the default set of delimiters which are <c>" \t\n\r\f"</c>:
            the space character, the tab character, the newline character, the carriage-return character, and the form-feed character.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.StringTokenizer.#ctor(System.String)">
            <summary>
            Constructs a string tokenizer for the specified string using the <see cref="F:DefaultDelimiters">default delimiters</see>.
            </summary>
            <param name="str">The string to be tokenized.</param>
            <exception cref="T:System.NullReferenceException">Thrown when the passed string is <c>null</c></exception>
        </member>
        <member name="M:QUANLYQN.Data.StringTokenizer.#ctor(System.String,System.String)">
            <summary>
            Constructs a string tokenizer for the specified string using the given delimiters.
            </summary>
            <param name="str">The string to be tokenized.</param>
            <param name="delims">The delimiters used to tokenize the string (each <see cref="!:char"/> will be used as a delimiter).</param>
            <exception cref="T:System.NullReferenceException">Thrown when the passed string is <c>null</c></exception>
        </member>
        <member name="M:QUANLYQN.Data.StringTokenizer.#ctor(System.String,System.Char[])">
            <summary>
            Constructs a string tokenizer for the specified string using the given delimiters.
            </summary>
            <param name="str">The string to be tokenized.</param>
            <param name="delims">The delimiters used to tokenize the string.</param>
        </member>
        <member name="M:QUANLYQN.Data.StringTokenizer.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructs a string tokenizer for the specified string using the given delimiters and optionally returning them as tokens.
            </summary>
            <param name="str">The string to be tokenized.</param>
            <param name="delims">The delimiters used to tokenize the string (each <see cref="!:char"/> will be used as a delimiter).</param>
            <param name="returnDelims">If set to <c>true</c> the encountered delimiters will also be returned as tokens.</param>
            <exception cref="T:System.NullReferenceException">Thrown when the passed string is <c>null</c></exception>
        </member>
        <member name="M:QUANLYQN.Data.StringTokenizer.#ctor(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Constructs a string tokenizer for the specified string using the given delimiters,
            optionally returning them as tokens. Also empty tokens may be returned using the <see cref="!:String.Empty"/> string.
            </summary>
            <param name="str">The string to be tokenized.</param>
            <param name="delims">The delimiters used to tokenize the string (each <see cref="!:char"/> will be used as a delimiter).</param>
            <param name="returnDelims">If set to <c>true</c> the encountered delimiters will also be returned as tokens.</param>
            <param name="returnEmpty">If set to <c>true</c> empty tokens will also be returned.</param>
            <exception cref="T:System.NullReferenceException">Thrown when the passed string is <c>null</c></exception>
        </member>
        <member name="M:QUANLYQN.Data.StringTokenizer.#ctor(System.String,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Constructs a string tokenizer for the specified string using the given delimiters,
            optionally returning them as tokens. Also empty tokens may be returned using the <paramref name="empty"/> string.
            </summary>
            <param name="str">The string to be tokenized.</param>
            <param name="delims">The delimiters used to tokenize the string (each <see cref="!:char"/> will be used as a delimiter).</param>
            <param name="returnDelims">If set to <c>true</c> the encountered delimiters will also be returned as tokens.</param>
            <param name="returnEmpty">If set to <c>true</c> empty tokens will also be returned.</param>
            <param name="empty">The string to be returned as an empty token.</param>
            <exception cref="T:System.NullReferenceException">Thrown when the passed string is <c>null</c></exception>
        </member>
        <member name="M:QUANLYQN.Data.StringTokenizer.Reset">
            <summary>
            Resets the current position index so that the tokens can be extracted again.
            </summary>
            <remarks><see cref="!:Equivalent not available in Java!"/></remarks>
        </member>
        <member name="M:QUANLYQN.Data.StringTokenizer.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:QUANLYQN.Data.StringTokenizer.HasMoreTokens">
            <summary>
            Tests if there are more tokens available from this tokenizer's string.
            If this method returns <c>true</c>, then a subsequent
            use of the <see cref="P:NextToken"/> property will successfully return a token.
            </summary>
            <value>
            	<c>true</c> if more tokens are available; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:QUANLYQN.Data.StringTokenizer.NextToken">
            <summary>
            Gets the next token.
            </summary>
            <value>The next token.</value>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when trying to get a token which doesn't exist.
            Usually caused by not checking if the <see cref="P:HasMoreTokens"/> property returns <c>true</c> before trying to get the next token.</exception>
        </member>
        <member name="P:QUANLYQN.Data.StringTokenizer.CountTokens">
            <summary>
            Counts the <see cref="!:remaining"/> tokens - the number of times the
            <see cref="P:NextToken"/> property can be used before it throws an exception.
            </summary>
            <value>The number of remaining tokens.</value>
            <seealso cref="P:Count"/>
        </member>
        <member name="P:QUANLYQN.Data.StringTokenizer.Count">
            <summary>
            Gets the total number of tokens extracted.
            </summary>
            <remarks>
            <see cref="!:Equivalent not available in Java!"/>
            This property returns the total number of extracted tokens,
            contrary to <see cref="P:CountTokens"/>.
            </remarks>
            <value>The number of tokens extracted.</value>
            <seealso cref="P:StringTokenizer.CountTokens"/>
        </member>
        <member name="P:QUANLYQN.Data.StringTokenizer.Item(System.Int32)">
            <summary>
            Gets the token with the specified index from the tokenizer without moving the current position index.
            </summary>
            <remarks><see cref="!:Equivalent not available in Java!"/></remarks>
            <param name="index">The index of the token to get.</param>
            <value>The token with the given index</value>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when trying to get a token which doesn't exist, that is when <see cref="!:index"/> is equal or greater then <see cref="!:Count"/> or <see cref="!:index"/> is negative.</exception>
        </member>
        <member name="P:QUANLYQN.Data.StringTokenizer.EmptyString">
            <summary>
            Gets the currently set string for empty tokens.
            </summary>
            <remarks>Default is <c>System.String.Empty</c></remarks>
            <value>The empty token string.</value>
        </member>
        <member name="T:QUANLYQN.Data.Bases.EntityViewProviderBase`1">
            <summary>
            Serves as the base class for objects that provide data access functionality.
            Provides a default implementation of the IEntityViewProvider&lt;Entity&gt; interface.
            </summary>
            <typeparam name="Entity">The class of the business object being accessed.</typeparam>
            <remarks>
            This file is generated once and will never be overwritten.
            </remarks>
        </member>
        <member name="T:QUANLYQN.Data.Bases.EntityViewProviderBaseCore`1">
            <summary>
            Serves as the base class for objects that provide data access functionality.
            Provides a default implementation of the IEntityViewProvider&lt;Entity&gt; interface.
            </summary>
            <typeparam name="Entity">The class of the business object being accessed.</typeparam>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityViewProviderBaseCore`1.GetAll">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityViewProviderBaseCore`1.GetAll(System.Int32,System.Int32)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks>Uses connection string object was created with.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityViewProviderBaseCore`1.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks>Uses connection string object was created with.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityViewProviderBaseCore`1.GetAll(QUANLYQN.Data.TransactionManager)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityViewProviderBaseCore`1.GetAll(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityViewProviderBaseCore`1.GetAll(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityViewProviderBaseCore`1.Get">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityViewProviderBaseCore`1.Get(QUANLYQN.Data.TransactionManager)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityViewProviderBaseCore`1.Get(System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityViewProviderBaseCore`1.Get(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityViewProviderBaseCore`1.Get(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityViewProviderBaseCore`1.Get(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityViewProviderBaseCore`1.Get(System.String,System.String)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityViewProviderBaseCore`1.Get(QUANLYQN.Data.TransactionManager,System.String,System.String)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityViewProviderBaseCore`1.Get(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityViewProviderBaseCore`1.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityViewProviderBaseCore`1.Get(QUANLYQN.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityViewProviderBaseCore`1.Get(QUANLYQN.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityViewProviderBaseCore`1.GetPaged(System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a VList of Entity objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityViewProviderBaseCore`1.GetPaged(QUANLYQN.Data.TransactionManager,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a VList of Entity objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityViewProviderBaseCore`1.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a VList of Entity objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityViewProviderBaseCore`1.GetPaged(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a VList of Entity objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityViewProviderBaseCore`1.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a VList of Entity objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityViewProviderBaseCore`1.GetPaged(QUANLYQN.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a VList of Entity objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityViewProviderBaseCore`1.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityViewProviderBaseCore`1.GetTotalItems(QUANLYQN.Data.TransactionManager,System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            </summary>
            <param name="mgr">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityViewProviderBaseCore`1.Find(QUANLYQN.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:QUANLYQN.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityViewProviderBaseCore`1.Find(QUANLYQN.Data.TransactionManager,QUANLYQN.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:QUANLYQN.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityViewProviderBaseCore`1.Find(QUANLYQN.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:QUANLYQN.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityViewProviderBaseCore`1.Find(QUANLYQN.Data.TransactionManager,QUANLYQN.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:QUANLYQN.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityViewProviderBaseCore`1.Find(QUANLYQN.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:QUANLYQN.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.EntityViewProviderBaseCore`1.Find(QUANLYQN.Data.TransactionManager,QUANLYQN.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:QUANLYQN.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="T:QUANLYQN.Data.Bases.DmtruongProviderBase">
            <summary>
             This class is the base class for any <see cref="T:QUANLYQN.Data.Bases.DmtruongProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.Bases.DmtruongProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:QUANLYQN.Data.Bases.DmtruongProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmtruongProviderBaseCore.Delete(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.DmtruongKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmtruongProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idTruong">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmtruongProviderBaseCore.Delete(QUANLYQN.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idTruong">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmtruongProviderBaseCore.Get(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.DmtruongKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmtruongProviderBaseCore.GetByIdTruong(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_DMTRUONG index.
            </summary>
            <param name="idTruong"></param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmtruong"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmtruongProviderBaseCore.GetByIdTruong(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_DMTRUONG index.
            </summary>
            <param name="idTruong"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmtruong"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmtruongProviderBaseCore.GetByIdTruong(QUANLYQN.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_DMTRUONG index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idTruong"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmtruong"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmtruongProviderBaseCore.GetByIdTruong(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_DMTRUONG index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idTruong"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmtruong"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmtruongProviderBaseCore.GetByIdTruong(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_DMTRUONG index.
            </summary>
            <param name="idTruong"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmtruong"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmtruongProviderBaseCore.GetByIdTruong(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_DMTRUONG index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idTruong"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmtruong"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmtruongProviderBaseCore.Fill(System.Data.IDataReader,QUANLYQN.Entities.TList{QUANLYQN.Entities.Dmtruong},System.Int32,System.Int32)">
            <summary>
            Fill a QUANLYQN.Entities.TList&lt;Dmtruong&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:QUANLYQN.Entities.TList`1"/></returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmtruongProviderBaseCore.RefreshEntity(System.Data.IDataReader,QUANLYQN.Entities.Dmtruong)">
            <summary>
            Refreshes the <see cref="T:QUANLYQN.Entities.Dmtruong"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.Dmtruong"/> object to refresh.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmtruongProviderBaseCore.RefreshEntity(System.Data.DataSet,QUANLYQN.Entities.Dmtruong)">
            <summary>
            Refreshes the <see cref="T:QUANLYQN.Entities.Dmtruong"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.Dmtruong"/> object.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmtruongProviderBaseCore.DeepLoad(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Dmtruong,System.Boolean,QUANLYQN.Data.DeepLoadType,System.Type[],QUANLYQN.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:QUANLYQN.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:QUANLYQN.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.Dmtruong"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">QUANLYQN.Entities.Dmtruong Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmtruongProviderBaseCore.DeepSave(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Dmtruong,QUANLYQN.Data.DeepSaveType,System.Type[],QUANLYQN.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the QUANLYQN.Entities.Dmtruong object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">QUANLYQN.Entities.Dmtruong instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">QUANLYQN.Entities.Dmtruong Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:QUANLYQN.Data.Bases.DmloaiquannhanProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:QUANLYQN.Data.Bases.DmloaiquannhanProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmloaiquannhanProviderBaseCore.Delete(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.DmloaiquannhanKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmloaiquannhanProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idLoaiqn">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmloaiquannhanProviderBaseCore.Delete(QUANLYQN.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idLoaiqn">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmloaiquannhanProviderBaseCore.Get(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.DmloaiquannhanKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmloaiquannhanProviderBaseCore.GetByIdLoaiqn(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_DMLOAIQUANNHAN index.
            </summary>
            <param name="idLoaiqn"></param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmloaiquannhan"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmloaiquannhanProviderBaseCore.GetByIdLoaiqn(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_DMLOAIQUANNHAN index.
            </summary>
            <param name="idLoaiqn"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmloaiquannhan"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmloaiquannhanProviderBaseCore.GetByIdLoaiqn(QUANLYQN.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_DMLOAIQUANNHAN index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idLoaiqn"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmloaiquannhan"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmloaiquannhanProviderBaseCore.GetByIdLoaiqn(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_DMLOAIQUANNHAN index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idLoaiqn"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmloaiquannhan"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmloaiquannhanProviderBaseCore.GetByIdLoaiqn(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_DMLOAIQUANNHAN index.
            </summary>
            <param name="idLoaiqn"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmloaiquannhan"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmloaiquannhanProviderBaseCore.GetByIdLoaiqn(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_DMLOAIQUANNHAN index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idLoaiqn"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmloaiquannhan"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmloaiquannhanProviderBaseCore.Fill(System.Data.IDataReader,QUANLYQN.Entities.TList{QUANLYQN.Entities.Dmloaiquannhan},System.Int32,System.Int32)">
            <summary>
            Fill a QUANLYQN.Entities.TList&lt;Dmloaiquannhan&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:QUANLYQN.Entities.TList`1"/></returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmloaiquannhanProviderBaseCore.RefreshEntity(System.Data.IDataReader,QUANLYQN.Entities.Dmloaiquannhan)">
            <summary>
            Refreshes the <see cref="T:QUANLYQN.Entities.Dmloaiquannhan"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.Dmloaiquannhan"/> object to refresh.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmloaiquannhanProviderBaseCore.RefreshEntity(System.Data.DataSet,QUANLYQN.Entities.Dmloaiquannhan)">
            <summary>
            Refreshes the <see cref="T:QUANLYQN.Entities.Dmloaiquannhan"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.Dmloaiquannhan"/> object.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmloaiquannhanProviderBaseCore.DeepLoad(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Dmloaiquannhan,System.Boolean,QUANLYQN.Data.DeepLoadType,System.Type[],QUANLYQN.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:QUANLYQN.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:QUANLYQN.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.Dmloaiquannhan"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">QUANLYQN.Entities.Dmloaiquannhan Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmloaiquannhanProviderBaseCore.DeepSave(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Dmloaiquannhan,QUANLYQN.Data.DeepSaveType,System.Type[],QUANLYQN.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the QUANLYQN.Entities.Dmloaiquannhan object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">QUANLYQN.Entities.Dmloaiquannhan instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">QUANLYQN.Entities.Dmloaiquannhan Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:QUANLYQN.Data.Bases.DmloaiquannhanChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>QUANLYQN.Entities.Dmloaiquannhan</c>
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.Bases.DmloaiquannhanChildEntityTypes.QuannhanCollection">
            <summary>
             Collection of <c>Dmloaiquannhan</c> as OneToMany for QuannhanCollection
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.Bases.DmloaiquannhanFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Dmloaiquannhan"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmloaiquannhanFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the DmloaiquannhanFilterBuilder class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmloaiquannhanFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmloaiquannhanFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmloaiquannhanFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmloaiquannhanFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.Bases.DmloaiquannhanParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Dmloaiquannhan"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmloaiquannhanParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the DmloaiquannhanParameterBuilder class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmloaiquannhanParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmloaiquannhanParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmloaiquannhanParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmloaiquannhanParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.Bases.QuannhanProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:QUANLYQN.Data.Bases.QuannhanProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanProviderBaseCore.Delete(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.QuannhanKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idQuannhan">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanProviderBaseCore.Delete(QUANLYQN.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idQuannhan">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanProviderBaseCore.GetByIdGioitinh(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_QUANNHAN_DMGIOITINH key.
            	FK_QUANNHAN_DMGIOITINH Description: 
            </summary>
            <param name="idGioitinh"></param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanProviderBaseCore.GetByIdGioitinh(QUANLYQN.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_QUANNHAN_DMGIOITINH key.
            	FK_QUANNHAN_DMGIOITINH Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idGioitinh"></param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanProviderBaseCore.GetByIdGioitinh(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_QUANNHAN_DMGIOITINH key.
            	FK_QUANNHAN_DMGIOITINH Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idGioitinh"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanProviderBaseCore.GetByIdGioitinh(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_QUANNHAN_DMGIOITINH key.
            	fkQuannhanDmgioitinh Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="idGioitinh"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanProviderBaseCore.GetByIdGioitinh(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_QUANNHAN_DMGIOITINH key.
            	fkQuannhanDmgioitinh Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="idGioitinh"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanProviderBaseCore.GetByIdGioitinh(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_QUANNHAN_DMGIOITINH key.
            	FK_QUANNHAN_DMGIOITINH Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idGioitinh"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanProviderBaseCore.GetByIdLoaiquannhan(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_QUANNHAN_DMLOAIQUANNHAN key.
            	FK_QUANNHAN_DMLOAIQUANNHAN Description: 
            </summary>
            <param name="idLoaiquannhan"></param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanProviderBaseCore.GetByIdLoaiquannhan(QUANLYQN.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_QUANNHAN_DMLOAIQUANNHAN key.
            	FK_QUANNHAN_DMLOAIQUANNHAN Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idLoaiquannhan"></param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanProviderBaseCore.GetByIdLoaiquannhan(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_QUANNHAN_DMLOAIQUANNHAN key.
            	FK_QUANNHAN_DMLOAIQUANNHAN Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idLoaiquannhan"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanProviderBaseCore.GetByIdLoaiquannhan(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_QUANNHAN_DMLOAIQUANNHAN key.
            	fkQuannhanDmloaiquannhan Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="idLoaiquannhan"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanProviderBaseCore.GetByIdLoaiquannhan(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_QUANNHAN_DMLOAIQUANNHAN key.
            	fkQuannhanDmloaiquannhan Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="idLoaiquannhan"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanProviderBaseCore.GetByIdLoaiquannhan(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_QUANNHAN_DMLOAIQUANNHAN key.
            	FK_QUANNHAN_DMLOAIQUANNHAN Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idLoaiquannhan"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanProviderBaseCore.GetByIdDantoc(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_QUANNHAN_DMDANTOC key.
            	FK_QUANNHAN_DMDANTOC Description: 
            </summary>
            <param name="idDantoc"></param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanProviderBaseCore.GetByIdDantoc(QUANLYQN.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_QUANNHAN_DMDANTOC key.
            	FK_QUANNHAN_DMDANTOC Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idDantoc"></param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanProviderBaseCore.GetByIdDantoc(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_QUANNHAN_DMDANTOC key.
            	FK_QUANNHAN_DMDANTOC Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idDantoc"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanProviderBaseCore.GetByIdDantoc(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_QUANNHAN_DMDANTOC key.
            	fkQuannhanDmdantoc Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="idDantoc"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanProviderBaseCore.GetByIdDantoc(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_QUANNHAN_DMDANTOC key.
            	fkQuannhanDmdantoc Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="idDantoc"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanProviderBaseCore.GetByIdDantoc(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_QUANNHAN_DMDANTOC key.
            	FK_QUANNHAN_DMDANTOC Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idDantoc"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanProviderBaseCore.GetByIdTongiao(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_QUANNHAN_DMTONGIAO key.
            	FK_QUANNHAN_DMTONGIAO Description: 
            </summary>
            <param name="idTongiao"></param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanProviderBaseCore.GetByIdTongiao(QUANLYQN.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_QUANNHAN_DMTONGIAO key.
            	FK_QUANNHAN_DMTONGIAO Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idTongiao"></param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanProviderBaseCore.GetByIdTongiao(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_QUANNHAN_DMTONGIAO key.
            	FK_QUANNHAN_DMTONGIAO Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idTongiao"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanProviderBaseCore.GetByIdTongiao(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_QUANNHAN_DMTONGIAO key.
            	fkQuannhanDmtongiao Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="idTongiao"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanProviderBaseCore.GetByIdTongiao(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_QUANNHAN_DMTONGIAO key.
            	fkQuannhanDmtongiao Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="idTongiao"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanProviderBaseCore.GetByIdTongiao(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_QUANNHAN_DMTONGIAO key.
            	FK_QUANNHAN_DMTONGIAO Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idTongiao"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanProviderBaseCore.GetByIdDonvi(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_QUANNHAN_DMDONVI key.
            	FK_QUANNHAN_DMDONVI Description: 
            </summary>
            <param name="idDonvi"></param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanProviderBaseCore.GetByIdDonvi(QUANLYQN.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_QUANNHAN_DMDONVI key.
            	FK_QUANNHAN_DMDONVI Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idDonvi"></param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanProviderBaseCore.GetByIdDonvi(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_QUANNHAN_DMDONVI key.
            	FK_QUANNHAN_DMDONVI Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idDonvi"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanProviderBaseCore.GetByIdDonvi(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_QUANNHAN_DMDONVI key.
            	fkQuannhanDmdonvi Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="idDonvi"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanProviderBaseCore.GetByIdDonvi(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_QUANNHAN_DMDONVI key.
            	fkQuannhanDmdonvi Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="idDonvi"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanProviderBaseCore.GetByIdDonvi(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_QUANNHAN_DMDONVI key.
            	FK_QUANNHAN_DMDONVI Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idDonvi"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanProviderBaseCore.GetByIdCapbac(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_QUANNHAN_DMCAPBAC key.
            	FK_QUANNHAN_DMCAPBAC Description: 
            </summary>
            <param name="idCapbac"></param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanProviderBaseCore.GetByIdCapbac(QUANLYQN.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_QUANNHAN_DMCAPBAC key.
            	FK_QUANNHAN_DMCAPBAC Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idCapbac"></param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanProviderBaseCore.GetByIdCapbac(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_QUANNHAN_DMCAPBAC key.
            	FK_QUANNHAN_DMCAPBAC Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idCapbac"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanProviderBaseCore.GetByIdCapbac(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_QUANNHAN_DMCAPBAC key.
            	fkQuannhanDmcapbac Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="idCapbac"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanProviderBaseCore.GetByIdCapbac(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_QUANNHAN_DMCAPBAC key.
            	fkQuannhanDmcapbac Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="idCapbac"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanProviderBaseCore.GetByIdCapbac(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_QUANNHAN_DMCAPBAC key.
            	FK_QUANNHAN_DMCAPBAC Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idCapbac"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanProviderBaseCore.GetByIdChucvu(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_QUANNHAN_DMCHUCVU key.
            	FK_QUANNHAN_DMCHUCVU Description: 
            </summary>
            <param name="idChucvu"></param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanProviderBaseCore.GetByIdChucvu(QUANLYQN.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_QUANNHAN_DMCHUCVU key.
            	FK_QUANNHAN_DMCHUCVU Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idChucvu"></param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanProviderBaseCore.GetByIdChucvu(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_QUANNHAN_DMCHUCVU key.
            	FK_QUANNHAN_DMCHUCVU Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idChucvu"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanProviderBaseCore.GetByIdChucvu(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_QUANNHAN_DMCHUCVU key.
            	fkQuannhanDmchucvu Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="idChucvu"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanProviderBaseCore.GetByIdChucvu(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_QUANNHAN_DMCHUCVU key.
            	fkQuannhanDmchucvu Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="idChucvu"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanProviderBaseCore.GetByIdChucvu(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_QUANNHAN_DMCHUCVU key.
            	FK_QUANNHAN_DMCHUCVU Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idChucvu"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanProviderBaseCore.GetByIdLop(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_QUANNHAN_DMLOP key.
            	FK_QUANNHAN_DMLOP Description: 
            </summary>
            <param name="idLop"></param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanProviderBaseCore.GetByIdLop(QUANLYQN.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_QUANNHAN_DMLOP key.
            	FK_QUANNHAN_DMLOP Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idLop"></param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanProviderBaseCore.GetByIdLop(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_QUANNHAN_DMLOP key.
            	FK_QUANNHAN_DMLOP Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idLop"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanProviderBaseCore.GetByIdLop(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_QUANNHAN_DMLOP key.
            	fkQuannhanDmlop Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="idLop"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanProviderBaseCore.GetByIdLop(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_QUANNHAN_DMLOP key.
            	fkQuannhanDmlop Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="idLop"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanProviderBaseCore.GetByIdLop(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_QUANNHAN_DMLOP key.
            	FK_QUANNHAN_DMLOP Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idLop"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Quannhan objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanProviderBaseCore.Get(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.QuannhanKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanProviderBaseCore.GetByIdQuannhan(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_QUANNHAN index.
            </summary>
            <param name="idQuannhan"></param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Quannhan"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanProviderBaseCore.GetByIdQuannhan(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_QUANNHAN index.
            </summary>
            <param name="idQuannhan"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Quannhan"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanProviderBaseCore.GetByIdQuannhan(QUANLYQN.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_QUANNHAN index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idQuannhan"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Quannhan"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanProviderBaseCore.GetByIdQuannhan(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_QUANNHAN index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idQuannhan"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Quannhan"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanProviderBaseCore.GetByIdQuannhan(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_QUANNHAN index.
            </summary>
            <param name="idQuannhan"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Quannhan"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanProviderBaseCore.GetByIdQuannhan(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_QUANNHAN index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idQuannhan"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Quannhan"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanProviderBaseCore.Fill(System.Data.IDataReader,QUANLYQN.Entities.TList{QUANLYQN.Entities.Quannhan},System.Int32,System.Int32)">
            <summary>
            Fill a QUANLYQN.Entities.TList&lt;Quannhan&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:QUANLYQN.Entities.TList`1"/></returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanProviderBaseCore.RefreshEntity(System.Data.IDataReader,QUANLYQN.Entities.Quannhan)">
            <summary>
            Refreshes the <see cref="T:QUANLYQN.Entities.Quannhan"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.Quannhan"/> object to refresh.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanProviderBaseCore.RefreshEntity(System.Data.DataSet,QUANLYQN.Entities.Quannhan)">
            <summary>
            Refreshes the <see cref="T:QUANLYQN.Entities.Quannhan"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.Quannhan"/> object.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanProviderBaseCore.DeepLoad(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Quannhan,System.Boolean,QUANLYQN.Data.DeepLoadType,System.Type[],QUANLYQN.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:QUANLYQN.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:QUANLYQN.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.Quannhan"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">QUANLYQN.Entities.Quannhan Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanProviderBaseCore.DeepSave(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Quannhan,QUANLYQN.Data.DeepSaveType,System.Type[],QUANLYQN.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the QUANLYQN.Entities.Quannhan object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">QUANLYQN.Entities.Quannhan instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">QUANLYQN.Entities.Quannhan Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:QUANLYQN.Data.Bases.QuannhanChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>QUANLYQN.Entities.Quannhan</c>
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.Bases.QuannhanChildEntityTypes.Dmgioitinh">
            <summary>
             Composite Property for <c>Dmgioitinh</c> at IdGioitinhSource
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.Bases.QuannhanChildEntityTypes.Dmloaiquannhan">
            <summary>
             Composite Property for <c>Dmloaiquannhan</c> at IdLoaiquannhanSource
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.Bases.QuannhanChildEntityTypes.Dmdantoc">
            <summary>
             Composite Property for <c>Dmdantoc</c> at IdDantocSource
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.Bases.QuannhanChildEntityTypes.Dmtongiao">
            <summary>
             Composite Property for <c>Dmtongiao</c> at IdTongiaoSource
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.Bases.QuannhanChildEntityTypes.Dmdonvi">
            <summary>
             Composite Property for <c>Dmdonvi</c> at IdDonviSource
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.Bases.QuannhanChildEntityTypes.Dmcapbac">
            <summary>
             Composite Property for <c>Dmcapbac</c> at IdCapbacSource
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.Bases.QuannhanChildEntityTypes.Dmchucvu">
            <summary>
             Composite Property for <c>Dmchucvu</c> at IdChucvuSource
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.Bases.QuannhanChildEntityTypes.Dmlop">
            <summary>
             Composite Property for <c>Dmlop</c> at IdLopSource
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.Bases.QuannhanChildEntityTypes.LschucvuCollection">
            <summary>
             Collection of <c>Quannhan</c> as OneToMany for LschucvuCollection
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.Bases.QuannhanChildEntityTypes.LscapbacCollection">
            <summary>
             Collection of <c>Quannhan</c> as OneToMany for LscapbacCollection
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.Bases.QuannhanChildEntityTypes.LskyluatCollection">
            <summary>
             Collection of <c>Quannhan</c> as OneToMany for LskyluatCollection
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.Bases.QuannhanChildEntityTypes.LskhenthuongCollection">
            <summary>
             Collection of <c>Quannhan</c> as OneToMany for LskhenthuongCollection
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.Bases.QuannhanChildEntityTypes.LstruonglopCollection">
            <summary>
             Collection of <c>Quannhan</c> as OneToMany for LstruonglopCollection
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.Bases.QuannhanFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Quannhan"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the QuannhanFilterBuilder class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the QuannhanFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the QuannhanFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.Bases.QuannhanParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Quannhan"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the QuannhanParameterBuilder class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the QuannhanParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.QuannhanParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the QuannhanParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.Bases.LskyluatProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:QUANLYQN.Data.Bases.LskyluatProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LskyluatProviderBaseCore.Delete(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.LskyluatKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LskyluatProviderBaseCore.Delete(System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idLichsukyluat">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LskyluatProviderBaseCore.Delete(QUANLYQN.Data.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idLichsukyluat">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LskyluatProviderBaseCore.GetByIdQuannhan(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_LSKYLUAT_QUANNHAN1 key.
            	FK_LSKYLUAT_QUANNHAN1 Description: 
            </summary>
            <param name="idQuannhan"></param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lskyluat objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LskyluatProviderBaseCore.GetByIdQuannhan(QUANLYQN.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_LSKYLUAT_QUANNHAN1 key.
            	FK_LSKYLUAT_QUANNHAN1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idQuannhan"></param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lskyluat objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LskyluatProviderBaseCore.GetByIdQuannhan(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_LSKYLUAT_QUANNHAN1 key.
            	FK_LSKYLUAT_QUANNHAN1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idQuannhan"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lskyluat objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LskyluatProviderBaseCore.GetByIdQuannhan(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_LSKYLUAT_QUANNHAN1 key.
            	fkLskyluatQuannhan1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="idQuannhan"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lskyluat objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LskyluatProviderBaseCore.GetByIdQuannhan(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_LSKYLUAT_QUANNHAN1 key.
            	fkLskyluatQuannhan1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="idQuannhan"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lskyluat objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LskyluatProviderBaseCore.GetByIdQuannhan(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_LSKYLUAT_QUANNHAN1 key.
            	FK_LSKYLUAT_QUANNHAN1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idQuannhan"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lskyluat objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LskyluatProviderBaseCore.GetByIdHinhthucKyluat(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_LSKYLUAT_DMHINHTHUCKYLUAT1 key.
            	FK_LSKYLUAT_DMHINHTHUCKYLUAT1 Description: 
            </summary>
            <param name="idHinhthucKyluat"></param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lskyluat objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LskyluatProviderBaseCore.GetByIdHinhthucKyluat(QUANLYQN.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_LSKYLUAT_DMHINHTHUCKYLUAT1 key.
            	FK_LSKYLUAT_DMHINHTHUCKYLUAT1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idHinhthucKyluat"></param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lskyluat objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LskyluatProviderBaseCore.GetByIdHinhthucKyluat(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_LSKYLUAT_DMHINHTHUCKYLUAT1 key.
            	FK_LSKYLUAT_DMHINHTHUCKYLUAT1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idHinhthucKyluat"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lskyluat objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LskyluatProviderBaseCore.GetByIdHinhthucKyluat(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_LSKYLUAT_DMHINHTHUCKYLUAT1 key.
            	fkLskyluatDmhinhthuckyluat1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="idHinhthucKyluat"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lskyluat objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LskyluatProviderBaseCore.GetByIdHinhthucKyluat(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_LSKYLUAT_DMHINHTHUCKYLUAT1 key.
            	fkLskyluatDmhinhthuckyluat1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="idHinhthucKyluat"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lskyluat objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LskyluatProviderBaseCore.GetByIdHinhthucKyluat(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_LSKYLUAT_DMHINHTHUCKYLUAT1 key.
            	FK_LSKYLUAT_DMHINHTHUCKYLUAT1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idHinhthucKyluat"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lskyluat objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LskyluatProviderBaseCore.Get(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.LskyluatKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LskyluatProviderBaseCore.GetByIdLichsukyluat(System.Int64)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_LSKYLUAT index.
            </summary>
            <param name="idLichsukyluat"></param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Lskyluat"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LskyluatProviderBaseCore.GetByIdLichsukyluat(System.Int64,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_LSKYLUAT index.
            </summary>
            <param name="idLichsukyluat"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Lskyluat"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LskyluatProviderBaseCore.GetByIdLichsukyluat(QUANLYQN.Data.TransactionManager,System.Int64)">
            <summary>
            	Gets rows from the datasource based on the PK_LSKYLUAT index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idLichsukyluat"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Lskyluat"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LskyluatProviderBaseCore.GetByIdLichsukyluat(QUANLYQN.Data.TransactionManager,System.Int64,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_LSKYLUAT index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idLichsukyluat"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Lskyluat"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LskyluatProviderBaseCore.GetByIdLichsukyluat(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_LSKYLUAT index.
            </summary>
            <param name="idLichsukyluat"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Lskyluat"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LskyluatProviderBaseCore.GetByIdLichsukyluat(QUANLYQN.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_LSKYLUAT index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idLichsukyluat"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Lskyluat"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LskyluatProviderBaseCore.Fill(System.Data.IDataReader,QUANLYQN.Entities.TList{QUANLYQN.Entities.Lskyluat},System.Int32,System.Int32)">
            <summary>
            Fill a QUANLYQN.Entities.TList&lt;Lskyluat&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:QUANLYQN.Entities.TList`1"/></returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LskyluatProviderBaseCore.RefreshEntity(System.Data.IDataReader,QUANLYQN.Entities.Lskyluat)">
            <summary>
            Refreshes the <see cref="T:QUANLYQN.Entities.Lskyluat"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.Lskyluat"/> object to refresh.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LskyluatProviderBaseCore.RefreshEntity(System.Data.DataSet,QUANLYQN.Entities.Lskyluat)">
            <summary>
            Refreshes the <see cref="T:QUANLYQN.Entities.Lskyluat"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.Lskyluat"/> object.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LskyluatProviderBaseCore.DeepLoad(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Lskyluat,System.Boolean,QUANLYQN.Data.DeepLoadType,System.Type[],QUANLYQN.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:QUANLYQN.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:QUANLYQN.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.Lskyluat"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">QUANLYQN.Entities.Lskyluat Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LskyluatProviderBaseCore.DeepSave(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Lskyluat,QUANLYQN.Data.DeepSaveType,System.Type[],QUANLYQN.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the QUANLYQN.Entities.Lskyluat object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">QUANLYQN.Entities.Lskyluat instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">QUANLYQN.Entities.Lskyluat Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:QUANLYQN.Data.Bases.LskyluatChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>QUANLYQN.Entities.Lskyluat</c>
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.Bases.LskyluatChildEntityTypes.Quannhan">
            <summary>
             Composite Property for <c>Quannhan</c> at IdQuannhanSource
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.Bases.LskyluatChildEntityTypes.Dmhinhthuckyluat">
            <summary>
             Composite Property for <c>Dmhinhthuckyluat</c> at IdHinhthucKyluatSource
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.Bases.LskyluatFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Lskyluat"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LskyluatFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the LskyluatFilterBuilder class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LskyluatFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the LskyluatFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LskyluatFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the LskyluatFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.Bases.LskyluatParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Lskyluat"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LskyluatParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the LskyluatParameterBuilder class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LskyluatParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the LskyluatParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LskyluatParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the LskyluatParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.Bases.DmtongiaoChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>QUANLYQN.Entities.Dmtongiao</c>
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.Bases.DmtongiaoChildEntityTypes.QuannhanCollection">
            <summary>
             Collection of <c>Dmtongiao</c> as OneToMany for QuannhanCollection
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.Bases.DmtongiaoFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Dmtongiao"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmtongiaoFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the DmtongiaoFilterBuilder class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmtongiaoFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmtongiaoFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmtongiaoFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmtongiaoFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.Bases.DmtongiaoParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Dmtongiao"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmtongiaoParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the DmtongiaoParameterBuilder class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmtongiaoParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmtongiaoParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmtongiaoParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmtongiaoParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.Bases.AdminMenusProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:QUANLYQN.Data.Bases.AdminMenusProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminMenusProviderBaseCore.GetByIdGroupFromAdminGroupmenus(System.String)">
            <summary>
            	Gets ADMIN_MENUS objects from the datasource by ID_GROUP in the
            	ADMIN_GROUPMENUS table. Table ADMIN_MENUS is related to table ADMIN_GROUPS
            	through the (M:N) relationship defined in the ADMIN_GROUPMENUS table.
            </summary>
            <param name="idGroup"></param>
            <returns>Returns a typed collection of AdminMenus objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminMenusProviderBaseCore.GetByIdGroupFromAdminGroupmenus(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets QUANLYQN.Entities.AdminMenus objects from the datasource by ID_GROUP in the
            	ADMIN_GROUPMENUS table. Table ADMIN_MENUS is related to table ADMIN_GROUPS
            	through the (M:N) relationship defined in the ADMIN_GROUPMENUS table.
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="idGroup"></param>
            <remarks></remarks>
            <returns>Returns a TList of AdminMenus objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminMenusProviderBaseCore.GetByIdGroupFromAdminGroupmenus(QUANLYQN.Data.TransactionManager,System.String)">
            <summary>
            	Gets AdminMenus objects from the datasource by ID_GROUP in the
            	ADMIN_GROUPMENUS table. Table ADMIN_MENUS is related to table ADMIN_GROUPS
            	through the (M:N) relationship defined in the ADMIN_GROUPMENUS table.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idGroup"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ADMIN_MENUS objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminMenusProviderBaseCore.GetByIdGroupFromAdminGroupmenus(QUANLYQN.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets AdminMenus objects from the datasource by ID_GROUP in the
            	ADMIN_GROUPMENUS table. Table ADMIN_MENUS is related to table ADMIN_GROUPS
            	through the (M:N) relationship defined in the ADMIN_GROUPMENUS table.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idGroup"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ADMIN_MENUS objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminMenusProviderBaseCore.GetByIdGroupFromAdminGroupmenus(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets AdminMenus objects from the datasource by ID_GROUP in the
            	ADMIN_GROUPMENUS table. Table ADMIN_MENUS is related to table ADMIN_GROUPS
            	through the (M:N) relationship defined in the ADMIN_GROUPMENUS table.
            </summary>
            <param name="idGroup"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ADMIN_MENUS objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminMenusProviderBaseCore.GetByIdGroupFromAdminGroupmenus(QUANLYQN.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets ADMIN_MENUS objects from the datasource by ID_GROUP in the
            	ADMIN_GROUPMENUS table. Table ADMIN_MENUS is related to table ADMIN_GROUPS
            	through the (M:N) relationship defined in the ADMIN_GROUPMENUS table.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <param name="idGroup"></param>
            <remarks></remarks>
            <returns>Returns a TList of AdminMenus objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminMenusProviderBaseCore.Delete(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.AdminMenusKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminMenusProviderBaseCore.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idMenu">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminMenusProviderBaseCore.Delete(QUANLYQN.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idMenu">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminMenusProviderBaseCore.Get(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.AdminMenusKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminMenusProviderBaseCore.GetByIdMenu(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_ADMIN_MENUS index.
            </summary>
            <param name="idMenu"></param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.AdminMenus"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminMenusProviderBaseCore.GetByIdMenu(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ADMIN_MENUS index.
            </summary>
            <param name="idMenu"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.AdminMenus"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminMenusProviderBaseCore.GetByIdMenu(QUANLYQN.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the PK_ADMIN_MENUS index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idMenu"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.AdminMenus"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminMenusProviderBaseCore.GetByIdMenu(QUANLYQN.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ADMIN_MENUS index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idMenu"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.AdminMenus"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminMenusProviderBaseCore.GetByIdMenu(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ADMIN_MENUS index.
            </summary>
            <param name="idMenu"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.AdminMenus"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminMenusProviderBaseCore.GetByIdMenu(QUANLYQN.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ADMIN_MENUS index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idMenu"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.AdminMenus"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminMenusProviderBaseCore.Fill(System.Data.IDataReader,QUANLYQN.Entities.TList{QUANLYQN.Entities.AdminMenus},System.Int32,System.Int32)">
            <summary>
            Fill a QUANLYQN.Entities.TList&lt;AdminMenus&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:QUANLYQN.Entities.TList`1"/></returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminMenusProviderBaseCore.RefreshEntity(System.Data.IDataReader,QUANLYQN.Entities.AdminMenus)">
            <summary>
            Refreshes the <see cref="T:QUANLYQN.Entities.AdminMenus"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.AdminMenus"/> object to refresh.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminMenusProviderBaseCore.RefreshEntity(System.Data.DataSet,QUANLYQN.Entities.AdminMenus)">
            <summary>
            Refreshes the <see cref="T:QUANLYQN.Entities.AdminMenus"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.AdminMenus"/> object.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminMenusProviderBaseCore.DeepLoad(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.AdminMenus,System.Boolean,QUANLYQN.Data.DeepLoadType,System.Type[],QUANLYQN.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:QUANLYQN.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:QUANLYQN.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.AdminMenus"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">QUANLYQN.Entities.AdminMenus Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminMenusProviderBaseCore.DeepSave(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.AdminMenus,QUANLYQN.Data.DeepSaveType,System.Type[],QUANLYQN.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the QUANLYQN.Entities.AdminMenus object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">QUANLYQN.Entities.AdminMenus instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">QUANLYQN.Entities.AdminMenus Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:QUANLYQN.Data.Bases.AdminMenusChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>QUANLYQN.Entities.AdminMenus</c>
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.Bases.AdminMenusChildEntityTypes.AdminGroupsCollection_From_AdminGroupmenus">
            <summary>
             Collection of <c>AdminMenus</c> as ManyToMany for AdminGroupsCollection_From_AdminGroupmenus
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.Bases.AdminMenusChildEntityTypes.AdminGroupmenusCollection">
            <summary>
             Collection of <c>AdminMenus</c> as OneToMany for AdminGroupmenusCollection
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.Bases.AdminMenusFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.AdminMenus"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminMenusFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the AdminMenusFilterBuilder class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminMenusFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AdminMenusFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminMenusFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AdminMenusFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.Bases.AdminMenusParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.AdminMenus"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminMenusParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the AdminMenusParameterBuilder class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminMenusParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AdminMenusParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminMenusParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AdminMenusParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.SqlExpressionParser">
            <summary>
            Parses search text into an expression that can
            be used in a SQL WHERE clause.
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.ExpressionParserBase">
            <summary>
            Provides the base functionality required to parse search terms.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.ExpressionParserBase.#ctor(System.String,QUANLYQN.Data.SqlComparisonType,System.Boolean)">
            <summary>
            Initializes a new instance of the ExpressionParserBase class.
            </summary>
            <param name="propertyName"></param>
            <param name="comparisonType"></param>
            <param name="ignoreCase"></param>
        </member>
        <member name="M:QUANLYQN.Data.ExpressionParserBase.ParseCore(System.String)">
            <summary>
            Appends the specified search text to the current expression.
            </summary>
            <param name="searchText">The search text to append.</param>
        </member>
        <member name="M:QUANLYQN.Data.ExpressionParserBase.ParseQuotes(System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            Parses quoted search terms.
            </summary>
            <param name="searchText"></param>
            <param name="quotedValues"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.ExpressionParserBase.IsKeyWord(System.String)">
            <summary>
            Determines whether the specified word is a reserved keyword.
            </summary>
            <param name="word"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.ExpressionParserBase.AppendOr">
            <summary>
            Appends an OR expression.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.ExpressionParserBase.AppendAnd">
            <summary>
            Appends an AND expression.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.ExpressionParserBase.AppendSpace">
            <summary>
            Appends an expression separator.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.ExpressionParserBase.OpenGrouping">
            <summary>
            Appends a group opened expression.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.ExpressionParserBase.CloseGrouping">
            <summary>
            Appends a group closed expression.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.ExpressionParserBase.AppendSearchText(System.String)">
            <summary>
            Appends the specified search text to the expression.
            </summary>
            <param name="searchText">The search text to append.</param>
        </member>
        <member name="F:QUANLYQN.Data.ExpressionParserBase.ignoreCase">
            <summary>
            The IgnoreCase member variable.
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.ExpressionParserBase.propertyName">
            <summary>
            The PropertyName member variable.
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.ExpressionParserBase.comparisonType">
            <summary>
            The ComparisonType member variable.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.ExpressionParserBase.IgnoreCase">
            <summary>
            Gets or sets the IgnoreCase property.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.ExpressionParserBase.PropertyName">
            <summary>
            Gets or sets the PropertyName property.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.ExpressionParserBase.ComparisonType">
            <summary>
            Gets or sets the ComparisonType property.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlExpressionParser.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SqlExpressionParser class.
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:QUANLYQN.Data.SqlExpressionParser.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the SqlExpressionParser class.
            </summary>
            <param name="propertyName"></param>
            <param name="ignoreCase"></param>
        </member>
        <member name="M:QUANLYQN.Data.SqlExpressionParser.#ctor(System.String,QUANLYQN.Data.SqlComparisonType)">
            <summary>
            Initializes a new instance of the SqlExpressionParser class.
            </summary>
            <param name="propertyName"></param>
            <param name="comparisonType"></param>
        </member>
        <member name="M:QUANLYQN.Data.SqlExpressionParser.#ctor(System.String,QUANLYQN.Data.SqlComparisonType,System.Boolean)">
            <summary>
            Initializes a new instance of the SqlExpressionParser class.
            </summary>
            <param name="propertyName"></param>
            <param name="comparisonType"></param>
            <param name="ignoreCase"></param>
        </member>
        <member name="M:QUANLYQN.Data.SqlExpressionParser.AppendOr">
            <summary>
            Appends "OR" to the SQL statement.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlExpressionParser.AppendAnd">
            <summary>
            Appends "AND" to the SQL statement.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlExpressionParser.AppendSpace">
            <summary>
            Appends a space to the SQL statement.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlExpressionParser.OpenGrouping">
            <summary>
            Appends a left parentheses to the SQL statement.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlExpressionParser.CloseGrouping">
            <summary>
            Appends a right parentheses to the SQL statement.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlExpressionParser.AppendSearchText(System.String)">
            <summary>
            Appends the specified search text to the SQL statement.
            </summary>
            <param name="searchText">The search text to append.</param>
        </member>
        <member name="M:QUANLYQN.Data.SqlExpressionParser.WrapWithSQL(System.String,System.String,System.Boolean)">
            <summary>
            Converts the search text into a valid search expression.
            </summary>
            <param name="propertyName"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlExpressionParser.Contains(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:QUANLYQN.Data.SqlComparisonType.Contains"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlExpressionParser.StartsWith(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:QUANLYQN.Data.SqlComparisonType.StartsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlExpressionParser.EndsWith(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:QUANLYQN.Data.SqlComparisonType.EndsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlExpressionParser.Like(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:QUANLYQN.Data.SqlComparisonType.Like"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlExpressionParser.Equals(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:QUANLYQN.Data.SqlComparisonType.Equals"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlExpressionParser.Parse(System.String)">
            <summary>
            Parses the specified value into separate search terms.
            </summary>
            <param name="value">The search text.</param>
            <returns>Returns a parsed search phrase.</returns>
        </member>
        <member name="T:QUANLYQN.Data.ParameterizedSqlExpressionParser">
            <summary>
            Parses search text into an expression that can
            be used in a parameterized SQL WHERE clause.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.ParameterizedSqlExpressionParser.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ParameterizedSqlExpressionParser class.
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:QUANLYQN.Data.ParameterizedSqlExpressionParser.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the ParameterizedSqlExpressionParser class.
            </summary>
            <param name="propertyName"></param>
            <param name="ignoreCase"></param>
        </member>
        <member name="M:QUANLYQN.Data.ParameterizedSqlExpressionParser.#ctor(System.String,QUANLYQN.Data.SqlComparisonType)">
            <summary>
            Initializes a new instance of the ParameterizedSqlExpressionParser class.
            </summary>
            <param name="propertyName"></param>
            <param name="comparisonType"></param>
        </member>
        <member name="M:QUANLYQN.Data.ParameterizedSqlExpressionParser.#ctor(System.String,QUANLYQN.Data.SqlComparisonType,System.Boolean)">
            <summary>
            Initializes a new instance of the ParameterizedSqlExpressionParser class.
            </summary>
            <param name="propertyName"></param>
            <param name="comparisonType"></param>
            <param name="ignoreCase"></param>
        </member>
        <member name="M:QUANLYQN.Data.ParameterizedSqlExpressionParser.Contains(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:QUANLYQN.Data.SqlComparisonType.Contains"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.ParameterizedSqlExpressionParser.StartsWith(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:QUANLYQN.Data.SqlComparisonType.StartsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.ParameterizedSqlExpressionParser.EndsWith(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:QUANLYQN.Data.SqlComparisonType.EndsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.ParameterizedSqlExpressionParser.Like(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:QUANLYQN.Data.SqlComparisonType.Like"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.ParameterizedSqlExpressionParser.Equals(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:QUANLYQN.Data.SqlComparisonType.Equals"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="F:QUANLYQN.Data.ParameterizedSqlExpressionParser.parameters">
            <summary>
            The Parameters member variable.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.ParameterizedSqlExpressionParser.Parameters">
            <summary>
            Gets or sets the Parameters property.
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.Bases.LskhenthuongProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:QUANLYQN.Data.Bases.LskhenthuongProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LskhenthuongProviderBaseCore.Delete(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.LskhenthuongKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LskhenthuongProviderBaseCore.Delete(System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idLichsukhenthuong">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LskhenthuongProviderBaseCore.Delete(QUANLYQN.Data.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idLichsukhenthuong">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LskhenthuongProviderBaseCore.GetByIdQuannhan(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_LSKHENTHUONG_QUANNHAN1 key.
            	FK_LSKHENTHUONG_QUANNHAN1 Description: 
            </summary>
            <param name="idQuannhan"></param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lskhenthuong objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LskhenthuongProviderBaseCore.GetByIdQuannhan(QUANLYQN.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_LSKHENTHUONG_QUANNHAN1 key.
            	FK_LSKHENTHUONG_QUANNHAN1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idQuannhan"></param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lskhenthuong objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LskhenthuongProviderBaseCore.GetByIdQuannhan(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_LSKHENTHUONG_QUANNHAN1 key.
            	FK_LSKHENTHUONG_QUANNHAN1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idQuannhan"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lskhenthuong objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LskhenthuongProviderBaseCore.GetByIdQuannhan(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_LSKHENTHUONG_QUANNHAN1 key.
            	fkLskhenthuongQuannhan1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="idQuannhan"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lskhenthuong objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LskhenthuongProviderBaseCore.GetByIdQuannhan(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_LSKHENTHUONG_QUANNHAN1 key.
            	fkLskhenthuongQuannhan1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="idQuannhan"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lskhenthuong objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LskhenthuongProviderBaseCore.GetByIdQuannhan(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_LSKHENTHUONG_QUANNHAN1 key.
            	FK_LSKHENTHUONG_QUANNHAN1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idQuannhan"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lskhenthuong objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LskhenthuongProviderBaseCore.GetByIdHinhthucKhenthuong(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_LSKHENTHUONG_DMHINHTHUCKHENTHUONG1 key.
            	FK_LSKHENTHUONG_DMHINHTHUCKHENTHUONG1 Description: 
            </summary>
            <param name="idHinhthucKhenthuong"></param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lskhenthuong objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LskhenthuongProviderBaseCore.GetByIdHinhthucKhenthuong(QUANLYQN.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_LSKHENTHUONG_DMHINHTHUCKHENTHUONG1 key.
            	FK_LSKHENTHUONG_DMHINHTHUCKHENTHUONG1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idHinhthucKhenthuong"></param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lskhenthuong objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LskhenthuongProviderBaseCore.GetByIdHinhthucKhenthuong(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_LSKHENTHUONG_DMHINHTHUCKHENTHUONG1 key.
            	FK_LSKHENTHUONG_DMHINHTHUCKHENTHUONG1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idHinhthucKhenthuong"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lskhenthuong objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LskhenthuongProviderBaseCore.GetByIdHinhthucKhenthuong(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_LSKHENTHUONG_DMHINHTHUCKHENTHUONG1 key.
            	fkLskhenthuongDmhinhthuckhenthuong1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="idHinhthucKhenthuong"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lskhenthuong objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LskhenthuongProviderBaseCore.GetByIdHinhthucKhenthuong(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_LSKHENTHUONG_DMHINHTHUCKHENTHUONG1 key.
            	fkLskhenthuongDmhinhthuckhenthuong1 Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="idHinhthucKhenthuong"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lskhenthuong objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LskhenthuongProviderBaseCore.GetByIdHinhthucKhenthuong(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_LSKHENTHUONG_DMHINHTHUCKHENTHUONG1 key.
            	FK_LSKHENTHUONG_DMHINHTHUCKHENTHUONG1 Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idHinhthucKhenthuong"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of QUANLYQN.Entities.Lskhenthuong objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LskhenthuongProviderBaseCore.Get(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.LskhenthuongKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LskhenthuongProviderBaseCore.GetByIdLichsukhenthuong(System.Int64)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_LSKHENTHUONG index.
            </summary>
            <param name="idLichsukhenthuong"></param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Lskhenthuong"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LskhenthuongProviderBaseCore.GetByIdLichsukhenthuong(System.Int64,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_LSKHENTHUONG index.
            </summary>
            <param name="idLichsukhenthuong"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Lskhenthuong"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LskhenthuongProviderBaseCore.GetByIdLichsukhenthuong(QUANLYQN.Data.TransactionManager,System.Int64)">
            <summary>
            	Gets rows from the datasource based on the PK_LSKHENTHUONG index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idLichsukhenthuong"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Lskhenthuong"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LskhenthuongProviderBaseCore.GetByIdLichsukhenthuong(QUANLYQN.Data.TransactionManager,System.Int64,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_LSKHENTHUONG index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idLichsukhenthuong"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Lskhenthuong"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LskhenthuongProviderBaseCore.GetByIdLichsukhenthuong(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_LSKHENTHUONG index.
            </summary>
            <param name="idLichsukhenthuong"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Lskhenthuong"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LskhenthuongProviderBaseCore.GetByIdLichsukhenthuong(QUANLYQN.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_LSKHENTHUONG index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idLichsukhenthuong"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Lskhenthuong"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LskhenthuongProviderBaseCore.Fill(System.Data.IDataReader,QUANLYQN.Entities.TList{QUANLYQN.Entities.Lskhenthuong},System.Int32,System.Int32)">
            <summary>
            Fill a QUANLYQN.Entities.TList&lt;Lskhenthuong&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:QUANLYQN.Entities.TList`1"/></returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LskhenthuongProviderBaseCore.RefreshEntity(System.Data.IDataReader,QUANLYQN.Entities.Lskhenthuong)">
            <summary>
            Refreshes the <see cref="T:QUANLYQN.Entities.Lskhenthuong"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.Lskhenthuong"/> object to refresh.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LskhenthuongProviderBaseCore.RefreshEntity(System.Data.DataSet,QUANLYQN.Entities.Lskhenthuong)">
            <summary>
            Refreshes the <see cref="T:QUANLYQN.Entities.Lskhenthuong"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.Lskhenthuong"/> object.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LskhenthuongProviderBaseCore.DeepLoad(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Lskhenthuong,System.Boolean,QUANLYQN.Data.DeepLoadType,System.Type[],QUANLYQN.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:QUANLYQN.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:QUANLYQN.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.Lskhenthuong"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">QUANLYQN.Entities.Lskhenthuong Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LskhenthuongProviderBaseCore.DeepSave(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Lskhenthuong,QUANLYQN.Data.DeepSaveType,System.Type[],QUANLYQN.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the QUANLYQN.Entities.Lskhenthuong object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">QUANLYQN.Entities.Lskhenthuong instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">QUANLYQN.Entities.Lskhenthuong Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:QUANLYQN.Data.Bases.LskhenthuongChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>QUANLYQN.Entities.Lskhenthuong</c>
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.Bases.LskhenthuongChildEntityTypes.Quannhan">
            <summary>
             Composite Property for <c>Quannhan</c> at IdQuannhanSource
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.Bases.LskhenthuongChildEntityTypes.Dmhinhthuckhenthuong">
            <summary>
             Composite Property for <c>Dmhinhthuckhenthuong</c> at IdHinhthucKhenthuongSource
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.Bases.LskhenthuongFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Lskhenthuong"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LskhenthuongFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the LskhenthuongFilterBuilder class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LskhenthuongFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the LskhenthuongFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LskhenthuongFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the LskhenthuongFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.Bases.LskhenthuongParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Lskhenthuong"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LskhenthuongParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the LskhenthuongParameterBuilder class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LskhenthuongParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the LskhenthuongParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LskhenthuongParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the LskhenthuongParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.Bases.DmhinhthuckyluatProviderBase">
            <summary>
             This class is the base class for any <see cref="T:QUANLYQN.Data.Bases.DmhinhthuckyluatProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.Bases.NetTiersProviderCollection">
            <summary>
            Reprensents the strongly typed collection of NetTiersProvider.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.NetTiersProviderCollection.Add(QUANLYQN.Data.Bases.NetTiersProvider)">
            <summary>
            Adds the specified provider.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="P:QUANLYQN.Data.Bases.NetTiersProviderCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:NetTiersProvider"/> with the specified name.
            </summary>
            <value></value>
        </member>
        <member name="T:QUANLYQN.Data.Bases.DmchucvuProviderBase">
            <summary>
             This class is the base class for any <see cref="T:QUANLYQN.Data.Bases.DmchucvuProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.Bases.DmcaphocChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>QUANLYQN.Entities.Dmcaphoc</c>
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.Bases.DmcaphocChildEntityTypes.LstruonglopCollection">
            <summary>
             Collection of <c>Dmcaphoc</c> as OneToMany for LstruonglopCollection
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.Bases.DmcaphocFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Dmcaphoc"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmcaphocFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the DmcaphocFilterBuilder class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmcaphocFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmcaphocFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmcaphocFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmcaphocFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.Bases.DmcaphocParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Dmcaphoc"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmcaphocParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the DmcaphocParameterBuilder class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmcaphocParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmcaphocParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmcaphocParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmcaphocParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.Bases.LskyluatProviderBase">
            <summary>
             This class is the base class for any <see cref="T:QUANLYQN.Data.Bases.LskyluatProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.Bases.DmcapbacProviderBase">
            <summary>
             This class is the base class for any <see cref="T:QUANLYQN.Data.Bases.DmcapbacProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.Bases.AdminGroupmenusProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:QUANLYQN.Data.Bases.AdminGroupmenusProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupmenusProviderBaseCore.Delete(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.AdminGroupmenusKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupmenusProviderBaseCore.Delete(System.String,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idMenu">. Primary Key.</param>
            <param name="idGroup">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupmenusProviderBaseCore.Delete(QUANLYQN.Data.TransactionManager,System.String,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idMenu">. Primary Key.</param>
            <param name="idGroup">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupmenusProviderBaseCore.GetByIdGroup(System.String)">
            <summary>
            	Gets rows from the datasource based on the FK_ADMIN_GROUPMENUS_ADMIN_GROUPS key.
            	FK_ADMIN_GROUPMENUS_ADMIN_GROUPS Description: 
            </summary>
            <param name="idGroup"></param>
            <returns>Returns a typed collection of QUANLYQN.Entities.AdminGroupmenus objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupmenusProviderBaseCore.GetByIdGroup(QUANLYQN.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the FK_ADMIN_GROUPMENUS_ADMIN_GROUPS key.
            	FK_ADMIN_GROUPMENUS_ADMIN_GROUPS Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idGroup"></param>
            <returns>Returns a typed collection of QUANLYQN.Entities.AdminGroupmenus objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupmenusProviderBaseCore.GetByIdGroup(QUANLYQN.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ADMIN_GROUPMENUS_ADMIN_GROUPS key.
            	FK_ADMIN_GROUPMENUS_ADMIN_GROUPS Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idGroup"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.AdminGroupmenus objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupmenusProviderBaseCore.GetByIdGroup(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ADMIN_GROUPMENUS_ADMIN_GROUPS key.
            	fkAdminGroupmenusAdminGroups Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="idGroup"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.AdminGroupmenus objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupmenusProviderBaseCore.GetByIdGroup(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ADMIN_GROUPMENUS_ADMIN_GROUPS key.
            	fkAdminGroupmenusAdminGroups Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="idGroup"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.AdminGroupmenus objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupmenusProviderBaseCore.GetByIdGroup(QUANLYQN.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ADMIN_GROUPMENUS_ADMIN_GROUPS key.
            	FK_ADMIN_GROUPMENUS_ADMIN_GROUPS Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idGroup"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of QUANLYQN.Entities.AdminGroupmenus objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupmenusProviderBaseCore.GetByIdMenu(System.String)">
            <summary>
            	Gets rows from the datasource based on the FK_ADMIN_GROUPMENUS_ADMIN_MENUS key.
            	FK_ADMIN_GROUPMENUS_ADMIN_MENUS Description: 
            </summary>
            <param name="idMenu"></param>
            <returns>Returns a typed collection of QUANLYQN.Entities.AdminGroupmenus objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupmenusProviderBaseCore.GetByIdMenu(QUANLYQN.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the FK_ADMIN_GROUPMENUS_ADMIN_MENUS key.
            	FK_ADMIN_GROUPMENUS_ADMIN_MENUS Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idMenu"></param>
            <returns>Returns a typed collection of QUANLYQN.Entities.AdminGroupmenus objects.</returns>
            <remarks></remarks>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupmenusProviderBaseCore.GetByIdMenu(QUANLYQN.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ADMIN_GROUPMENUS_ADMIN_MENUS key.
            	FK_ADMIN_GROUPMENUS_ADMIN_MENUS Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idMenu"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.AdminGroupmenus objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupmenusProviderBaseCore.GetByIdMenu(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the FK_ADMIN_GROUPMENUS_ADMIN_MENUS key.
            	fkAdminGroupmenusAdminMenus Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="idMenu"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.AdminGroupmenus objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupmenusProviderBaseCore.GetByIdMenu(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ADMIN_GROUPMENUS_ADMIN_MENUS key.
            	fkAdminGroupmenusAdminMenus Description: 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="idMenu"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QUANLYQN.Entities.AdminGroupmenus objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupmenusProviderBaseCore.GetByIdMenu(QUANLYQN.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ADMIN_GROUPMENUS_ADMIN_MENUS key.
            	FK_ADMIN_GROUPMENUS_ADMIN_MENUS Description: 
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idMenu"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns a typed collection of QUANLYQN.Entities.AdminGroupmenus objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupmenusProviderBaseCore.Get(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.AdminGroupmenusKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupmenusProviderBaseCore.GetByIdMenuIdGroup(System.String,System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_ADMIN_GROUPMENUS index.
            </summary>
            <param name="idMenu"></param>
            <param name="idGroup"></param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.AdminGroupmenus"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupmenusProviderBaseCore.GetByIdMenuIdGroup(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ADMIN_GROUPMENUS index.
            </summary>
            <param name="idMenu"></param>
            <param name="idGroup"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.AdminGroupmenus"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupmenusProviderBaseCore.GetByIdMenuIdGroup(QUANLYQN.Data.TransactionManager,System.String,System.String)">
            <summary>
            	Gets rows from the datasource based on the PK_ADMIN_GROUPMENUS index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idMenu"></param>
            <param name="idGroup"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.AdminGroupmenus"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupmenusProviderBaseCore.GetByIdMenuIdGroup(QUANLYQN.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ADMIN_GROUPMENUS index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idMenu"></param>
            <param name="idGroup"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.AdminGroupmenus"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupmenusProviderBaseCore.GetByIdMenuIdGroup(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ADMIN_GROUPMENUS index.
            </summary>
            <param name="idMenu"></param>
            <param name="idGroup"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.AdminGroupmenus"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupmenusProviderBaseCore.GetByIdMenuIdGroup(QUANLYQN.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ADMIN_GROUPMENUS index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idMenu"></param>
            <param name="idGroup"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.AdminGroupmenus"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupmenusProviderBaseCore.Fill(System.Data.IDataReader,QUANLYQN.Entities.TList{QUANLYQN.Entities.AdminGroupmenus},System.Int32,System.Int32)">
            <summary>
            Fill a QUANLYQN.Entities.TList&lt;AdminGroupmenus&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:QUANLYQN.Entities.TList`1"/></returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupmenusProviderBaseCore.RefreshEntity(System.Data.IDataReader,QUANLYQN.Entities.AdminGroupmenus)">
            <summary>
            Refreshes the <see cref="T:QUANLYQN.Entities.AdminGroupmenus"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.AdminGroupmenus"/> object to refresh.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupmenusProviderBaseCore.RefreshEntity(System.Data.DataSet,QUANLYQN.Entities.AdminGroupmenus)">
            <summary>
            Refreshes the <see cref="T:QUANLYQN.Entities.AdminGroupmenus"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.AdminGroupmenus"/> object.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupmenusProviderBaseCore.DeepLoad(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.AdminGroupmenus,System.Boolean,QUANLYQN.Data.DeepLoadType,System.Type[],QUANLYQN.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:QUANLYQN.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:QUANLYQN.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.AdminGroupmenus"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">QUANLYQN.Entities.AdminGroupmenus Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupmenusProviderBaseCore.DeepSave(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.AdminGroupmenus,QUANLYQN.Data.DeepSaveType,System.Type[],QUANLYQN.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the QUANLYQN.Entities.AdminGroupmenus object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">QUANLYQN.Entities.AdminGroupmenus instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">QUANLYQN.Entities.AdminGroupmenus Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:QUANLYQN.Data.Bases.AdminGroupmenusChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>QUANLYQN.Entities.AdminGroupmenus</c>
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.Bases.AdminGroupmenusChildEntityTypes.AdminGroups">
            <summary>
             Composite Property for <c>AdminGroups</c> at IdGroupSource
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.Bases.AdminGroupmenusChildEntityTypes.AdminMenus">
            <summary>
             Composite Property for <c>AdminMenus</c> at IdMenuSource
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.Bases.AdminGroupmenusFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.AdminGroupmenus"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupmenusFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the AdminGroupmenusFilterBuilder class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupmenusFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AdminGroupmenusFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupmenusFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AdminGroupmenusFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.Bases.AdminGroupmenusParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.AdminGroupmenus"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupmenusParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the AdminGroupmenusParameterBuilder class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupmenusParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AdminGroupmenusParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupmenusParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AdminGroupmenusParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.Bases.QuannhanProviderBase">
            <summary>
             This class is the base class for any <see cref="T:QUANLYQN.Data.Bases.QuannhanProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.Bases.LstruonglopChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>QUANLYQN.Entities.Lstruonglop</c>
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.Bases.LstruonglopChildEntityTypes.Dmtruong">
            <summary>
             Composite Property for <c>Dmtruong</c> at IdTruongSource
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.Bases.LstruonglopChildEntityTypes.Dmcaphoc">
            <summary>
             Composite Property for <c>Dmcaphoc</c> at IdCaphocSource
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.Bases.LstruonglopChildEntityTypes.Quannhan">
            <summary>
             Composite Property for <c>Quannhan</c> at IdQuannhanSource
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.Bases.LstruonglopFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Lstruonglop"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LstruonglopFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the LstruonglopFilterBuilder class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LstruonglopFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the LstruonglopFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LstruonglopFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the LstruonglopFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.Bases.LstruonglopParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Lstruonglop"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LstruonglopParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the LstruonglopParameterBuilder class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LstruonglopParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the LstruonglopParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LstruonglopParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the LstruonglopParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.Bases.LscapbacChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>QUANLYQN.Entities.Lscapbac</c>
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.Bases.LscapbacChildEntityTypes.Quannhan">
            <summary>
             Composite Property for <c>Quannhan</c> at IdQuannhanSource
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.Bases.LscapbacChildEntityTypes.Dmcapbac">
            <summary>
             Composite Property for <c>Dmcapbac</c> at IdCapbacSource
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.Bases.LscapbacFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Lscapbac"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LscapbacFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the LscapbacFilterBuilder class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LscapbacFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the LscapbacFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LscapbacFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the LscapbacFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.Bases.LscapbacParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Lscapbac"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LscapbacParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the LscapbacParameterBuilder class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LscapbacParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the LscapbacParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LscapbacParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the LscapbacParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.Bases.AdminUsersProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:QUANLYQN.Data.Bases.AdminUsersProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminUsersProviderBaseCore.GetByIdGroupFromAdminGroupusers(System.String)">
            <summary>
            	Gets ADMIN_USERS objects from the datasource by ID_GROUP in the
            	ADMIN_GROUPUSERS table. Table ADMIN_USERS is related to table ADMIN_GROUPS
            	through the (M:N) relationship defined in the ADMIN_GROUPUSERS table.
            </summary>
            <param name="idGroup"></param>
            <returns>Returns a typed collection of AdminUsers objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminUsersProviderBaseCore.GetByIdGroupFromAdminGroupusers(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets QUANLYQN.Entities.AdminUsers objects from the datasource by ID_GROUP in the
            	ADMIN_GROUPUSERS table. Table ADMIN_USERS is related to table ADMIN_GROUPS
            	through the (M:N) relationship defined in the ADMIN_GROUPUSERS table.
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="idGroup"></param>
            <remarks></remarks>
            <returns>Returns a TList of AdminUsers objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminUsersProviderBaseCore.GetByIdGroupFromAdminGroupusers(QUANLYQN.Data.TransactionManager,System.String)">
            <summary>
            	Gets AdminUsers objects from the datasource by ID_GROUP in the
            	ADMIN_GROUPUSERS table. Table ADMIN_USERS is related to table ADMIN_GROUPS
            	through the (M:N) relationship defined in the ADMIN_GROUPUSERS table.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idGroup"></param>
            <remarks></remarks>
            <returns>Returns a typed collection of ADMIN_USERS objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminUsersProviderBaseCore.GetByIdGroupFromAdminGroupusers(QUANLYQN.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets AdminUsers objects from the datasource by ID_GROUP in the
            	ADMIN_GROUPUSERS table. Table ADMIN_USERS is related to table ADMIN_GROUPS
            	through the (M:N) relationship defined in the ADMIN_GROUPUSERS table.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idGroup"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ADMIN_USERS objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminUsersProviderBaseCore.GetByIdGroupFromAdminGroupusers(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets AdminUsers objects from the datasource by ID_GROUP in the
            	ADMIN_GROUPUSERS table. Table ADMIN_USERS is related to table ADMIN_GROUPS
            	through the (M:N) relationship defined in the ADMIN_GROUPUSERS table.
            </summary>
            <param name="idGroup"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
             <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ADMIN_USERS objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminUsersProviderBaseCore.GetByIdGroupFromAdminGroupusers(QUANLYQN.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets ADMIN_USERS objects from the datasource by ID_GROUP in the
            	ADMIN_GROUPUSERS table. Table ADMIN_USERS is related to table ADMIN_GROUPS
            	through the (M:N) relationship defined in the ADMIN_GROUPUSERS table.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <param name="idGroup"></param>
            <remarks></remarks>
            <returns>Returns a TList of AdminUsers objects.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminUsersProviderBaseCore.Delete(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.AdminUsersKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminUsersProviderBaseCore.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idUser">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminUsersProviderBaseCore.Delete(QUANLYQN.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idUser">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminUsersProviderBaseCore.Get(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.AdminUsersKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminUsersProviderBaseCore.GetByIdUser(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_ADMIN_USERS index.
            </summary>
            <param name="idUser"></param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.AdminUsers"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminUsersProviderBaseCore.GetByIdUser(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ADMIN_USERS index.
            </summary>
            <param name="idUser"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.AdminUsers"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminUsersProviderBaseCore.GetByIdUser(QUANLYQN.Data.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the PK_ADMIN_USERS index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idUser"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.AdminUsers"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminUsersProviderBaseCore.GetByIdUser(QUANLYQN.Data.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_ADMIN_USERS index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idUser"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.AdminUsers"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminUsersProviderBaseCore.GetByIdUser(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ADMIN_USERS index.
            </summary>
            <param name="idUser"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.AdminUsers"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminUsersProviderBaseCore.GetByIdUser(QUANLYQN.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ADMIN_USERS index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idUser"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.AdminUsers"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminUsersProviderBaseCore.Fill(System.Data.IDataReader,QUANLYQN.Entities.TList{QUANLYQN.Entities.AdminUsers},System.Int32,System.Int32)">
            <summary>
            Fill a QUANLYQN.Entities.TList&lt;AdminUsers&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:QUANLYQN.Entities.TList`1"/></returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminUsersProviderBaseCore.RefreshEntity(System.Data.IDataReader,QUANLYQN.Entities.AdminUsers)">
            <summary>
            Refreshes the <see cref="T:QUANLYQN.Entities.AdminUsers"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.AdminUsers"/> object to refresh.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminUsersProviderBaseCore.RefreshEntity(System.Data.DataSet,QUANLYQN.Entities.AdminUsers)">
            <summary>
            Refreshes the <see cref="T:QUANLYQN.Entities.AdminUsers"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.AdminUsers"/> object.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminUsersProviderBaseCore.DeepLoad(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.AdminUsers,System.Boolean,QUANLYQN.Data.DeepLoadType,System.Type[],QUANLYQN.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:QUANLYQN.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:QUANLYQN.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.AdminUsers"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">QUANLYQN.Entities.AdminUsers Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminUsersProviderBaseCore.DeepSave(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.AdminUsers,QUANLYQN.Data.DeepSaveType,System.Type[],QUANLYQN.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the QUANLYQN.Entities.AdminUsers object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">QUANLYQN.Entities.AdminUsers instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">QUANLYQN.Entities.AdminUsers Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:QUANLYQN.Data.Bases.AdminUsersChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>QUANLYQN.Entities.AdminUsers</c>
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.Bases.AdminUsersChildEntityTypes.AdminGroupsCollection_From_AdminGroupusers">
            <summary>
             Collection of <c>AdminUsers</c> as ManyToMany for AdminGroupsCollection_From_AdminGroupusers
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.Bases.AdminUsersChildEntityTypes.AdminGroupusersCollection">
            <summary>
             Collection of <c>AdminUsers</c> as OneToMany for AdminGroupusersCollection
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.Bases.AdminUsersFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.AdminUsers"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminUsersFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the AdminUsersFilterBuilder class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminUsersFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AdminUsersFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminUsersFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AdminUsersFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.Bases.AdminUsersParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.AdminUsers"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminUsersParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the AdminUsersParameterBuilder class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminUsersParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AdminUsersParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminUsersParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AdminUsersParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.Bases.AdminMenusProviderBase">
            <summary>
             This class is the base class for any <see cref="T:QUANLYQN.Data.Bases.AdminMenusProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.Bases.DmdonviProviderBase">
            <summary>
             This class is the base class for any <see cref="T:QUANLYQN.Data.Bases.DmdonviProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.Bases.AdminUsersProviderBase">
            <summary>
             This class is the base class for any <see cref="T:QUANLYQN.Data.Bases.AdminUsersProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.DeepLoadType">
            <summary>
            DeepLoad options for deep loading entities
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.DeepLoadType.IncludeChildren">
            <summary>
            Will Include a child property collection 1 Level Deep
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.DeepLoadType.ExcludeChildren">
            <summary>
            Will Exclude a child property collection
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.DeepLoadType.Ignore">
            <summary>
            Will ignore the request and return the entity.
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.DeepSaveType">
            <summary>
            DeepSave options for deep saving entities
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.DeepSaveType.IncludeChildren">
            <summary>Will Include a child property collection</summary>
        </member>
        <member name="F:QUANLYQN.Data.DeepSaveType.ExcludeChildren">
            <summary>Will Exclude a child property collection</summary>
        </member>
        <member name="F:QUANLYQN.Data.DeepSaveType.Ignore">
            <summary>Will ignore the request and return the entity.</summary>
        </member>
        <member name="T:QUANLYQN.Data.Utility">
            <summary>
            Contains some helper function for SQL.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Utility.GetDefaultByType(System.Data.DbType)">
            <summary>
            Get a default value for a given data type
            </summary>
            <param name="dataType">Data type for which to get the default value</param>
            <returns>An object of the default value.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Utility.GetDataValue(System.Data.IDataParameter)">
            <summary>
            Get Value or Default Value from an IDataParamater
            Based on DbType
            </summary>
            <param name="p">The IDataParameter instance type is used to determine the default value.</param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.Utility.DefaultToDBNull(System.Object,System.Data.DbType)">
            <summary>
            Checks to see if the Default Value has been set to the parameter.
            If it's the default value, then create.
            </summary>
            <param name="val">The value we want to check.</param>
            <param name="dbtype">The DbType from wich we take the default value.</param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.Utility.GetParameterValue``1(System.Data.IDataParameter)">
            <summary>
            Generic method to return the value of a nullable parameter
            </summary>
            <typeparam name="T">Type of value to return</typeparam>
            <param name="parameter">Parameter from which to extract the value</param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.Utility.ConvertDataReaderToDataSet(System.Data.IDataReader)">
            <summary>
            Converts a IDataReader to a DataSet.  For use when a custom stored procedure returns an <see cref="T:System.Data.IDataReader"/>, it will 
            convert all result sets returned as a DataSet.
            </summary>
            <param name="reader">The reader to convert</param>
            <returns>A dataset with one table per result in the reader</returns>
        </member>
        <member name="M:QUANLYQN.Data.Utility.DetectSqlInjection(System.String)">
            <summary>
            A helper method to attempt to discover known SqlInjection attacks.  
            For use when using one of the flexible non-parameterized access methods, such as GetPaged()
            </summary>
            <param name="whereClause">string of the whereClause to check</param>
            <returns>true if found, false if not found </returns>
        </member>
        <member name="M:QUANLYQN.Data.Utility.DetectSqlInjection(System.String,System.String)">
            <summary>
            A helper method to attempt to discover known SqlInjection attacks.  
            For use when using one of the flexible non-parameterized access methods, such as GetPaged()
            </summary>
            <param name="whereClause">string of the whereClause to check</param>
            <param name="orderBy">string of the orderBy clause to check</param>
            <returns>true if found, false if not found </returns>
        </member>
        <member name="M:QUANLYQN.Data.Utility.ParseSortExpression(System.Type,System.String)">
            <summary>
            Parses the supplied sort expression parameter to verify that it
            matches the specifed column name enumeration.
            </summary>
            <param name="columnEnum"></param>
            <param name="sortExpression"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.Utility.ExecuteReader(QUANLYQN.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the <paramref name="dbCommand"/> and returns an <see cref="T:System.Data.IDataReader"/> through which the result can be read. 
            It is the responsibility of the caller to close the connection and reader when finished. 
            </summary>
            <param name="transactionManager">The transaction to execute the command within.</param>
            <param name="dbCommand">The command that contains the query to execute.</param>
            <returns>An <see cref="T:System.Data.IDataReader"/> object.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.Utility.ExecuteReader(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbCommand)">
            <summary>
            Executes the <paramref name="dbCommand"/> and returns an <see cref="T:System.Data.IDataReader"/> through which the result can be read. 
            It is the responsibility of the caller to close the connection and reader when finished. 
            </summary>
            <param name="database">The database to execute the command within.</param>
            <param name="dbCommand">The command that contains the query to execute.</param>
            <returns>An <see cref="T:System.Data.IDataReader"/> object.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.Utility.ExecuteNonQuery(QUANLYQN.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the <paramref name="dbCommand"/> and returns the number of rows affected. 
            </summary>
            <param name="transactionManager">The transaction to execute the command within.</param>
            <param name="dbCommand">The command that contains the query to execute.</param>
            <returns>The number of rows affected.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.Utility.ExecuteNonQuery(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbCommand)">
            <summary>
            Executes the <paramref name="dbCommand"/> and returns the number of rows affected. 
            </summary>
            <param name="database">The database to execute the command within.</param>
            <param name="dbCommand">The command that contains the query to execute.</param>
            <returns>The number of rows affected.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.Utility.ExecuteDataSet(QUANLYQN.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the <paramref name="dbCommand"/> and returns the results in a new <see cref="T:System.Data.DataSet"/>. 
            </summary>
            <param name="transactionManager">The transaction to execute the command within.</param>
            <param name="dbCommand">The command that contains the query to execute.</param>
            <returns>A <see cref="T:System.Data.DataSet"/> containing the results of the command.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.Utility.ExecuteDataSet(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbCommand)">
            <summary>
            Executes the <paramref name="dbCommand"/> and returns the results in a new <see cref="T:System.Data.DataSet"/>. 
            </summary>
            <param name="database">The database to execute the command within.</param>
            <param name="dbCommand">The command that contains the query to execute.</param>
            <returns>A <see cref="T:System.Data.DataSet"/> containing the results of the command.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.Utility.ExecuteScalar(QUANLYQN.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the <paramref name="dbCommand"/> and returns the scalar object. 
            </summary>
            <param name="transactionManager">The transaction to execute the command within.</param>
            <param name="dbCommand">The command that contains the query to execute.</param>
            <returns>The number of rows affected.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:QUANLYQN.Data.Utility.ExecuteScalar(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbCommand)">
            <summary>
            Executes the <paramref name="dbCommand"/> and returnsthe scalar object. 
            </summary>
            <param name="database">The database to execute the command within.</param>
            <param name="dbCommand">The command that contains the query to execute.</param>
            <returns>A <see cref="T:System.Data.DataSet"/> containing the results of the command.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:QUANLYQN.Data.Bases.DmhinhthuckhenthuongProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:QUANLYQN.Data.Bases.DmhinhthuckhenthuongProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmhinhthuckhenthuongProviderBaseCore.Delete(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.DmhinhthuckhenthuongKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmhinhthuckhenthuongProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idHinhthucKhenthuong">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmhinhthuckhenthuongProviderBaseCore.Delete(QUANLYQN.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idHinhthucKhenthuong">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmhinhthuckhenthuongProviderBaseCore.Get(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.DmhinhthuckhenthuongKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmhinhthuckhenthuongProviderBaseCore.GetByIdHinhthucKhenthuong(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_DMHINHTHUCKHENTHUONG index.
            </summary>
            <param name="idHinhthucKhenthuong"></param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmhinhthuckhenthuong"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmhinhthuckhenthuongProviderBaseCore.GetByIdHinhthucKhenthuong(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_DMHINHTHUCKHENTHUONG index.
            </summary>
            <param name="idHinhthucKhenthuong"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmhinhthuckhenthuong"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmhinhthuckhenthuongProviderBaseCore.GetByIdHinhthucKhenthuong(QUANLYQN.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_DMHINHTHUCKHENTHUONG index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idHinhthucKhenthuong"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmhinhthuckhenthuong"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmhinhthuckhenthuongProviderBaseCore.GetByIdHinhthucKhenthuong(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_DMHINHTHUCKHENTHUONG index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idHinhthucKhenthuong"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmhinhthuckhenthuong"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmhinhthuckhenthuongProviderBaseCore.GetByIdHinhthucKhenthuong(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_DMHINHTHUCKHENTHUONG index.
            </summary>
            <param name="idHinhthucKhenthuong"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmhinhthuckhenthuong"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmhinhthuckhenthuongProviderBaseCore.GetByIdHinhthucKhenthuong(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_DMHINHTHUCKHENTHUONG index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idHinhthucKhenthuong"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmhinhthuckhenthuong"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmhinhthuckhenthuongProviderBaseCore.Fill(System.Data.IDataReader,QUANLYQN.Entities.TList{QUANLYQN.Entities.Dmhinhthuckhenthuong},System.Int32,System.Int32)">
            <summary>
            Fill a QUANLYQN.Entities.TList&lt;Dmhinhthuckhenthuong&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:QUANLYQN.Entities.TList`1"/></returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmhinhthuckhenthuongProviderBaseCore.RefreshEntity(System.Data.IDataReader,QUANLYQN.Entities.Dmhinhthuckhenthuong)">
            <summary>
            Refreshes the <see cref="T:QUANLYQN.Entities.Dmhinhthuckhenthuong"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.Dmhinhthuckhenthuong"/> object to refresh.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmhinhthuckhenthuongProviderBaseCore.RefreshEntity(System.Data.DataSet,QUANLYQN.Entities.Dmhinhthuckhenthuong)">
            <summary>
            Refreshes the <see cref="T:QUANLYQN.Entities.Dmhinhthuckhenthuong"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.Dmhinhthuckhenthuong"/> object.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmhinhthuckhenthuongProviderBaseCore.DeepLoad(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Dmhinhthuckhenthuong,System.Boolean,QUANLYQN.Data.DeepLoadType,System.Type[],QUANLYQN.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:QUANLYQN.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:QUANLYQN.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.Dmhinhthuckhenthuong"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">QUANLYQN.Entities.Dmhinhthuckhenthuong Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmhinhthuckhenthuongProviderBaseCore.DeepSave(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Dmhinhthuckhenthuong,QUANLYQN.Data.DeepSaveType,System.Type[],QUANLYQN.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the QUANLYQN.Entities.Dmhinhthuckhenthuong object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">QUANLYQN.Entities.Dmhinhthuckhenthuong instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">QUANLYQN.Entities.Dmhinhthuckhenthuong Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:QUANLYQN.Data.Bases.DmhinhthuckhenthuongChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>QUANLYQN.Entities.Dmhinhthuckhenthuong</c>
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.Bases.DmhinhthuckhenthuongChildEntityTypes.LskhenthuongCollection">
            <summary>
             Collection of <c>Dmhinhthuckhenthuong</c> as OneToMany for LskhenthuongCollection
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.Bases.DmhinhthuckhenthuongFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Dmhinhthuckhenthuong"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmhinhthuckhenthuongFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the DmhinhthuckhenthuongFilterBuilder class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmhinhthuckhenthuongFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmhinhthuckhenthuongFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmhinhthuckhenthuongFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmhinhthuckhenthuongFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.Bases.DmhinhthuckhenthuongParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Dmhinhthuckhenthuong"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmhinhthuckhenthuongParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the DmhinhthuckhenthuongParameterBuilder class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmhinhthuckhenthuongParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmhinhthuckhenthuongParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmhinhthuckhenthuongParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmhinhthuckhenthuongParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.Bases.DmgioitinhProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:QUANLYQN.Data.Bases.DmgioitinhProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmgioitinhProviderBaseCore.Delete(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.DmgioitinhKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmgioitinhProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="idGioitinh">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmgioitinhProviderBaseCore.Delete(QUANLYQN.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idGioitinh">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmgioitinhProviderBaseCore.Get(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.DmgioitinhKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:QUANLYQN.Data.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmgioitinhProviderBaseCore.GetByIdGioitinh(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_DMGIOITINH index.
            </summary>
            <param name="idGioitinh"></param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmgioitinh"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmgioitinhProviderBaseCore.GetByIdGioitinh(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_DMGIOITINH index.
            </summary>
            <param name="idGioitinh"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmgioitinh"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmgioitinhProviderBaseCore.GetByIdGioitinh(QUANLYQN.Data.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_DMGIOITINH index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idGioitinh"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmgioitinh"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmgioitinhProviderBaseCore.GetByIdGioitinh(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_DMGIOITINH index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idGioitinh"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmgioitinh"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmgioitinhProviderBaseCore.GetByIdGioitinh(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_DMGIOITINH index.
            </summary>
            <param name="idGioitinh"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmgioitinh"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmgioitinhProviderBaseCore.GetByIdGioitinh(QUANLYQN.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_DMGIOITINH index.
            </summary>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="idGioitinh"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:QUANLYQN.Entities.Dmgioitinh"/> class.</returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmgioitinhProviderBaseCore.Fill(System.Data.IDataReader,QUANLYQN.Entities.TList{QUANLYQN.Entities.Dmgioitinh},System.Int32,System.Int32)">
            <summary>
            Fill a QUANLYQN.Entities.TList&lt;Dmgioitinh&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:QUANLYQN.Entities.TList`1"/></returns>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmgioitinhProviderBaseCore.RefreshEntity(System.Data.IDataReader,QUANLYQN.Entities.Dmgioitinh)">
            <summary>
            Refreshes the <see cref="T:QUANLYQN.Entities.Dmgioitinh"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.Dmgioitinh"/> object to refresh.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmgioitinhProviderBaseCore.RefreshEntity(System.Data.DataSet,QUANLYQN.Entities.Dmgioitinh)">
            <summary>
            Refreshes the <see cref="T:QUANLYQN.Entities.Dmgioitinh"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.Dmgioitinh"/> object.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmgioitinhProviderBaseCore.DeepLoad(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Dmgioitinh,System.Boolean,QUANLYQN.Data.DeepLoadType,System.Type[],QUANLYQN.Data.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:QUANLYQN.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:QUANLYQN.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:QUANLYQN.Data.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:QUANLYQN.Entities.Dmgioitinh"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">QUANLYQN.Entities.Dmgioitinh Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmgioitinhProviderBaseCore.DeepSave(QUANLYQN.Data.TransactionManager,QUANLYQN.Entities.Dmgioitinh,QUANLYQN.Data.DeepSaveType,System.Type[],QUANLYQN.Data.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the QUANLYQN.Entities.Dmgioitinh object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">QUANLYQN.Entities.Dmgioitinh instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">QUANLYQN.Entities.Dmgioitinh Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:QUANLYQN.Data.Bases.DmgioitinhChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>QUANLYQN.Entities.Dmgioitinh</c>
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.Bases.DmgioitinhChildEntityTypes.QuannhanCollection">
            <summary>
             Collection of <c>Dmgioitinh</c> as OneToMany for QuannhanCollection
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.Bases.DmgioitinhFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Dmgioitinh"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmgioitinhFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the DmgioitinhFilterBuilder class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmgioitinhFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmgioitinhFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmgioitinhFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmgioitinhFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.Bases.DmgioitinhParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Dmgioitinh"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmgioitinhParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the DmgioitinhParameterBuilder class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmgioitinhParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmgioitinhParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmgioitinhParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmgioitinhParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.StringBuilderExpression">
            <summary>
            Represents a SQL filter builder expression enumeration.
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.StringBuilderExpression.Append">
            <summary>
            Append
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.StringBuilderExpression.AppendEquals">
            <summary>
            AppendEquals
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.StringBuilderExpression.AppendNotEquals">
            <summary>
            AppendNotEquals
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.StringBuilderExpression.AppendIn">
            <summary>
            AppendIn
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.StringBuilderExpression.AppendNotIn">
            <summary>
            AppendNotIn
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.StringBuilderExpression.AppendInQuery">
            <summary>
            AppendInQuery
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.StringBuilderExpression.AppendNotInQuery">
            <summary>
            AppendNotInQuery
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.StringBuilderExpression.AppendRange">
            <summary>
            AppendRange
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.StringBuilderExpression.AppendIsNull">
            <summary>
            AppendIsNull
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.StringBuilderExpression.AppendIsNotNull">
            <summary>
            
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.StringBuilderExpression.AppendGreaterThan">
            <summary>
            AppendGreaterThan
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.StringBuilderExpression.AppendGreaterThanOrEqual">
            <summary>
            AppendGreaterThanOrEqual
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.StringBuilderExpression.AppendLessThan">
            <summary>
            AppendLessThan
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.StringBuilderExpression.AppendLessThanOrEqual">
            <summary>
            AppendLessThanOrEqual
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.SqlFilterParameterCollection">
            <summary>
            A collection of <see cref="T:QUANLYQN.Data.SqlFilterParameter"/> objects.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlFilterParameterCollection.SetCurrentColumn(System.Object)">
            <summary>
            Sets the CurrentColumn property.
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:QUANLYQN.Data.SqlFilterParameterCollection.GetParameter(System.String)">
            <summary>
            Gets the next parameter name for the specified value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="F:QUANLYQN.Data.SqlFilterParameterCollection.currentColumn">
            <summary>
            The CurrentColumn member variable.
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.SqlFilterParameterCollection.filterExpression">
            <summary>
            The FilterExpression member variable.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlFilterParameterCollection.QUANLYQN#Data#IFilterParameterCollection#GetParameters">
            <summary>
            Gets a list of sql parameters for the filter 
            </summary>
            <returns></returns>
        </member>
        <member name="P:QUANLYQN.Data.SqlFilterParameterCollection.CurrentColumn">
            <summary>
            Gets the CurrentColumn property.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.SqlFilterParameterCollection.FilterExpression">
            <summary>
            Gets or sets the FilterExpression property.
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.SqlFilterParameter">
            <summary>
            Represents the information needed for a database command parameter.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlFilterParameter.#ctor(System.Enum,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the SqlFilterParameter class.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="index"></param>
        </member>
        <member name="F:QUANLYQN.Data.SqlFilterParameter.column">
            <summary>
            The Column member variable.
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.SqlFilterParameter.parameterValue">
            <summary>
            The Value member variable.
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.SqlFilterParameter.parameterIndex">
            <summary>
            The Index member variable.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlFilterParameter.GetValue">
            <summary>
            Gets the current value converted to the appropriate <see cref="T:System.Type"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:QUANLYQN.Data.SqlFilterParameter.Column">
            <summary>
            Gets or sets the Column property.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.SqlFilterParameter.Value">
            <summary>
            Gets or sets the Value property.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.SqlFilterParameter.Index">
            <summary>
            Gets the parameter index.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.SqlFilterParameter.Name">
            <summary>
            Gets the parameter name.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.SqlFilterParameter.DbType">
            <summary>
            Gets the <see cref="T:System.Data.SqlDbType"/> for
            the current entity column enumeration value.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.SqlFilterParameter.SystemType">
            <summary>
            Gets the <see cref="T:System.Type"/> for
            the current entity column enumeration value.
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.Bases.NetTiersServiceSection">
            <summary>
            The class that hold the configuration section for the NetTiers Service.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.Bases.NetTiersServiceSection.Providers">
            <summary>
            Gets the providers.
            </summary>
            <value>The providers.</value>
        </member>
        <member name="P:QUANLYQN.Data.Bases.NetTiersServiceSection.DefaultProvider">
            <summary>
            Gets or sets the default provider.
            </summary>
            <value>The default provider.</value>
        </member>
        <member name="T:QUANLYQN.Data.Bases.DmhinhthuckhenthuongProviderBase">
            <summary>
             This class is the base class for any <see cref="T:QUANLYQN.Data.Bases.DmhinhthuckhenthuongProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.DataRepository">
            <summary>
            This class represents the Data source repository and gives access to all the underlying providers.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.DataRepository.LoadProvider(QUANLYQN.Data.Bases.NetTiersProvider)">
            <summary>
            Enables the DataRepository to programatically create and 
            pass in a <c>NetTiersProvider</c> during runtime.
            </summary>
            <param name="provider">An instatiated NetTiersProvider.</param>
        </member>
        <member name="M:QUANLYQN.Data.DataRepository.LoadProvider(QUANLYQN.Data.Bases.NetTiersProvider,System.Boolean)">
            <summary>
            Enables the DataRepository to programatically create and 
            pass in a <c>NetTiersProvider</c> during runtime.
            </summary>
            <param name="provider">An instatiated NetTiersProvider.</param>
            <param name="setAsDefault">ability to set any valid provider as the default provider for the DataRepository.</param>
        </member>
        <member name="M:QUANLYQN.Data.DataRepository.LoadProviders">
            <summary>
             Configuration based provider loading, will load the providers on first call.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.DataRepository.CreateTransaction">
            <summary>
            Creates a new <c cref="T:QUANLYQN.Data.TransactionManager"/> instance from the current datasource.
            </summary>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.DataRepository.AddConnection(System.String,System.String)">
            <summary>
            Adds the specified connection string to the map of connection strings.
            </summary>
            <param name="connectionStringName">The connection string name.</param>
            <param name="connectionString">The provider specific connection information.</param>
        </member>
        <member name="P:QUANLYQN.Data.DataRepository.Provider">
            <summary>
            Gets the provider.
            </summary>
            <value>The provider.</value>
        </member>
        <member name="P:QUANLYQN.Data.DataRepository.Providers">
            <summary>
            Gets the provider collection.
            </summary>
            <value>The providers.</value>
        </member>
        <member name="P:QUANLYQN.Data.DataRepository.NetTiersSection">
            <summary>
            Gets a reference to the configured NetTiersServiceSection object.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.DataRepository.Configuration">
            <summary>
            Gets a reference to the application configuration object.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.DataRepository.ConnectionStrings">
            <summary>
            Gets a reference to the ConnectionStringSettings collection.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.DataRepository.Connections">
            <summary>
            Gets the dictionary of connection providers.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.DataRepository.DmlopProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:QUANLYQN.Entities.Dmlop"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.DataRepository.AdminGroupmenusProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:QUANLYQN.Entities.AdminGroupmenus"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.DataRepository.DmloaiquannhanProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:QUANLYQN.Entities.Dmloaiquannhan"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.DataRepository.DmtongiaoProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:QUANLYQN.Entities.Dmtongiao"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.DataRepository.DmhinhthuckyluatProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:QUANLYQN.Entities.Dmhinhthuckyluat"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.DataRepository.DmtruongProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:QUANLYQN.Entities.Dmtruong"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.DataRepository.LstruonglopProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:QUANLYQN.Entities.Lstruonglop"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.DataRepository.LscapbacProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:QUANLYQN.Entities.Lscapbac"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.DataRepository.LskyluatProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:QUANLYQN.Entities.Lskyluat"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.DataRepository.DmhinhthuckhenthuongProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:QUANLYQN.Entities.Dmhinhthuckhenthuong"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.DataRepository.LschucvuProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:QUANLYQN.Entities.Lschucvu"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.DataRepository.AdminUsersProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:QUANLYQN.Entities.AdminUsers"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.DataRepository.AdminGroupsProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:QUANLYQN.Entities.AdminGroups"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.DataRepository.AdminMenusProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:QUANLYQN.Entities.AdminMenus"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.DataRepository.DmgioitinhProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:QUANLYQN.Entities.Dmgioitinh"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.DataRepository.AdminGroupusersProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:QUANLYQN.Entities.AdminGroupusers"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.DataRepository.DmcaphocProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:QUANLYQN.Entities.Dmcaphoc"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.DataRepository.DmdonviProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:QUANLYQN.Entities.Dmdonvi"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.DataRepository.DmdantocProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:QUANLYQN.Entities.Dmdantoc"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.DataRepository.DmchucvuProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:QUANLYQN.Entities.Dmchucvu"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.DataRepository.DmcapbacProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:QUANLYQN.Entities.Dmcapbac"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.DataRepository.QuannhanProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:QUANLYQN.Entities.Quannhan"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.DataRepository.LskhenthuongProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:QUANLYQN.Entities.Lskhenthuong"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.DataRepository.ConnectionProvider">
            <summary>
            Provides ability to switch connection string at runtime.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.DataRepository.ConnectionProvider.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ConnectionProvider class.
            </summary>
            <param name="connectionStringName">The connection string name.</param>
        </member>
        <member name="M:QUANLYQN.Data.DataRepository.ConnectionProvider.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the ConnectionProvider class.
            </summary>
            <param name="connectionStringName">The connection string name.</param>
            <param name="connectionString">The provider specific connection information.</param>
        </member>
        <member name="M:QUANLYQN.Data.DataRepository.ConnectionProvider.LoadProviders">
            <summary>
            Instantiates the configured providers based on the supplied connection string.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.DataRepository.ConnectionProvider.Provider">
            <summary>
            Gets the provider.
            </summary>
        </member>
        <member name="P:QUANLYQN.Data.DataRepository.ConnectionProvider.Providers">
            <summary>
            Gets the provider collection.
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.DmlopFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Dmlop"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.DmlopFilters.#ctor">
            <summary>
            Initializes a new instance of the DmlopFilters class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.DmlopFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmlopFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.DmlopFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmlopFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.DmlopQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.Bases.DmlopParameterBuilder"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Dmlop"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.DmlopQuery.#ctor">
            <summary>
            Initializes a new instance of the DmlopQuery class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.DmlopQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmlopQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.DmlopQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmlopQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.AdminGroupmenusFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.AdminGroupmenus"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.AdminGroupmenusFilters.#ctor">
            <summary>
            Initializes a new instance of the AdminGroupmenusFilters class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.AdminGroupmenusFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AdminGroupmenusFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.AdminGroupmenusFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AdminGroupmenusFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.AdminGroupmenusQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.Bases.AdminGroupmenusParameterBuilder"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.AdminGroupmenus"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.AdminGroupmenusQuery.#ctor">
            <summary>
            Initializes a new instance of the AdminGroupmenusQuery class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.AdminGroupmenusQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AdminGroupmenusQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.AdminGroupmenusQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AdminGroupmenusQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.DmloaiquannhanFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Dmloaiquannhan"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.DmloaiquannhanFilters.#ctor">
            <summary>
            Initializes a new instance of the DmloaiquannhanFilters class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.DmloaiquannhanFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmloaiquannhanFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.DmloaiquannhanFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmloaiquannhanFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.DmloaiquannhanQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.Bases.DmloaiquannhanParameterBuilder"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Dmloaiquannhan"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.DmloaiquannhanQuery.#ctor">
            <summary>
            Initializes a new instance of the DmloaiquannhanQuery class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.DmloaiquannhanQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmloaiquannhanQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.DmloaiquannhanQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmloaiquannhanQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.DmtongiaoFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Dmtongiao"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.DmtongiaoFilters.#ctor">
            <summary>
            Initializes a new instance of the DmtongiaoFilters class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.DmtongiaoFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmtongiaoFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.DmtongiaoFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmtongiaoFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.DmtongiaoQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.Bases.DmtongiaoParameterBuilder"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Dmtongiao"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.DmtongiaoQuery.#ctor">
            <summary>
            Initializes a new instance of the DmtongiaoQuery class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.DmtongiaoQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmtongiaoQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.DmtongiaoQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmtongiaoQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.DmhinhthuckyluatFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Dmhinhthuckyluat"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.DmhinhthuckyluatFilters.#ctor">
            <summary>
            Initializes a new instance of the DmhinhthuckyluatFilters class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.DmhinhthuckyluatFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmhinhthuckyluatFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.DmhinhthuckyluatFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmhinhthuckyluatFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.DmhinhthuckyluatQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.Bases.DmhinhthuckyluatParameterBuilder"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Dmhinhthuckyluat"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.DmhinhthuckyluatQuery.#ctor">
            <summary>
            Initializes a new instance of the DmhinhthuckyluatQuery class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.DmhinhthuckyluatQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmhinhthuckyluatQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.DmhinhthuckyluatQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmhinhthuckyluatQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.DmtruongFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Dmtruong"/> object.
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.Bases.DmtruongFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Dmtruong"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmtruongFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the DmtruongFilterBuilder class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmtruongFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmtruongFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmtruongFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmtruongFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:QUANLYQN.Data.DmtruongFilters.#ctor">
            <summary>
            Initializes a new instance of the DmtruongFilters class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.DmtruongFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmtruongFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.DmtruongFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmtruongFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.DmtruongQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.Bases.DmtruongParameterBuilder"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Dmtruong"/> object.
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.Bases.DmtruongParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Dmtruong"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmtruongParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the DmtruongParameterBuilder class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmtruongParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmtruongParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.DmtruongParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmtruongParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:QUANLYQN.Data.DmtruongQuery.#ctor">
            <summary>
            Initializes a new instance of the DmtruongQuery class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.DmtruongQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmtruongQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.DmtruongQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmtruongQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.LstruonglopFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Lstruonglop"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.LstruonglopFilters.#ctor">
            <summary>
            Initializes a new instance of the LstruonglopFilters class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.LstruonglopFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the LstruonglopFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.LstruonglopFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the LstruonglopFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.LstruonglopQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.Bases.LstruonglopParameterBuilder"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Lstruonglop"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.LstruonglopQuery.#ctor">
            <summary>
            Initializes a new instance of the LstruonglopQuery class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.LstruonglopQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the LstruonglopQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.LstruonglopQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the LstruonglopQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.LscapbacFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Lscapbac"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.LscapbacFilters.#ctor">
            <summary>
            Initializes a new instance of the LscapbacFilters class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.LscapbacFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the LscapbacFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.LscapbacFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the LscapbacFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.LscapbacQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.Bases.LscapbacParameterBuilder"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Lscapbac"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.LscapbacQuery.#ctor">
            <summary>
            Initializes a new instance of the LscapbacQuery class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.LscapbacQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the LscapbacQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.LscapbacQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the LscapbacQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.LskyluatFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Lskyluat"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.LskyluatFilters.#ctor">
            <summary>
            Initializes a new instance of the LskyluatFilters class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.LskyluatFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the LskyluatFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.LskyluatFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the LskyluatFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.LskyluatQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.Bases.LskyluatParameterBuilder"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Lskyluat"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.LskyluatQuery.#ctor">
            <summary>
            Initializes a new instance of the LskyluatQuery class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.LskyluatQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the LskyluatQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.LskyluatQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the LskyluatQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.DmhinhthuckhenthuongFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Dmhinhthuckhenthuong"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.DmhinhthuckhenthuongFilters.#ctor">
            <summary>
            Initializes a new instance of the DmhinhthuckhenthuongFilters class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.DmhinhthuckhenthuongFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmhinhthuckhenthuongFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.DmhinhthuckhenthuongFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmhinhthuckhenthuongFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.DmhinhthuckhenthuongQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.Bases.DmhinhthuckhenthuongParameterBuilder"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Dmhinhthuckhenthuong"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.DmhinhthuckhenthuongQuery.#ctor">
            <summary>
            Initializes a new instance of the DmhinhthuckhenthuongQuery class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.DmhinhthuckhenthuongQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmhinhthuckhenthuongQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.DmhinhthuckhenthuongQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmhinhthuckhenthuongQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.LschucvuFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Lschucvu"/> object.
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.Bases.LschucvuFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Lschucvu"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LschucvuFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the LschucvuFilterBuilder class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LschucvuFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the LschucvuFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LschucvuFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the LschucvuFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:QUANLYQN.Data.LschucvuFilters.#ctor">
            <summary>
            Initializes a new instance of the LschucvuFilters class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.LschucvuFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the LschucvuFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.LschucvuFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the LschucvuFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.LschucvuQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.Bases.LschucvuParameterBuilder"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Lschucvu"/> object.
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.Bases.LschucvuParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Lschucvu"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LschucvuParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the LschucvuParameterBuilder class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LschucvuParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the LschucvuParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.LschucvuParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the LschucvuParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:QUANLYQN.Data.LschucvuQuery.#ctor">
            <summary>
            Initializes a new instance of the LschucvuQuery class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.LschucvuQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the LschucvuQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.LschucvuQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the LschucvuQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.AdminUsersFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.AdminUsers"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.AdminUsersFilters.#ctor">
            <summary>
            Initializes a new instance of the AdminUsersFilters class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.AdminUsersFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AdminUsersFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.AdminUsersFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AdminUsersFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.AdminUsersQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.Bases.AdminUsersParameterBuilder"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.AdminUsers"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.AdminUsersQuery.#ctor">
            <summary>
            Initializes a new instance of the AdminUsersQuery class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.AdminUsersQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AdminUsersQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.AdminUsersQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AdminUsersQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.AdminGroupsFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.AdminGroups"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.AdminGroupsFilters.#ctor">
            <summary>
            Initializes a new instance of the AdminGroupsFilters class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.AdminGroupsFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AdminGroupsFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.AdminGroupsFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AdminGroupsFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.AdminGroupsQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.Bases.AdminGroupsParameterBuilder"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.AdminGroups"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.AdminGroupsQuery.#ctor">
            <summary>
            Initializes a new instance of the AdminGroupsQuery class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.AdminGroupsQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AdminGroupsQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.AdminGroupsQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AdminGroupsQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.AdminMenusFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.AdminMenus"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.AdminMenusFilters.#ctor">
            <summary>
            Initializes a new instance of the AdminMenusFilters class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.AdminMenusFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AdminMenusFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.AdminMenusFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AdminMenusFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.AdminMenusQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.Bases.AdminMenusParameterBuilder"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.AdminMenus"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.AdminMenusQuery.#ctor">
            <summary>
            Initializes a new instance of the AdminMenusQuery class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.AdminMenusQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AdminMenusQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.AdminMenusQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AdminMenusQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.DmgioitinhFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Dmgioitinh"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.DmgioitinhFilters.#ctor">
            <summary>
            Initializes a new instance of the DmgioitinhFilters class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.DmgioitinhFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmgioitinhFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.DmgioitinhFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmgioitinhFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.DmgioitinhQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.Bases.DmgioitinhParameterBuilder"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Dmgioitinh"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.DmgioitinhQuery.#ctor">
            <summary>
            Initializes a new instance of the DmgioitinhQuery class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.DmgioitinhQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmgioitinhQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.DmgioitinhQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmgioitinhQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.AdminGroupusersFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.AdminGroupusers"/> object.
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.Bases.AdminGroupusersFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.AdminGroupusers"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupusersFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the AdminGroupusersFilterBuilder class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupusersFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AdminGroupusersFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupusersFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AdminGroupusersFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:QUANLYQN.Data.AdminGroupusersFilters.#ctor">
            <summary>
            Initializes a new instance of the AdminGroupusersFilters class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.AdminGroupusersFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AdminGroupusersFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.AdminGroupusersFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AdminGroupusersFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.AdminGroupusersQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.Bases.AdminGroupusersParameterBuilder"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.AdminGroupusers"/> object.
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.Bases.AdminGroupusersParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.AdminGroupusers"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupusersParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the AdminGroupusersParameterBuilder class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupusersParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AdminGroupusersParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.Bases.AdminGroupusersParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AdminGroupusersParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:QUANLYQN.Data.AdminGroupusersQuery.#ctor">
            <summary>
            Initializes a new instance of the AdminGroupusersQuery class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.AdminGroupusersQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AdminGroupusersQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.AdminGroupusersQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AdminGroupusersQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.DmcaphocFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Dmcaphoc"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.DmcaphocFilters.#ctor">
            <summary>
            Initializes a new instance of the DmcaphocFilters class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.DmcaphocFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmcaphocFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.DmcaphocFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmcaphocFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.DmcaphocQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.Bases.DmcaphocParameterBuilder"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Dmcaphoc"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.DmcaphocQuery.#ctor">
            <summary>
            Initializes a new instance of the DmcaphocQuery class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.DmcaphocQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmcaphocQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.DmcaphocQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmcaphocQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.DmdonviFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Dmdonvi"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.DmdonviFilters.#ctor">
            <summary>
            Initializes a new instance of the DmdonviFilters class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.DmdonviFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmdonviFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.DmdonviFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmdonviFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.DmdonviQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.Bases.DmdonviParameterBuilder"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Dmdonvi"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.DmdonviQuery.#ctor">
            <summary>
            Initializes a new instance of the DmdonviQuery class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.DmdonviQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmdonviQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.DmdonviQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmdonviQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.DmdantocFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Dmdantoc"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.DmdantocFilters.#ctor">
            <summary>
            Initializes a new instance of the DmdantocFilters class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.DmdantocFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmdantocFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.DmdantocFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmdantocFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.DmdantocQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.Bases.DmdantocParameterBuilder"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Dmdantoc"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.DmdantocQuery.#ctor">
            <summary>
            Initializes a new instance of the DmdantocQuery class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.DmdantocQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmdantocQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.DmdantocQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmdantocQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.DmchucvuFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Dmchucvu"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.DmchucvuFilters.#ctor">
            <summary>
            Initializes a new instance of the DmchucvuFilters class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.DmchucvuFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmchucvuFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.DmchucvuFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmchucvuFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.DmchucvuQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.Bases.DmchucvuParameterBuilder"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Dmchucvu"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.DmchucvuQuery.#ctor">
            <summary>
            Initializes a new instance of the DmchucvuQuery class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.DmchucvuQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmchucvuQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.DmchucvuQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmchucvuQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.DmcapbacFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Dmcapbac"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.DmcapbacFilters.#ctor">
            <summary>
            Initializes a new instance of the DmcapbacFilters class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.DmcapbacFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmcapbacFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.DmcapbacFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmcapbacFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.DmcapbacQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.Bases.DmcapbacParameterBuilder"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Dmcapbac"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.DmcapbacQuery.#ctor">
            <summary>
            Initializes a new instance of the DmcapbacQuery class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.DmcapbacQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DmcapbacQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.DmcapbacQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DmcapbacQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.QuannhanFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Quannhan"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.QuannhanFilters.#ctor">
            <summary>
            Initializes a new instance of the QuannhanFilters class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.QuannhanFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the QuannhanFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.QuannhanFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the QuannhanFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.QuannhanQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.Bases.QuannhanParameterBuilder"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Quannhan"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.QuannhanQuery.#ctor">
            <summary>
            Initializes a new instance of the QuannhanQuery class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.QuannhanQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the QuannhanQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.QuannhanQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the QuannhanQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.LskhenthuongFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Lskhenthuong"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.LskhenthuongFilters.#ctor">
            <summary>
            Initializes a new instance of the LskhenthuongFilters class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.LskhenthuongFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the LskhenthuongFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.LskhenthuongFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the LskhenthuongFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.LskhenthuongQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:QUANLYQN.Data.Bases.LskhenthuongParameterBuilder"/> class
            that is used exclusively with a <see cref="T:QUANLYQN.Entities.Lskhenthuong"/> object.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.LskhenthuongQuery.#ctor">
            <summary>
            Initializes a new instance of the LskhenthuongQuery class.
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.LskhenthuongQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the LskhenthuongQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:QUANLYQN.Data.LskhenthuongQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the LskhenthuongQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:QUANLYQN.Data.Bases.LschucvuChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>QUANLYQN.Entities.Lschucvu</c>
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.Bases.LschucvuChildEntityTypes.Dmchucvu">
            <summary>
             Composite Property for <c>Dmchucvu</c> at IdChucvuSource
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.Bases.LschucvuChildEntityTypes.Quannhan">
            <summary>
             Composite Property for <c>Quannhan</c> at IdQuannhanSource
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.Bases.DmlopProviderBase">
            <summary>
             This class is the base class for any <see cref="T:QUANLYQN.Data.Bases.DmlopProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.Bases.DmloaiquannhanProviderBase">
            <summary>
             This class is the base class for any <see cref="T:QUANLYQN.Data.Bases.DmloaiquannhanProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.SqlUtil">
            <summary>
            Provides utility methods for generating SQL expressions.
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.SqlUtil.AND">
            <summary>
            SQL AND keyword.
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.SqlUtil.OR">
            <summary>
            SQL OR keyword.
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.SqlUtil.ASC">
            <summary>
            SQL ASC keyword.
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.SqlUtil.DESC">
            <summary>
            SQL DESC keyword.
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.SqlUtil.NULL">
            <summary>
            SQL NULL keyword.
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.SqlUtil.TOKEN">
            <summary>
            Used to represent quoted search terms.
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.SqlUtil.QUOTE">
            <summary>
            Delimiter for quoted search terms.
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.SqlUtil.STAR">
            <summary>
            Used as wildcard character within search text.
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.SqlUtil.WILD">
            <summary>
            SQL wildcard character.
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.SqlUtil.LEFT">
            <summary>
            SQL grouping open character.
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.SqlUtil.RIGHT">
            <summary>
            SQL grouping close character.
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.SqlUtil.COMMA">
            <summary>
            Delimiter for optional search terms.
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.SqlUtil.PAGE_INDEX">
            <summary>
            PageIndex Temp Table
            </summary>
        </member>
        <member name="M:QUANLYQN.Data.SqlUtil.Equals(System.String,System.String)">
            <summary>
            Creates an <see cref="F:QUANLYQN.Data.SqlComparisonType.Equals"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlUtil.Equals(System.String,System.String,System.Boolean)">
            <summary>
            Creates an <see cref="F:QUANLYQN.Data.SqlComparisonType.Equals"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlUtil.Equals(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates an <see cref="F:QUANLYQN.Data.SqlComparisonType.Equals"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlUtil.Equals(System.String)">
            <summary>
            Encodes the value for a <see cref="F:QUANLYQN.Data.SqlComparisonType.Equals"/> expression.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlUtil.Contains(System.String,System.String)">
            <summary>
            Creates a <see cref="F:QUANLYQN.Data.SqlComparisonType.Contains"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlUtil.Contains(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:QUANLYQN.Data.SqlComparisonType.Contains"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlUtil.Contains(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a <see cref="F:QUANLYQN.Data.SqlComparisonType.Contains"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlUtil.Contains(System.String)">
            <summary>
            Encodes the value for a <see cref="F:QUANLYQN.Data.SqlComparisonType.Contains"/> expression.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlUtil.StartsWith(System.String,System.String)">
            <summary>
            Creates a <see cref="F:QUANLYQN.Data.SqlComparisonType.StartsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlUtil.StartsWith(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:QUANLYQN.Data.SqlComparisonType.StartsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlUtil.StartsWith(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a <see cref="F:QUANLYQN.Data.SqlComparisonType.StartsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlUtil.StartsWith(System.String)">
            <summary>
            Encodes the value for a <see cref="F:QUANLYQN.Data.SqlComparisonType.StartsWith"/> expression.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlUtil.EndsWith(System.String,System.String)">
            <summary>
            Creates a <see cref="F:QUANLYQN.Data.SqlComparisonType.EndsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlUtil.EndsWith(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:QUANLYQN.Data.SqlComparisonType.EndsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlUtil.EndsWith(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a <see cref="F:QUANLYQN.Data.SqlComparisonType.EndsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlUtil.EndsWith(System.String)">
            <summary>
            Encodes the value for a <see cref="F:QUANLYQN.Data.SqlComparisonType.EndsWith"/> expression.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlUtil.Like(System.String,System.String)">
            <summary>
            Creates a <see cref="F:QUANLYQN.Data.SqlComparisonType.Like"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlUtil.Like(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:QUANLYQN.Data.SqlComparisonType.Like"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlUtil.Like(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a <see cref="F:QUANLYQN.Data.SqlComparisonType.Like"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlUtil.Like(System.String)">
            <summary>
            Encodes the value for a <see cref="F:QUANLYQN.Data.SqlComparisonType.Like"/> expression.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlUtil.IsNull(System.String)">
            <summary>
            Creates an IS NULL expression.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlUtil.IsNotNull(System.String)">
            <summary>
            Creates an IS NOT NULL expression.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlUtil.Encode(System.String)">
            <summary>
            Encodes the specified value for use in SQL expressions.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlUtil.Encode(System.String,System.Boolean)">
            <summary>
            Encodes the specified value for use in SQL expressions and
            optionally surrounds the value with single-quotes.
            </summary>
            <param name="value"></param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlUtil.Encode(System.String[])">
            <summary>
            Encodes the specified values for use in SQL expressions.
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlUtil.Encode(System.String[],System.Boolean)">
            <summary>
            Encodes the specified values for use in SQL expressions and
            optionally surrounds the value with single-quotes.
            </summary>
            <param name="values"></param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlUtil.GetLikeFormat(System.Boolean)">
            <summary>
            Gets the like format string.
            </summary>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlUtil.GetLikeFormat(System.Boolean,System.Boolean)">
            <summary>
            Gets the like format string.
            </summary>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlUtil.GetEqualFormat(System.Boolean)">
            <summary>
            Gets the equal format string.
            </summary>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <returns></returns>
        </member>
        <member name="M:QUANLYQN.Data.SqlUtil.GetEqualFormat(System.Boolean,System.Boolean)">
            <summary>
            Gets the equal format string.
            </summary>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="T:QUANLYQN.Data.SqlComparisonType">
            <summary>
            Enumeration of SQL expression comparison types.
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.SqlComparisonType.Equals">
            <summary>
            Represents = value.
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.SqlComparisonType.StartsWith">
            <summary>
            Represents LIKE value%.
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.SqlComparisonType.EndsWith">
            <summary>
            Represents LIKE %value.
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.SqlComparisonType.Contains">
            <summary>
            Represents LIKE %value%.
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.SqlComparisonType.Like">
            <summary>
            Represents LIKE value.
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.Bases.LskhenthuongProviderBase">
            <summary>
             This class is the base class for any <see cref="T:QUANLYQN.Data.Bases.LskhenthuongProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.Bases.DmtruongChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>QUANLYQN.Entities.Dmtruong</c>
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.Bases.DmtruongChildEntityTypes.LstruonglopCollection">
            <summary>
             Collection of <c>Dmtruong</c> as OneToMany for LstruonglopCollection
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.Bases.DmgioitinhProviderBase">
            <summary>
             This class is the base class for any <see cref="T:QUANLYQN.Data.Bases.DmgioitinhProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.Bases.AdminGroupusersChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>QUANLYQN.Entities.AdminGroupusers</c>
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.Bases.AdminGroupusersChildEntityTypes.AdminGroups">
            <summary>
             Composite Property for <c>AdminGroups</c> at IdGroupSource
            </summary>
        </member>
        <member name="F:QUANLYQN.Data.Bases.AdminGroupusersChildEntityTypes.AdminUsers">
            <summary>
             Composite Property for <c>AdminUsers</c> at IdUserSource
            </summary>
        </member>
        <member name="T:QUANLYQN.Data.Bases.AdminGroupmenusProviderBase">
            <summary>
             This class is the base class for any <see cref="T:QUANLYQN.Data.Bases.AdminGroupmenusProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
    </members>
</doc>
