
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file AdminGroupmenus.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace QUANLYQN.Entities
{
	///<summary>
	/// An object representation of the 'ADMIN_GROUPMENUS' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	public abstract partial class AdminGroupmenusBase : EntityBase, QUANLYQN.Entities.IAdminGroupmenus, IEntityId<AdminGroupmenusKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private AdminGroupmenusEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private AdminGroupmenusEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private AdminGroupmenusEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<AdminGroupmenus> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event AdminGroupmenusEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AdminGroupmenusEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="AdminGroupmenusBase"/> instance.
		///</summary>
		public AdminGroupmenusBase()
		{
			this.entityData = new AdminGroupmenusEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="AdminGroupmenusBase"/> instance.
		///</summary>
		///<param name="idMenu"></param>
		///<param name="idGroup"></param>
		///<param name="view"></param>
		///<param name="add"></param>
		///<param name="edit"></param>
		///<param name="delete"></param>
		///<param name="control"></param>
		public AdminGroupmenusBase(System.String idMenu, System.String idGroup, System.Boolean view, 
			System.Boolean add, System.Boolean edit, System.Boolean delete, System.Boolean control)
		{
			this.entityData = new AdminGroupmenusEntityData();
			this.backupData = null;

			this.IdMenu = idMenu;
			this.IdGroup = idGroup;
			this.View = view;
			this.Add = add;
			this.Edit = edit;
			this.Delete = delete;
			this.Control = control;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="AdminGroupmenus"/> instance.
		///</summary>
		///<param name="idMenu"></param>
		///<param name="idGroup"></param>
		///<param name="view"></param>
		///<param name="add"></param>
		///<param name="edit"></param>
		///<param name="delete"></param>
		///<param name="control"></param>
		public static AdminGroupmenus CreateAdminGroupmenus(System.String idMenu, System.String idGroup, System.Boolean view, 
			System.Boolean add, System.Boolean edit, System.Boolean delete, System.Boolean control)
		{
			AdminGroupmenus newAdminGroupmenus = new AdminGroupmenus();
			newAdminGroupmenus.IdMenu = idMenu;
			newAdminGroupmenus.IdGroup = idGroup;
			newAdminGroupmenus.View = view;
			newAdminGroupmenus.Add = add;
			newAdminGroupmenus.Edit = edit;
			newAdminGroupmenus.Delete = delete;
			newAdminGroupmenus.Control = control;
			return newAdminGroupmenus;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the IdMenu property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false, 50)]
		public virtual System.String IdMenu
		{
			get
			{
				return this.entityData.IdMenu; 
			}
			
			set
			{
				if (this.entityData.IdMenu == value)
					return;
					
				OnColumnChanging(AdminGroupmenusColumn.IdMenu, this.entityData.IdMenu);
				this.entityData.IdMenu = value;
				this.EntityId.IdMenu = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdminGroupmenusColumn.IdMenu, this.entityData.IdMenu);
				OnPropertyChanged("IdMenu");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ID_MENU property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the ID_MENU property.</remarks>
		/// <value>This type is char</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.String OriginalIdMenu
		{
			get { return this.entityData.OriginalIdMenu; }
			set { this.entityData.OriginalIdMenu = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the IdGroup property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false, 15)]
		public virtual System.String IdGroup
		{
			get
			{
				return this.entityData.IdGroup; 
			}
			
			set
			{
				if (this.entityData.IdGroup == value)
					return;
					
				OnColumnChanging(AdminGroupmenusColumn.IdGroup, this.entityData.IdGroup);
				this.entityData.IdGroup = value;
				this.EntityId.IdGroup = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdminGroupmenusColumn.IdGroup, this.entityData.IdGroup);
				OnPropertyChanged("IdGroup");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ID_GROUP property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the ID_GROUP property.</remarks>
		/// <value>This type is char</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.String OriginalIdGroup
		{
			get { return this.entityData.OriginalIdGroup; }
			set { this.entityData.OriginalIdGroup = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the View property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean View
		{
			get
			{
				return this.entityData.View; 
			}
			
			set
			{
				if (this.entityData.View == value)
					return;
					
				OnColumnChanging(AdminGroupmenusColumn.View, this.entityData.View);
				this.entityData.View = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdminGroupmenusColumn.View, this.entityData.View);
				OnPropertyChanged("View");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Add property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean Add
		{
			get
			{
				return this.entityData.Add; 
			}
			
			set
			{
				if (this.entityData.Add == value)
					return;
					
				OnColumnChanging(AdminGroupmenusColumn.Add, this.entityData.Add);
				this.entityData.Add = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdminGroupmenusColumn.Add, this.entityData.Add);
				OnPropertyChanged("Add");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Edit property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean Edit
		{
			get
			{
				return this.entityData.Edit; 
			}
			
			set
			{
				if (this.entityData.Edit == value)
					return;
					
				OnColumnChanging(AdminGroupmenusColumn.Edit, this.entityData.Edit);
				this.entityData.Edit = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdminGroupmenusColumn.Edit, this.entityData.Edit);
				OnPropertyChanged("Edit");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Delete property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean Delete
		{
			get
			{
				return this.entityData.Delete; 
			}
			
			set
			{
				if (this.entityData.Delete == value)
					return;
					
				OnColumnChanging(AdminGroupmenusColumn.Delete, this.entityData.Delete);
				this.entityData.Delete = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdminGroupmenusColumn.Delete, this.entityData.Delete);
				OnPropertyChanged("Delete");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Control property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean Control
		{
			get
			{
				return this.entityData.Control; 
			}
			
			set
			{
				if (this.entityData.Control == value)
					return;
					
				OnColumnChanging(AdminGroupmenusColumn.Control, this.entityData.Control);
				this.entityData.Control = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AdminGroupmenusColumn.Control, this.entityData.Control);
				OnPropertyChanged("Control");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AdminGroups"/>.
		/// </summary>
		/// <value>The source AdminGroups for IdGroup.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AdminGroups IdGroupSource
      	{
            get { return entityData.IdGroupSource; }
            set { entityData.IdGroupSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AdminMenus"/>.
		/// </summary>
		/// <value>The source AdminMenus for IdMenu.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AdminMenus IdMenuSource
      	{
            get { return entityData.IdMenuSource; }
            set { entityData.IdMenuSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("IdMenu", "Id Menu"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("IdMenu", "Id Menu", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("IdGroup", "Id Group"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("IdGroup", "Id Group", 15));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ADMIN_GROUPMENUS"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ID_MENU", "ID_GROUP", "VIEW", "ADD", "EDIT", "DELETE", "CONTROL"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as AdminGroupmenusEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (AdminGroupmenus) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<AdminGroupmenus>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as AdminGroupmenus);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed AdminGroupmenus Entity 
		///</summary>
		public virtual AdminGroupmenus Copy()
		{
			//shallow copy entity
			AdminGroupmenus copy = new AdminGroupmenus();
			copy.SuppressEntityEvents = true;
			copy.IdMenu = this.IdMenu;
			copy.OriginalIdMenu = this.OriginalIdMenu;
			copy.IdGroup = this.IdGroup;
			copy.OriginalIdGroup = this.OriginalIdGroup;
			copy.View = this.View;
			copy.Add = this.Add;
			copy.Edit = this.Edit;
			copy.Delete = this.Delete;
			copy.Control = this.Control;
			
			copy.IdGroupSource = MakeCopyOf(this.IdGroupSource) as AdminGroups;
			copy.IdMenuSource = MakeCopyOf(this.IdMenuSource) as AdminMenus;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed AdminGroupmenus Entity which is a deep copy of the current entity.
		///</summary>
		public virtual AdminGroupmenus DeepCopy()
		{
			return EntityHelper.Clone<AdminGroupmenus>(this as AdminGroupmenus);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as AdminGroupmenusEntityData;
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as AdminGroupmenusEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(AdminGroupmenusColumn column)
		{
			switch(column)
			{
					case AdminGroupmenusColumn.IdMenu:
					return entityData.IdMenu != _originalData.IdMenu;
					case AdminGroupmenusColumn.IdGroup:
					return entityData.IdGroup != _originalData.IdGroup;
					case AdminGroupmenusColumn.View:
					return entityData.View != _originalData.View;
					case AdminGroupmenusColumn.Add:
					return entityData.Add != _originalData.Add;
					case AdminGroupmenusColumn.Edit:
					return entityData.Edit != _originalData.Edit;
					case AdminGroupmenusColumn.Delete:
					return entityData.Delete != _originalData.Delete;
					case AdminGroupmenusColumn.Control:
					return entityData.Control != _originalData.Control;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if [has data changed]; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.IdMenu != _originalData.IdMenu;
			result = result || entityData.IdGroup != _originalData.IdGroup;
			result = result || entityData.View != _originalData.View;
			result = result || entityData.Add != _originalData.Add;
			result = result || entityData.Edit != _originalData.Edit;
			result = result || entityData.Delete != _originalData.Delete;
			result = result || entityData.Control != _originalData.Control;
			return result;
}	
		
		#endregion

        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="AdminGroupmenusBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			if (Object1 is AdminGroupmenusBase)
				return Equals(this, (AdminGroupmenusBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="AdminGroupmenusBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.IdMenu.GetHashCode() ^ 
					this.IdGroup.GetHashCode() ^ 
					this.View.GetHashCode() ^ 
					this.Add.GetHashCode() ^ 
					this.Edit.GetHashCode() ^ 
					this.Delete.GetHashCode() ^ 
					this.Control.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="AdminGroupmenusBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(AdminGroupmenusBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="AdminGroupmenusBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="AdminGroupmenusBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="AdminGroupmenusBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(AdminGroupmenusBase Object1, AdminGroupmenusBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.IdMenu != Object2.IdMenu)
				equal = false;
			if (Object1.IdGroup != Object2.IdGroup)
				equal = false;
			if (Object1.View != Object2.View)
				equal = false;
			if (Object1.Add != Object2.Add)
				equal = false;
			if (Object1.Edit != Object2.Edit)
				equal = false;
			if (Object1.Delete != Object2.Delete)
				equal = false;
			if (Object1.Control != Object2.Control)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((AdminGroupmenusBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static AdminGroupmenusComparer GetComparer()
        {
            return new AdminGroupmenusComparer();
        }
        */

        // Comparer delegates back to AdminGroupmenus
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(AdminGroupmenus rhs, AdminGroupmenusColumn which)
        {
            switch (which)
            {
            	
            	
            	case AdminGroupmenusColumn.IdMenu:
            		return this.IdMenu.CompareTo(rhs.IdMenu);
            		
            		                 
            	
            	
            	case AdminGroupmenusColumn.IdGroup:
            		return this.IdGroup.CompareTo(rhs.IdGroup);
            		
            		                 
            	
            	
            	case AdminGroupmenusColumn.View:
            		return this.View.CompareTo(rhs.View);
            		
            		                 
            	
            	
            	case AdminGroupmenusColumn.Add:
            		return this.Add.CompareTo(rhs.Add);
            		
            		                 
            	
            	
            	case AdminGroupmenusColumn.Edit:
            		return this.Edit.CompareTo(rhs.Edit);
            		
            		                 
            	
            	
            	case AdminGroupmenusColumn.Delete:
            		return this.Delete.CompareTo(rhs.Delete);
            		
            		                 
            	
            	
            	case AdminGroupmenusColumn.Control:
            		return this.Control.CompareTo(rhs.Control);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<AdminGroupmenusKey> Members
		
		// member variable for the EntityId property
		private AdminGroupmenusKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual AdminGroupmenusKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new AdminGroupmenusKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("AdminGroupmenus")
					.Append("|").Append( this.IdMenu.ToString())
					.Append("|").Append( this.IdGroup.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{8}{7}- IdMenu: {0}{7}- IdGroup: {1}{7}- View: {2}{7}- Add: {3}{7}- Edit: {4}{7}- Delete: {5}{7}- Control: {6}{7}", 
				this.IdMenu,
				this.IdGroup,
				this.View,
				this.Add,
				this.Edit,
				this.Delete,
				this.Control,
				System.Environment.NewLine, 
				this.GetType());
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ADMIN_GROUPMENUS' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class AdminGroupmenusEntityData : ICloneable
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
			/// <summary>			
			/// ID_MENU : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "ADMIN_GROUPMENUS"</remarks>
			public System.String IdMenu;
				
			/// <summary>
			/// keep a copy of the original so it can be used for editable primary keys.
			/// </summary>
			public System.String OriginalIdMenu;
			
			/// <summary>			
			/// ID_GROUP : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "ADMIN_GROUPMENUS"</remarks>
			public System.String IdGroup;
				
			/// <summary>
			/// keep a copy of the original so it can be used for editable primary keys.
			/// </summary>
			public System.String OriginalIdGroup;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// VIEW : 
		/// </summary>
		public System.Boolean		  View = false;
		
		/// <summary>
		/// ADD : 
		/// </summary>
		public System.Boolean		  Add = false;
		
		/// <summary>
		/// EDIT : 
		/// </summary>
		public System.Boolean		  Edit = false;
		
		/// <summary>
		/// DELETE : 
		/// </summary>
		public System.Boolean		  Delete = false;
		
		/// <summary>
		/// CONTROL : 
		/// </summary>
		public System.Boolean		  Control = false;
		#endregion
			
		#region Source Foreign Key Property
				
		private AdminGroups _idGroupSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AdminGroups"/>.
		/// </summary>
		/// <value>The source AdminGroups for IdGroup.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual AdminGroups IdGroupSource
      	{
            get { return this._idGroupSource; }
            set { this._idGroupSource = value; }
      	}
		private AdminMenus _idMenuSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AdminMenus"/>.
		/// </summary>
		/// <value>The source AdminMenus for IdMenu.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual AdminMenus IdMenuSource
      	{
            get { return this._idMenuSource; }
            set { this._idMenuSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			AdminGroupmenusEntityData _tmp = new AdminGroupmenusEntityData();
						
			_tmp.IdMenu = this.IdMenu;
			_tmp.OriginalIdMenu = this.OriginalIdMenu;
			_tmp.IdGroup = this.IdGroup;
			_tmp.OriginalIdGroup = this.OriginalIdGroup;
			
			_tmp.View = this.View;
			_tmp.Add = this.Add;
			_tmp.Edit = this.Edit;
			_tmp.Delete = this.Delete;
			_tmp.Control = this.Control;
			
			#region Source Parent Composite Entities
			if (this.IdGroupSource != null)
				_tmp.IdGroupSource = MakeCopyOf(this.IdGroupSource) as AdminGroups;
			if (this.IdMenuSource != null)
				_tmp.IdMenuSource = MakeCopyOf(this.IdMenuSource) as AdminMenus;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct



		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdminGroupmenusColumn"/> which has raised the event.</param>
		public void OnColumnChanging(AdminGroupmenusColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdminGroupmenusColumn"/> which has raised the event.</param>
		public void OnColumnChanged(AdminGroupmenusColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdminGroupmenusColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanging(AdminGroupmenusColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				AdminGroupmenusEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new AdminGroupmenusEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AdminGroupmenusColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanged(AdminGroupmenusColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				AdminGroupmenusEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new AdminGroupmenusEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region AdminGroupmenusEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="AdminGroupmenus"/> object.
	/// </remarks>
	public class AdminGroupmenusEventArgs : System.EventArgs
	{
		private AdminGroupmenusColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the AdminGroupmenusEventArgs class.
		///</summary>
		public AdminGroupmenusEventArgs(AdminGroupmenusColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the AdminGroupmenusEventArgs class.
		///</summary>
		public AdminGroupmenusEventArgs(AdminGroupmenusColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The AdminGroupmenusColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="AdminGroupmenusColumn" />
		public AdminGroupmenusColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all AdminGroupmenus related events.
	///</summary>
	public delegate void AdminGroupmenusEventHandler(object sender, AdminGroupmenusEventArgs e);
	
	#region AdminGroupmenusComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class AdminGroupmenusComparer : System.Collections.Generic.IComparer<AdminGroupmenus>
	{
		AdminGroupmenusColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:AdminGroupmenusComparer"/> class.
        /// </summary>
		public AdminGroupmenusComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:AdminGroupmenusComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public AdminGroupmenusComparer(AdminGroupmenusColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="AdminGroupmenus"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="AdminGroupmenus"/> to compare.</param>
        /// <param name="b">The second <c>AdminGroupmenus</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(AdminGroupmenus a, AdminGroupmenus b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(AdminGroupmenus entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(AdminGroupmenus a, AdminGroupmenus b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public AdminGroupmenusColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region AdminGroupmenusKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="AdminGroupmenus"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class AdminGroupmenusKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the AdminGroupmenusKey class.
		/// </summary>
		public AdminGroupmenusKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the AdminGroupmenusKey class.
		/// </summary>
		public AdminGroupmenusKey(AdminGroupmenusBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.IdMenu = entity.IdMenu;
				this.IdGroup = entity.IdGroup;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the AdminGroupmenusKey class.
		/// </summary>
		public AdminGroupmenusKey(System.String idMenu, System.String idGroup)
		{
			#region Init Properties

			this.IdMenu = idMenu;
			this.IdGroup = idGroup;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private AdminGroupmenusBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public AdminGroupmenusBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the IdMenu property
		private System.String _idMenu;
		
		/// <summary>
		/// Gets or sets the IdMenu property.
		/// </summary>
		public System.String IdMenu
		{
			get { return _idMenu; }
			set
			{
				if ( this.Entity != null )
					this.Entity.IdMenu = value;
				
				_idMenu = value;
			}
		}
		
		// member variable for the IdGroup property
		private System.String _idGroup;
		
		/// <summary>
		/// Gets or sets the IdGroup property.
		/// </summary>
		public System.String IdGroup
		{
			get { return _idGroup; }
			set
			{
				if ( this.Entity != null )
					this.Entity.IdGroup = value;
				
				_idGroup = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				IdMenu = ( values["IdMenu"] != null ) ? (System.String) EntityUtil.ChangeType(values["IdMenu"], typeof(System.String)) : string.Empty;
				IdGroup = ( values["IdGroup"] != null ) ? (System.String) EntityUtil.ChangeType(values["IdGroup"], typeof(System.String)) : string.Empty;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("IdMenu", IdMenu);
			values.Add("IdGroup", IdGroup);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("IdMenu: {0}{2}IdGroup: {1}{2}",
								IdMenu,
								IdGroup,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region AdminGroupmenusColumn Enum
	
	/// <summary>
	/// Enumerate the AdminGroupmenus columns.
	/// </summary>
	[Serializable]
	public enum AdminGroupmenusColumn : int
	{
		/// <summary>
		/// IdMenu : 
		/// </summary>
		[EnumTextValue("ID_MENU")]
		[ColumnEnum("ID_MENU", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, true, false, false, 50)]
		IdMenu = 1,
		/// <summary>
		/// IdGroup : 
		/// </summary>
		[EnumTextValue("ID_GROUP")]
		[ColumnEnum("ID_GROUP", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, true, false, false, 15)]
		IdGroup = 2,
		/// <summary>
		/// View : 
		/// </summary>
		[EnumTextValue("VIEW")]
		[ColumnEnum("VIEW", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		View = 3,
		/// <summary>
		/// Add : 
		/// </summary>
		[EnumTextValue("ADD")]
		[ColumnEnum("ADD", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		Add = 4,
		/// <summary>
		/// Edit : 
		/// </summary>
		[EnumTextValue("EDIT")]
		[ColumnEnum("EDIT", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		Edit = 5,
		/// <summary>
		/// Delete : 
		/// </summary>
		[EnumTextValue("DELETE")]
		[ColumnEnum("DELETE", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		Delete = 6,
		/// <summary>
		/// Control : 
		/// </summary>
		[EnumTextValue("CONTROL")]
		[ColumnEnum("CONTROL", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		Control = 7
	}//End enum

	#endregion AdminGroupmenusColumn Enum

} // end namespace
