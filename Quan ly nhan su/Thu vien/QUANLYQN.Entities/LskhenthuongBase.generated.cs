
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file Lskhenthuong.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace QUANLYQN.Entities
{
	///<summary>
	/// An object representation of the 'LSKHENTHUONG' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	public abstract partial class LskhenthuongBase : EntityBase, QUANLYQN.Entities.ILskhenthuong, IEntityId<LskhenthuongKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private LskhenthuongEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private LskhenthuongEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private LskhenthuongEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<Lskhenthuong> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event LskhenthuongEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event LskhenthuongEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="LskhenthuongBase"/> instance.
		///</summary>
		public LskhenthuongBase()
		{
			this.entityData = new LskhenthuongEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="LskhenthuongBase"/> instance.
		///</summary>
		///<param name="idQuannhan"></param>
		///<param name="idHinhthucKhenthuong"></param>
		///<param name="capKhenthuong"></param>
		///<param name="ngaynhan"></param>
		///<param name="ghichu"></param>
		public LskhenthuongBase(System.Int32 idQuannhan, System.Int32 idHinhthucKhenthuong, 
			System.String capKhenthuong, System.DateTime? ngaynhan, System.String ghichu)
		{
			this.entityData = new LskhenthuongEntityData();
			this.backupData = null;

			this.IdQuannhan = idQuannhan;
			this.IdHinhthucKhenthuong = idHinhthucKhenthuong;
			this.CapKhenthuong = capKhenthuong;
			this.Ngaynhan = ngaynhan;
			this.Ghichu = ghichu;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Lskhenthuong"/> instance.
		///</summary>
		///<param name="idQuannhan"></param>
		///<param name="idHinhthucKhenthuong"></param>
		///<param name="capKhenthuong"></param>
		///<param name="ngaynhan"></param>
		///<param name="ghichu"></param>
		public static Lskhenthuong CreateLskhenthuong(System.Int32 idQuannhan, System.Int32 idHinhthucKhenthuong, 
			System.String capKhenthuong, System.DateTime? ngaynhan, System.String ghichu)
		{
			Lskhenthuong newLskhenthuong = new Lskhenthuong();
			newLskhenthuong.IdQuannhan = idQuannhan;
			newLskhenthuong.IdHinhthucKhenthuong = idHinhthucKhenthuong;
			newLskhenthuong.CapKhenthuong = capKhenthuong;
			newLskhenthuong.Ngaynhan = ngaynhan;
			newLskhenthuong.Ghichu = ghichu;
			return newLskhenthuong;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the IdLichsukhenthuong property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int64 IdLichsukhenthuong
		{
			get
			{
				return this.entityData.IdLichsukhenthuong; 
			}
			
			set
			{
				if (this.entityData.IdLichsukhenthuong == value)
					return;
					
				OnColumnChanging(LskhenthuongColumn.IdLichsukhenthuong, this.entityData.IdLichsukhenthuong);
				this.entityData.IdLichsukhenthuong = value;
				this.EntityId.IdLichsukhenthuong = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(LskhenthuongColumn.IdLichsukhenthuong, this.entityData.IdLichsukhenthuong);
				OnPropertyChanged("IdLichsukhenthuong");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IdQuannhan property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 IdQuannhan
		{
			get
			{
				return this.entityData.IdQuannhan; 
			}
			
			set
			{
				if (this.entityData.IdQuannhan == value)
					return;
					
				OnColumnChanging(LskhenthuongColumn.IdQuannhan, this.entityData.IdQuannhan);
				this.entityData.IdQuannhan = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(LskhenthuongColumn.IdQuannhan, this.entityData.IdQuannhan);
				OnPropertyChanged("IdQuannhan");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IdHinhthucKhenthuong property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 IdHinhthucKhenthuong
		{
			get
			{
				return this.entityData.IdHinhthucKhenthuong; 
			}
			
			set
			{
				if (this.entityData.IdHinhthucKhenthuong == value)
					return;
					
				OnColumnChanging(LskhenthuongColumn.IdHinhthucKhenthuong, this.entityData.IdHinhthucKhenthuong);
				this.entityData.IdHinhthucKhenthuong = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(LskhenthuongColumn.IdHinhthucKhenthuong, this.entityData.IdHinhthucKhenthuong);
				OnPropertyChanged("IdHinhthucKhenthuong");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CapKhenthuong property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String CapKhenthuong
		{
			get
			{
				return this.entityData.CapKhenthuong; 
			}
			
			set
			{
				if (this.entityData.CapKhenthuong == value)
					return;
					
				OnColumnChanging(LskhenthuongColumn.CapKhenthuong, this.entityData.CapKhenthuong);
				this.entityData.CapKhenthuong = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(LskhenthuongColumn.CapKhenthuong, this.entityData.CapKhenthuong);
				OnPropertyChanged("CapKhenthuong");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Ngaynhan property. 
		///		
		/// </summary>
		/// <value>This type is smalldatetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsNgaynhanNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? Ngaynhan
		{
			get
			{
				return this.entityData.Ngaynhan; 
			}
			
			set
			{
				if (this.entityData.Ngaynhan == value)
					return;
					
				OnColumnChanging(LskhenthuongColumn.Ngaynhan, this.entityData.Ngaynhan);
				this.entityData.Ngaynhan = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(LskhenthuongColumn.Ngaynhan, this.entityData.Ngaynhan);
				OnPropertyChanged("Ngaynhan");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Ghichu property. 
		///		
		/// </summary>
		/// <value>This type is ntext.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String Ghichu
		{
			get
			{
				return this.entityData.Ghichu; 
			}
			
			set
			{
				if (this.entityData.Ghichu == value)
					return;
					
				OnColumnChanging(LskhenthuongColumn.Ghichu, this.entityData.Ghichu);
				this.entityData.Ghichu = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(LskhenthuongColumn.Ghichu, this.entityData.Ghichu);
				OnPropertyChanged("Ghichu");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="Quannhan"/>.
		/// </summary>
		/// <value>The source Quannhan for IdQuannhan.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Quannhan IdQuannhanSource
      	{
            get { return entityData.IdQuannhanSource; }
            set { entityData.IdQuannhanSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Dmhinhthuckhenthuong"/>.
		/// </summary>
		/// <value>The source Dmhinhthuckhenthuong for IdHinhthucKhenthuong.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Dmhinhthuckhenthuong IdHinhthucKhenthuongSource
      	{
            get { return entityData.IdHinhthucKhenthuongSource; }
            set { entityData.IdHinhthucKhenthuongSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("CapKhenthuong", "Cap Khenthuong"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("CapKhenthuong", "Cap Khenthuong", 50));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "LSKHENTHUONG"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ID_LICHSUKHENTHUONG", "ID_QUANNHAN", "ID_HINHTHUC_KHENTHUONG", "CAP_KHENTHUONG", "NGAYNHAN", "GHICHU"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as LskhenthuongEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Lskhenthuong) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<Lskhenthuong>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Lskhenthuong);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Lskhenthuong Entity 
		///</summary>
		public virtual Lskhenthuong Copy()
		{
			//shallow copy entity
			Lskhenthuong copy = new Lskhenthuong();
			copy.SuppressEntityEvents = true;
			copy.IdLichsukhenthuong = this.IdLichsukhenthuong;
			copy.IdQuannhan = this.IdQuannhan;
			copy.IdHinhthucKhenthuong = this.IdHinhthucKhenthuong;
			copy.CapKhenthuong = this.CapKhenthuong;
			copy.Ngaynhan = this.Ngaynhan;
			copy.Ghichu = this.Ghichu;
			
			copy.IdQuannhanSource = MakeCopyOf(this.IdQuannhanSource) as Quannhan;
			copy.IdHinhthucKhenthuongSource = MakeCopyOf(this.IdHinhthucKhenthuongSource) as Dmhinhthuckhenthuong;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed Lskhenthuong Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Lskhenthuong DeepCopy()
		{
			return EntityHelper.Clone<Lskhenthuong>(this as Lskhenthuong);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as LskhenthuongEntityData;
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as LskhenthuongEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(LskhenthuongColumn column)
		{
			switch(column)
			{
					case LskhenthuongColumn.IdLichsukhenthuong:
					return entityData.IdLichsukhenthuong != _originalData.IdLichsukhenthuong;
					case LskhenthuongColumn.IdQuannhan:
					return entityData.IdQuannhan != _originalData.IdQuannhan;
					case LskhenthuongColumn.IdHinhthucKhenthuong:
					return entityData.IdHinhthucKhenthuong != _originalData.IdHinhthucKhenthuong;
					case LskhenthuongColumn.CapKhenthuong:
					return entityData.CapKhenthuong != _originalData.CapKhenthuong;
					case LskhenthuongColumn.Ngaynhan:
					return entityData.Ngaynhan != _originalData.Ngaynhan;
					case LskhenthuongColumn.Ghichu:
					return entityData.Ghichu != _originalData.Ghichu;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if [has data changed]; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.IdLichsukhenthuong != _originalData.IdLichsukhenthuong;
			result = result || entityData.IdQuannhan != _originalData.IdQuannhan;
			result = result || entityData.IdHinhthucKhenthuong != _originalData.IdHinhthucKhenthuong;
			result = result || entityData.CapKhenthuong != _originalData.CapKhenthuong;
			result = result || entityData.Ngaynhan != _originalData.Ngaynhan;
			result = result || entityData.Ghichu != _originalData.Ghichu;
			return result;
}	
		
		#endregion

        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="LskhenthuongBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			if (Object1 is LskhenthuongBase)
				return Equals(this, (LskhenthuongBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="LskhenthuongBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.IdLichsukhenthuong.GetHashCode() ^ 
					this.IdQuannhan.GetHashCode() ^ 
					this.IdHinhthucKhenthuong.GetHashCode() ^ 
					this.CapKhenthuong.GetHashCode() ^ 
					((this.Ngaynhan == null) ? string.Empty : this.Ngaynhan.ToString()).GetHashCode() ^ 
					((this.Ghichu == null) ? string.Empty : this.Ghichu.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="LskhenthuongBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(LskhenthuongBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="LskhenthuongBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="LskhenthuongBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="LskhenthuongBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(LskhenthuongBase Object1, LskhenthuongBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.IdLichsukhenthuong != Object2.IdLichsukhenthuong)
				equal = false;
			if (Object1.IdQuannhan != Object2.IdQuannhan)
				equal = false;
			if (Object1.IdHinhthucKhenthuong != Object2.IdHinhthucKhenthuong)
				equal = false;
			if (Object1.CapKhenthuong != Object2.CapKhenthuong)
				equal = false;
			if ( Object1.Ngaynhan != null && Object2.Ngaynhan != null )
			{
				if (Object1.Ngaynhan != Object2.Ngaynhan)
					equal = false;
			}
			else if (Object1.Ngaynhan == null ^ Object2.Ngaynhan == null )
			{
				equal = false;
			}
			if ( Object1.Ghichu != null && Object2.Ghichu != null )
			{
				if (Object1.Ghichu != Object2.Ghichu)
					equal = false;
			}
			else if (Object1.Ghichu == null ^ Object2.Ghichu == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((LskhenthuongBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static LskhenthuongComparer GetComparer()
        {
            return new LskhenthuongComparer();
        }
        */

        // Comparer delegates back to Lskhenthuong
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Lskhenthuong rhs, LskhenthuongColumn which)
        {
            switch (which)
            {
            	
            	
            	case LskhenthuongColumn.IdLichsukhenthuong:
            		return this.IdLichsukhenthuong.CompareTo(rhs.IdLichsukhenthuong);
            		
            		                 
            	
            	
            	case LskhenthuongColumn.IdQuannhan:
            		return this.IdQuannhan.CompareTo(rhs.IdQuannhan);
            		
            		                 
            	
            	
            	case LskhenthuongColumn.IdHinhthucKhenthuong:
            		return this.IdHinhthucKhenthuong.CompareTo(rhs.IdHinhthucKhenthuong);
            		
            		                 
            	
            	
            	case LskhenthuongColumn.CapKhenthuong:
            		return this.CapKhenthuong.CompareTo(rhs.CapKhenthuong);
            		
            		                 
            	
            	
            	case LskhenthuongColumn.Ngaynhan:
            		return this.Ngaynhan.Value.CompareTo(rhs.Ngaynhan.Value);
            		
            		                 
            	
            	
            	case LskhenthuongColumn.Ghichu:
            		return this.Ghichu.CompareTo(rhs.Ghichu);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<LskhenthuongKey> Members
		
		// member variable for the EntityId property
		private LskhenthuongKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual LskhenthuongKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new LskhenthuongKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("Lskhenthuong")
					.Append("|").Append( this.IdLichsukhenthuong.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{7}{6}- IdLichsukhenthuong: {0}{6}- IdQuannhan: {1}{6}- IdHinhthucKhenthuong: {2}{6}- CapKhenthuong: {3}{6}- Ngaynhan: {4}{6}- Ghichu: {5}{6}", 
				this.IdLichsukhenthuong,
				this.IdQuannhan,
				this.IdHinhthucKhenthuong,
				this.CapKhenthuong,
				(this.Ngaynhan == null) ? string.Empty : this.Ngaynhan.ToString(),
				(this.Ghichu == null) ? string.Empty : this.Ghichu.ToString(),
				System.Environment.NewLine, 
				this.GetType());
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'LSKHENTHUONG' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class LskhenthuongEntityData : ICloneable
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
			/// <summary>			
			/// ID_LICHSUKHENTHUONG : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "LSKHENTHUONG"</remarks>
			public System.Int64 IdLichsukhenthuong;
				
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ID_QUANNHAN : 
		/// </summary>
		public System.Int32		  IdQuannhan = (int)0;
		
		/// <summary>
		/// ID_HINHTHUC_KHENTHUONG : 
		/// </summary>
		public System.Int32		  IdHinhthucKhenthuong = (int)0;
		
		/// <summary>
		/// CAP_KHENTHUONG : 
		/// </summary>
		public System.String		  CapKhenthuong = string.Empty;
		
		/// <summary>
		/// NGAYNHAN : 
		/// </summary>
		public System.DateTime?		  Ngaynhan = null;
		
		/// <summary>
		/// GHICHU : 
		/// </summary>
		public System.String		  Ghichu = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private Quannhan _idQuannhanSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Quannhan"/>.
		/// </summary>
		/// <value>The source Quannhan for IdQuannhan.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual Quannhan IdQuannhanSource
      	{
            get { return this._idQuannhanSource; }
            set { this._idQuannhanSource = value; }
      	}
		private Dmhinhthuckhenthuong _idHinhthucKhenthuongSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Dmhinhthuckhenthuong"/>.
		/// </summary>
		/// <value>The source Dmhinhthuckhenthuong for IdHinhthucKhenthuong.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual Dmhinhthuckhenthuong IdHinhthucKhenthuongSource
      	{
            get { return this._idHinhthucKhenthuongSource; }
            set { this._idHinhthucKhenthuongSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			LskhenthuongEntityData _tmp = new LskhenthuongEntityData();
						
			_tmp.IdLichsukhenthuong = this.IdLichsukhenthuong;
			
			_tmp.IdQuannhan = this.IdQuannhan;
			_tmp.IdHinhthucKhenthuong = this.IdHinhthucKhenthuong;
			_tmp.CapKhenthuong = this.CapKhenthuong;
			_tmp.Ngaynhan = this.Ngaynhan;
			_tmp.Ghichu = this.Ghichu;
			
			#region Source Parent Composite Entities
			if (this.IdQuannhanSource != null)
				_tmp.IdQuannhanSource = MakeCopyOf(this.IdQuannhanSource) as Quannhan;
			if (this.IdHinhthucKhenthuongSource != null)
				_tmp.IdHinhthucKhenthuongSource = MakeCopyOf(this.IdHinhthucKhenthuongSource) as Dmhinhthuckhenthuong;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct



		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="LskhenthuongColumn"/> which has raised the event.</param>
		public void OnColumnChanging(LskhenthuongColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="LskhenthuongColumn"/> which has raised the event.</param>
		public void OnColumnChanged(LskhenthuongColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="LskhenthuongColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanging(LskhenthuongColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				LskhenthuongEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new LskhenthuongEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="LskhenthuongColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanged(LskhenthuongColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				LskhenthuongEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new LskhenthuongEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region LskhenthuongEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Lskhenthuong"/> object.
	/// </remarks>
	public class LskhenthuongEventArgs : System.EventArgs
	{
		private LskhenthuongColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the LskhenthuongEventArgs class.
		///</summary>
		public LskhenthuongEventArgs(LskhenthuongColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the LskhenthuongEventArgs class.
		///</summary>
		public LskhenthuongEventArgs(LskhenthuongColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The LskhenthuongColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="LskhenthuongColumn" />
		public LskhenthuongColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all Lskhenthuong related events.
	///</summary>
	public delegate void LskhenthuongEventHandler(object sender, LskhenthuongEventArgs e);
	
	#region LskhenthuongComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class LskhenthuongComparer : System.Collections.Generic.IComparer<Lskhenthuong>
	{
		LskhenthuongColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:LskhenthuongComparer"/> class.
        /// </summary>
		public LskhenthuongComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:LskhenthuongComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public LskhenthuongComparer(LskhenthuongColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="Lskhenthuong"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="Lskhenthuong"/> to compare.</param>
        /// <param name="b">The second <c>Lskhenthuong</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Lskhenthuong a, Lskhenthuong b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Lskhenthuong entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Lskhenthuong a, Lskhenthuong b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public LskhenthuongColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region LskhenthuongKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Lskhenthuong"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class LskhenthuongKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the LskhenthuongKey class.
		/// </summary>
		public LskhenthuongKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the LskhenthuongKey class.
		/// </summary>
		public LskhenthuongKey(LskhenthuongBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.IdLichsukhenthuong = entity.IdLichsukhenthuong;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the LskhenthuongKey class.
		/// </summary>
		public LskhenthuongKey(System.Int64 idLichsukhenthuong)
		{
			#region Init Properties

			this.IdLichsukhenthuong = idLichsukhenthuong;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private LskhenthuongBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public LskhenthuongBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the IdLichsukhenthuong property
		private System.Int64 _idLichsukhenthuong;
		
		/// <summary>
		/// Gets or sets the IdLichsukhenthuong property.
		/// </summary>
		public System.Int64 IdLichsukhenthuong
		{
			get { return _idLichsukhenthuong; }
			set
			{
				if ( this.Entity != null )
					this.Entity.IdLichsukhenthuong = value;
				
				_idLichsukhenthuong = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				IdLichsukhenthuong = ( values["IdLichsukhenthuong"] != null ) ? (System.Int64) EntityUtil.ChangeType(values["IdLichsukhenthuong"], typeof(System.Int64)) : (long)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("IdLichsukhenthuong", IdLichsukhenthuong);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("IdLichsukhenthuong: {0}{1}",
								IdLichsukhenthuong,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region LskhenthuongColumn Enum
	
	/// <summary>
	/// Enumerate the Lskhenthuong columns.
	/// </summary>
	[Serializable]
	public enum LskhenthuongColumn : int
	{
		/// <summary>
		/// IdLichsukhenthuong : 
		/// </summary>
		[EnumTextValue("ID_LICHSUKHENTHUONG")]
		[ColumnEnum("ID_LICHSUKHENTHUONG", typeof(System.Int64), System.Data.DbType.Int64, true, true, false)]
		IdLichsukhenthuong = 1,
		/// <summary>
		/// IdQuannhan : 
		/// </summary>
		[EnumTextValue("ID_QUANNHAN")]
		[ColumnEnum("ID_QUANNHAN", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		IdQuannhan = 2,
		/// <summary>
		/// IdHinhthucKhenthuong : 
		/// </summary>
		[EnumTextValue("ID_HINHTHUC_KHENTHUONG")]
		[ColumnEnum("ID_HINHTHUC_KHENTHUONG", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		IdHinhthucKhenthuong = 3,
		/// <summary>
		/// CapKhenthuong : 
		/// </summary>
		[EnumTextValue("CAP_KHENTHUONG")]
		[ColumnEnum("CAP_KHENTHUONG", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		CapKhenthuong = 4,
		/// <summary>
		/// Ngaynhan : 
		/// </summary>
		[EnumTextValue("NGAYNHAN")]
		[ColumnEnum("NGAYNHAN", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		Ngaynhan = 5,
		/// <summary>
		/// Ghichu : 
		/// </summary>
		[EnumTextValue("GHICHU")]
		[ColumnEnum("GHICHU", typeof(System.String), System.Data.DbType.String, false, false, true)]
		Ghichu = 6
	}//End enum

	#endregion LskhenthuongColumn Enum

} // end namespace
